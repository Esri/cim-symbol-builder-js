"use strict";(self.webpackChunkRemoteClient=self.webpackChunkRemoteClient||[]).push([[2442],{16451:(e,t,o)=>{o.d(t,{Z:()=>f});var r=o(43697),n=o(2368),i=o(96674),s=o(5600),l=(o(75215),o(67676),o(80442),o(71715)),a=o(52011),p=o(30556),y=o(72729),u=o(70082);let c=class extends((0,n.J)(i.wq)){constructor(e){super(e),this.id=null,this.name=null,this.domains=null,this.templates=null}readDomains(e){const t={};for(const o of Object.keys(e))t[o]=(0,y.im)(e[o]);return t}writeDomains(e,t){const o={};for(const t of Object.keys(e))e[t]&&(o[t]=e[t]?.toJSON());t.domains=o}};(0,r._)([(0,s.Cb)({json:{write:!0}})],c.prototype,"id",void 0),(0,r._)([(0,s.Cb)({json:{write:!0}})],c.prototype,"name",void 0),(0,r._)([(0,s.Cb)({json:{write:!0}})],c.prototype,"domains",void 0),(0,r._)([(0,l.r)("domains")],c.prototype,"readDomains",null),(0,r._)([(0,p.c)("domains")],c.prototype,"writeDomains",null),(0,r._)([(0,s.Cb)({type:[u.Z],json:{write:!0}})],c.prototype,"templates",void 0),c=(0,r._)([(0,a.j)("esri.layers.support.FeatureType")],c);const f=c},28694:(e,t,o)=>{o.d(t,{p:()=>n});var r=o(69285);function n(e,t,o){if(!o||!o.features||!o.hasZ)return;const n=(0,r.k)(o.geometryType,t,e.outSpatialReference);if(null!=n)for(const e of o.features)n(e.geometry)}},74889:(e,t,o)=>{o.d(t,{Z:()=>w});var r,n=o(43697),i=o(66577),s=o(38171),l=o(35454),a=o(96674),p=o(22974),y=o(5600),u=(o(75215),o(71715)),c=o(52011),f=o(30556),m=o(82971),h=o(33955),d=o(1231);const g=new l.X({esriGeometryPoint:"point",esriGeometryMultipoint:"multipoint",esriGeometryPolyline:"polyline",esriGeometryPolygon:"polygon",esriGeometryEnvelope:"extent",mesh:"mesh","":null});let S=r=class extends a.wq{constructor(e){super(e),this.displayFieldName=null,this.exceededTransferLimit=!1,this.features=[],this.fields=null,this.geometryType=null,this.hasM=!1,this.hasZ=!1,this.queryGeometry=null,this.spatialReference=null}readFeatures(e,t){const o=m.Z.fromJSON(t.spatialReference),r=[];for(let t=0;t<e.length;t++){const n=e[t],i=s.Z.fromJSON(n),l=n.geometry&&n.geometry.spatialReference;null==i.geometry||l||(i.geometry.spatialReference=o);const a=n.aggregateGeometries,p=i.aggregateGeometries;if(a&&null!=p)for(const e in p){const t=p[e],r=a[e],n=r?.spatialReference;null==t||n||(t.spatialReference=o)}r.push(i)}return r}writeGeometryType(e,t,o,r){if(e)return void g.write(e,t,o,r);const{features:n}=this;if(n)for(const e of n)if(e&&null!=e.geometry)return void g.write(e.geometry.type,t,o,r)}readQueryGeometry(e,t){if(!e)return null;const o=!!e.spatialReference,r=(0,h.im)(e);return r&&!o&&t.spatialReference&&(r.spatialReference=m.Z.fromJSON(t.spatialReference)),r}writeSpatialReference(e,t){if(e)return void(t.spatialReference=e.toJSON());const{features:o}=this;if(o)for(const e of o)if(e&&null!=e.geometry&&e.geometry.spatialReference)return void(t.spatialReference=e.geometry.spatialReference.toJSON())}clone(){return new r(this.cloneProperties())}cloneProperties(){return(0,p.d9)({displayFieldName:this.displayFieldName,exceededTransferLimit:this.exceededTransferLimit,features:this.features,fields:this.fields,geometryType:this.geometryType,hasM:this.hasM,hasZ:this.hasZ,queryGeometry:this.queryGeometry,spatialReference:this.spatialReference,transform:this.transform})}toJSON(e){const t=this.write();if(t.features&&Array.isArray(e)&&e.length>0)for(let o=0;o<t.features.length;o++){const r=t.features[o];if(r.geometry){const t=e&&e[o];r.geometry=t&&t.toJSON()||r.geometry}}return t}quantize(e){const{scale:[t,o],translate:[r,n]}=e,i=this.features,s=this._getQuantizationFunction(this.geometryType,(e=>Math.round((e-r)/t)),(e=>Math.round((n-e)/o)));for(let e=0,t=i.length;e<t;e++)s?.(i[e].geometry)||(i.splice(e,1),e--,t--);return this.transform=e,this}unquantize(){const{geometryType:e,features:t,transform:o}=this;if(!o)return this;const{translate:[r,n],scale:[i,s]}=o;let l=null,a=null;if(this.hasZ&&null!=o?.scale?.[2]){const{translate:[,,e],scale:[,,t]}=o;l=o=>o*t+e}if(this.hasM&&null!=o?.scale?.[3]){const{translate:[,,,e],scale:[,,,t]}=o;a=o=>null==o?o:o*t+e}const p=this._getHydrationFunction(e,(e=>e*i+r),(e=>n-e*s),l,a);for(const{geometry:e}of t)null!=e&&p&&p(e);return this.transform=null,this}_quantizePoints(e,t,o){let r,n;const i=[];for(let s=0,l=e.length;s<l;s++){const l=e[s];if(s>0){const e=t(l[0]),s=o(l[1]);e===r&&s===n||(i.push([e-r,s-n]),r=e,n=s)}else r=t(l[0]),n=o(l[1]),i.push([r,n])}return i.length>0?i:null}_getQuantizationFunction(e,t,o){return"point"===e?e=>(e.x=t(e.x),e.y=o(e.y),e):"polyline"===e||"polygon"===e?e=>{const r=(0,h.oU)(e)?e.rings:e.paths,n=[];for(let e=0,i=r.length;e<i;e++){const i=r[e],s=this._quantizePoints(i,t,o);s&&n.push(s)}return n.length>0?((0,h.oU)(e)?e.rings=n:e.paths=n,e):null}:"multipoint"===e?e=>{const r=this._quantizePoints(e.points,t,o);return r&&r.length>0?(e.points=r,e):null}:"extent"===e?e=>e:null}_getHydrationFunction(e,t,o,r,n){return"point"===e?e=>{e.x=t(e.x),e.y=o(e.y),r&&(e.z=r(e.z))}:"polyline"===e||"polygon"===e?e=>{const i=(0,h.oU)(e)?e.rings:e.paths;let s,l;for(let e=0,r=i.length;e<r;e++){const r=i[e];for(let e=0,n=r.length;e<n;e++){const n=r[e];e>0?(s+=n[0],l+=n[1]):(s=n[0],l=n[1]),n[0]=t(s),n[1]=o(l)}}if(r&&n)for(let e=0,t=i.length;e<t;e++){const t=i[e];for(let e=0,o=t.length;e<o;e++){const o=t[e];o[2]=r(o[2]),o[3]=n(o[3])}}else if(r)for(let e=0,t=i.length;e<t;e++){const t=i[e];for(let e=0,o=t.length;e<o;e++){const o=t[e];o[2]=r(o[2])}}else if(n)for(let e=0,t=i.length;e<t;e++){const t=i[e];for(let e=0,o=t.length;e<o;e++){const o=t[e];o[2]=n(o[2])}}}:"extent"===e?e=>{e.xmin=t(e.xmin),e.ymin=o(e.ymin),e.xmax=t(e.xmax),e.ymax=o(e.ymax),r&&null!=e.zmax&&null!=e.zmin&&(e.zmax=r(e.zmax),e.zmin=r(e.zmin)),n&&null!=e.mmax&&null!=e.mmin&&(e.mmax=n(e.mmax),e.mmin=n(e.mmin))}:"multipoint"===e?e=>{const i=e.points;let s,l;for(let e=0,r=i.length;e<r;e++){const r=i[e];e>0?(s+=r[0],l+=r[1]):(s=r[0],l=r[1]),r[0]=t(s),r[1]=o(l)}if(r&&n)for(let e=0,t=i.length;e<t;e++){const t=i[e];t[2]=r(t[2]),t[3]=n(t[3])}else if(r)for(let e=0,t=i.length;e<t;e++){const t=i[e];t[2]=r(t[2])}else if(n)for(let e=0,t=i.length;e<t;e++){const t=i[e];t[2]=n(t[2])}}:null}};(0,n._)([(0,y.Cb)({type:String,json:{write:!0}})],S.prototype,"displayFieldName",void 0),(0,n._)([(0,y.Cb)({type:Boolean,json:{write:{overridePolicy:e=>({enabled:e})}}})],S.prototype,"exceededTransferLimit",void 0),(0,n._)([(0,y.Cb)({type:[s.Z],json:{write:!0}})],S.prototype,"features",void 0),(0,n._)([(0,u.r)("features")],S.prototype,"readFeatures",null),(0,n._)([(0,y.Cb)({type:[d.Z],json:{write:!0}})],S.prototype,"fields",void 0),(0,n._)([(0,y.Cb)({type:["point","multipoint","polyline","polygon","extent","mesh"],json:{read:{reader:g.read}}})],S.prototype,"geometryType",void 0),(0,n._)([(0,f.c)("geometryType")],S.prototype,"writeGeometryType",null),(0,n._)([(0,y.Cb)({type:Boolean,json:{write:{overridePolicy:e=>({enabled:e})}}})],S.prototype,"hasM",void 0),(0,n._)([(0,y.Cb)({type:Boolean,json:{write:{overridePolicy:e=>({enabled:e})}}})],S.prototype,"hasZ",void 0),(0,n._)([(0,y.Cb)({types:i.qM,json:{write:!0}})],S.prototype,"queryGeometry",void 0),(0,n._)([(0,u.r)("queryGeometry")],S.prototype,"readQueryGeometry",null),(0,n._)([(0,y.Cb)({type:m.Z,json:{write:!0}})],S.prototype,"spatialReference",void 0),(0,n._)([(0,f.c)("spatialReference")],S.prototype,"writeSpatialReference",null),(0,n._)([(0,y.Cb)({json:{write:!0}})],S.prototype,"transform",void 0),S=r=(0,n._)([(0,c.j)("esri.rest.support.FeatureSet")],S),S.prototype.toJSON.isDefaultToJSON=!0;const w=S},58333:(e,t,o)=>{o.d(t,{ET:()=>i,I4:()=>n,eG:()=>a,lF:()=>s,lj:()=>y,qP:()=>l,wW:()=>p});const r=[252,146,31,255],n={type:"esriSMS",style:"esriSMSCircle",size:6,color:r,outline:{type:"esriSLS",style:"esriSLSSolid",width:.75,color:[153,153,153,255]}},i={type:"esriSLS",style:"esriSLSSolid",width:.75,color:r},s={type:"esriSFS",style:"esriSFSSolid",color:[252,146,31,196],outline:{type:"esriSLS",style:"esriSLSSolid",width:.75,color:[255,255,255,191]}},l={type:"esriTS",color:[255,255,255,255],font:{family:"arial-unicode-ms",size:10,weight:"bold"},horizontalAlignment:"center",kerning:!0,haloColor:[0,0,0,255],haloSize:1,rotated:!1,text:"",xoffset:0,yoffset:0,angle:0},a={type:"esriSMS",style:"esriSMSCircle",color:[0,0,0,255],outline:null,size:10.5},p={type:"esriSLS",style:"esriSLSSolid",color:[0,0,0,255],width:1.5},y={type:"esriSFS",style:"esriSFSSolid",color:[0,0,0,255],outline:null}}}]);