"use strict";(self.webpackChunkRemoteClient=self.webpackChunkRemoteClient||[]).push([[629,7136],{67482:(e,t,s)=>{function n(e){return null!=u(e)||null!=o(e)}function r(e){return a.test(e)}function i(e){return u(e)??o(e)}function o(e){const t=new Date(e);return function(e,t){if(Number.isNaN(e.getTime()))return!1;let s=!0;if(p&&/\d+\W*$/.test(t)){const e=t.match(/[a-zA-Z]{2,}/);if(e){let t=!1,n=0;for(;!t&&n<=e.length;)t=!l.test(e[n]),n++;s=!t}}return s}(t,e)?Number.isNaN(t.getTime())?null:t.getTime()-6e4*t.getTimezoneOffset():null}function u(e){const t=a.exec(e);if(!t?.groups)return null;const s=t.groups,n=+s.year,r=+s.month-1,i=+s.day,o=+(s.hours??"0"),u=+(s.minutes??"0"),l=+(s.seconds??"0");if(o>23)return null;if(u>59)return null;if(l>59)return null;const p=s.ms??"0",c=p?+p.padEnd(3,"0").slice(0,3):0;let d;if(s.isUTC||!s.offsetSign)d=Date.UTC(n,r,i,o,u,l,c);else{const e=+s.offsetHours,t=+s.offsetMinutes;d=6e4*("+"===s.offsetSign?-1:1)*(60*e+t)+Date.UTC(n,r,i,o,u,l,c)}return Number.isNaN(d)?null:d}s.d(t,{Br:()=>r,Cq:()=>n,_U:()=>i});const a=/^(?:(?<year>-?\d{4,})-(?<month>\d{2})-(?<day>\d{2}))(?:T(?<hours>\d{2}):(?<minutes>\d{2}):(?<seconds>\d{2})(?:\.(?<ms>\d+))?)?(?:(?<isUTC>Z)|(?:(?<offsetSign>\+|-)(?<offsetHours>\d{2}):(?<offsetMinutes>\d{2})))?$/,l=/^((jan(uary)?)|(feb(ruary)?)|(mar(ch)?)|(apr(il)?)|(may)|(jun(e)?)|(jul(y)?)|(aug(ust)?)|(sep(tember)?)|(oct(ober)?)|(nov(ember)?)|(dec(ember)?)|(am)|(pm)|(gmt)|(utc))$/i,p=!Number.isNaN(new Date("technology 10").getTime())},17136:(e,t,s)=>{s.d(t,{el:()=>A});var n=s(92602),r=s(49186),i=s(53966),o=s(39829),u=s(82799),a=s(80754),l=s(21325),p=s(28735),c=(s(59456),s(78888)),d=s(65864),f=s(2272),y=s(84952),h=s(92300);const m=()=>i.A.getLogger("esri.geometry.support.normalizeUtils");function g(e){return"polygon"===e[0].type}function S(e){return"polyline"===e[0].type}function b(e,t,s){if(t){const t=function(e,t){if(!(e instanceof u.A||e instanceof o.A)){const e="straightLineDensify: the input geometry is neither polyline nor polygon";throw m().error(e),new r.A(e)}const s=(0,a.r8)(e),n=[];for(const e of s){const s=[];n.push(s),s.push([e[0][0],e[0][1]]);for(let n=0;n<e.length-1;n++){const r=e[n][0],i=e[n][1],o=e[n+1][0],u=e[n+1][1],a=Math.sqrt((o-r)*(o-r)+(u-i)*(u-i)),l=(u-i)/a,p=(o-r)/a,c=a/t;if(c>1){for(let e=1;e<=c-1;e++){const n=e*t,o=p*n+r,u=l*n+i;s.push([o,u])}const e=(a+Math.floor(c-1)*t)/2,n=p*e+r,o=l*e+i;s.push([n,o])}s.push([o,u])}}return function(e){return"polygon"===e.type}(e)?new o.A({rings:n,spatialReference:e.spatialReference}):new u.A({paths:n,spatialReference:e.spatialReference})}(e,1e6);e=(0,p.ci)(t,!0)}return s&&(e=(0,a.kS)(e,s)),e}function F(e,t,s){if(Array.isArray(e)){const n=e[0];if(n>t){const s=(0,a.kd)(n,t);e[0]=n+s*(-2*t)}else if(n<s){const t=(0,a.kd)(n,s);e[0]=n+t*(-2*s)}}else{const n=e.x;if(n>t){const s=(0,a.kd)(n,t);e=e.clone().offset(s*(-2*t),0)}else if(n<s){const t=(0,a.kd)(n,s);e=e.clone().offset(t*(-2*s),0)}}return e}function w(e,t){let s=-1;for(let n=0;n<t.cutIndexes.length;n++){const r=t.cutIndexes[n],i=t.geometries[n],o=(0,a.r8)(i);for(let e=0;e<o.length;e++){const t=o[e];t.some((s=>{if(s[0]<180)return!0;{let s=0;for(let e=0;e<t.length;e++){const n=t[e][0];s=n>s?n:s}s=Number(s.toFixed(9));const n=-360*(0,a.kd)(s,180);for(let s=0;s<t.length;s++){const t=i.getPoint(e,s);i.setPoint(e,s,t.clone().offset(n,0))}return!0}}))}if(r===s){if(g(e))for(const t of(0,a.r8)(i))e[r]=e[r].addRing(t);else if(S(e))for(const t of(0,a.r8)(i))e[r]=e[r].addPath(t)}else s=r,e[r]=i}return e}async function A(e,t,s){if(!Array.isArray(e))return A([e],t);t&&"string"!=typeof t&&m().warn("normalizeCentralMeridian()","The url object is deprecated, use the url string instead");const r="string"==typeof t?t:t?.url??n.A.geometryServiceUrl;let i,g,S,_,I,T,x,E,C=0;const R=[],j=[];for(const t of e)if(null!=t)if(i||(i=t.spatialReference,g=(0,l.Vp)(i),S=i.isWebMercator,T=S?102100:4326,_=a.j7[T].maxX,I=a.j7[T].minX,x=a.j7[T].plus180Line,E=a.j7[T].minus180Line),g)if("mesh"===t.type)j.push(t);else if("point"===t.type)j.push(F(t.clone(),_,I));else if("multipoint"===t.type){const e=t.clone();e.points=e.points.map((e=>F(e,_,I))),j.push(e)}else if("extent"===t.type){const e=t.clone()._normalize(!1,!1,g);j.push(e.rings?new o.A(e):e)}else if(t.extent){const e=t.extent,s=(0,a.kd)(e.xmin,I)*(2*_);let n=0===s?t.clone():(0,a.kS)(t.clone(),s);e.offset(s,0);let{xmin:r,xmax:i}=e;r=Number(r.toFixed(9)),i=Number(i.toFixed(9)),e.intersects(x)&&i!==_?(C=i>C?i:C,n=b(n,S),R.push(n),j.push("cut")):e.intersects(E)&&r!==I?(C=i*(2*_)>C?i*(2*_):C,n=b(n,S,360),R.push(n),j.push("cut")):j.push(n)}else j.push(t.clone());else j.push(t);else j.push(t);let q=(0,a.kd)(C,_),M=-90;const P=q,k=new u.A;for(;q>0;){const e=360*q-180;k.addPath([[e,M],[e,-1*M]]),M*=-1,q--}if(R.length>0&&P>0){const t=w(R,await async function(e,t,s,n){const r=(0,f.Dl)(e),i=t[0].spatialReference,o={...n,responseType:"json",query:{...r.query,f:"json",sr:(0,l.YX)(i),target:JSON.stringify({geometryType:(0,d.$B)(t[0]),geometries:t}),cutter:JSON.stringify(s)}},u=await(0,c.A)(r.path+"/cut",o),{cutIndexes:a,geometries:p=[]}=u.data;return{cutIndexes:a,geometries:p.map((e=>{const t=(0,d.rS)(e);return t.spatialReference=i,t}))}}(r,R,k,s)),n=[],i=[];for(let s=0;s<j.length;s++){const r=j[s];if("cut"!==r)i.push(r);else{const r=t.shift(),o=e[s];null!=o&&"polygon"===o.type&&o.rings&&o.rings.length>1&&r.rings.length>=o.rings.length?(n.push(r),i.push("simplify")):i.push(S?(0,p.Gh)(r):r)}}if(!n.length)return i;const o=await async function(e,t,s){const n="string"==typeof e?(0,y.An)(e):e,r=t[0].spatialReference,i=(0,d.$B)(t[0]),o={...s,query:{...n.query,f:"json",sr:(0,l.YX)(r),geometries:JSON.stringify((0,h.X)(t))}},{data:u}=await(0,c.A)(n.path+"/simplify",o);return(0,h.V)(u.geometries,i,r)}(r,n,s),u=[];for(let e=0;e<i.length;e++){const t=i[e];"simplify"!==t?u.push(t):u.push(S?(0,p.Gh)(o.shift()):o.shift())}return u}const O=[];for(let e=0;e<j.length;e++){const t=j[e];if("cut"!==t)O.push(t);else{const e=R.shift();O.push(!0===S?(0,p.Gh)(e):e)}}return O}},80754:(e,t,s)=>{s.d(t,{j7:()=>o,kS:()=>a,kd:()=>u,r8:()=>l});var n=s(82799),r=s(16930),i=s(65864);const o={102100:{maxX:20037508.342788905,minX:-20037508.342788905,plus180Line:new n.A({paths:[[[20037508.342788905,-20037508.342788905],[20037508.342788905,20037508.342788905]]],spatialReference:r.A.WebMercator}),minus180Line:new n.A({paths:[[[-20037508.342788905,-20037508.342788905],[-20037508.342788905,20037508.342788905]]],spatialReference:r.A.WebMercator})},4326:{maxX:180,minX:-180,plus180Line:new n.A({paths:[[[180,-180],[180,180]]],spatialReference:r.A.WGS84}),minus180Line:new n.A({paths:[[[-180,-180],[-180,180]]],spatialReference:r.A.WGS84})}};function u(e,t){return Math.ceil((e-t)/(2*t))}function a(e,t){const s=l(e);for(const e of s)for(const s of e)s[0]+=t;return e}function l(e){return(0,i.Bi)(e)?e.rings:e.paths}},71202:(e,t,s)=>{s.r(t),s.d(t,{default:()=>_});var n=s(78888),r=s(60999),i=s(49186),o=s(53966),u=s(74887),a=s(65864),l=s(21325),p=s(90708),c=s(58376),d=s(83221),f=s(31464),y=s(19730),h=s(85113),m=s(64714),g=s(82832),S=s(95466),b=s(98453),F=s(30524),w=s(56400);const A={hasAttachments:!1,capabilities:"query, editing, create, delete, update",useStandardizedQueries:!0,supportsCoordinatesQuantization:!0,supportsReturningQueryGeometry:!0,advancedQueryCapabilities:{supportsQueryAttachments:!1,supportsQueryWithCacheHint:!0,supportsQueryWithDistance:!0,supportsQueryWithResultType:!0,supportsStatistics:!0,supportsPercentileStatistics:!0,supportsReturningGeometryCentroid:!0,supportsDistinct:!0,supportsReturningQueryExtent:!0,supportsReturningGeometryProperties:!1,supportsHavingClause:!0,supportsOrderBy:!0,supportsPagination:!0,supportsSqlExpression:!0,supportsDisjointSpatialRel:!0}};class _{constructor(){this._queryEngine=null,this._snapshotFeatures=async e=>{const t=await this._fetch(e);return this._createFeatures(t)}}destroy(){this._queryEngine?.destroy(),this._queryEngine=this._createDefaultAttributes=null}async load(e,t={}){this._loadOptions={url:e.url,customParameters:e.customParameters};const s=[],[n]=await Promise.all([e.url?this._fetch(t?.signal):null,this._checkProjection(e.spatialReference)]),r=(0,h.BM)(n,{geometryType:e.geometryType}),o=e.fields||r.fields||[],u=null!=e.hasZ?e.hasZ:r.hasZ,a=r.geometryType;let p=e.objectIdField||r.objectIdFieldName||"__OBJECTID";const c=e.spatialReference||l.KK;let f=e.timeInfo;o===r.fields&&r.unknownFields.length>0&&s.push({name:"geojson-layer:unknown-field-types",message:"Some fields types couldn't be inferred from the features and were dropped",details:{unknownFields:r.unknownFields}});const g=new S.A(o);let _=g.get(p);_?("esriFieldTypeString"!==_.type&&(_.type="esriFieldTypeOID"),_.editable=!1,_.nullable=!1,p=_.name):(_={alias:p,name:p,type:"string"===r.objectIdFieldType?"esriFieldTypeString":"esriFieldTypeOID",editable:!1,nullable:!1},o.unshift(_));const I={};for(const e of o){if(null==e.name&&(e.name=e.alias),null==e.alias&&(e.alias=e.name),!e.name)throw new i.A("geojson-layer:invalid-field-name","field name is missing",{field:e});if(!b.m.jsonValues.includes(e.type))throw new i.A("geojson-layer:invalid-field-type",`invalid type for field "${e.name}"`,{field:e});if(e.name!==_.name){const t=(0,F.lD)(e);void 0!==t&&(I[e.name]=t)}null==e.length&&(e.length=(0,F._b)(e))}if(f){if(f.startTimeField){const e=g.get(f.startTimeField);e?(f.startTimeField=e.name,e.type="esriFieldTypeDate"):f.startTimeField=null}if(f.endTimeField){const e=g.get(f.endTimeField);e?(f.endTimeField=e.name,e.type="esriFieldTypeDate"):f.endTimeField=null}if(f.trackIdField){const e=g.get(f.trackIdField);e?f.trackIdField=e.name:(f.trackIdField=null,s.push({name:"geojson-layer:invalid-timeInfo-trackIdField",message:"trackIdField is missing",details:{timeInfo:f}}))}f.startTimeField||f.endTimeField||(s.push({name:"geojson-layer:invalid-timeInfo",message:"startTimeField and endTimeField are missing",details:{timeInfo:f}}),f=null)}const T=a?(0,m.F0)(a):void 0,x=g.dateFields.length?{timeZoneIANA:w.n$}:null,E={warnings:s,featureErrors:[],layerDefinition:{...A,drawingInfo:T??void 0,templates:(0,m.e2)(I),extent:void 0,geometryType:a,objectIdField:p,fields:o,hasZ:!!u,timeInfo:f,dateFieldsTimeReference:x}};this._queryEngine=new y.do({fieldsIndex:S.A.fromLayerJSON({fields:o,timeInfo:f,dateFieldsTimeReference:x}),geometryType:a,hasM:!1,hasZ:u,objectIdField:p,spatialReference:c,timeInfo:f,featureStore:new d.A({geometryType:a,hasM:!1,hasZ:u})});const C=this._queryEngine.fieldsIndex.requiredFields.indexOf(_);C>-1&&this._queryEngine.fieldsIndex.requiredFields.splice(C,1),this._createDefaultAttributes=(0,m.Vx)(I,p);const R=await this._createFeatures(n);this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,R);const j=this._normalizeFeatures(R,E.featureErrors);this._queryEngine.featureStore.addMany(j);const{fullExtent:q,timeExtent:M}=await this._queryEngine.fetchRecomputedExtents();if(E.layerDefinition.extent=q,M){const{start:e,end:t}=M;E.layerDefinition.timeInfo.timeExtent=[e,t]}return E}async applyEdits(e){const{spatialReference:t,geometryType:s}=this._queryEngine;return await Promise.all([(0,g.$1)(t,s),(0,f.Nk)(e.adds,t),(0,f.Nk)(e.updates,t)]),await this._waitSnapshotComplete(),this._applyEdits(e)}async queryFeatures(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQuery(e,t.signal)}async queryFeatureCount(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForCount(e,t.signal)}async queryObjectIds(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForIds(e,t.signal)}async queryExtent(e={},t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForExtent(e,t.signal)}async querySnapping(e,t={}){return await this._waitSnapshotComplete(),(0,c.J)(this._queryEngine,e,t.signal)}async queryAttributeBins(e,t={}){return await this._waitSnapshotComplete(),this._queryEngine.executeAttributeBinsQuery(e,t.signal)}async refresh(e){this._loadOptions.customParameters=e,this._snapshotTask?.abort(),this._snapshotTask=(0,r.UT)(this._snapshotFeatures),this._snapshotTask.promise.then((e=>{this._queryEngine.featureStore.clear(),this._objectIdGenerator=this._createObjectIdGenerator(this._queryEngine,e);const t=this._normalizeFeatures(e);t&&this._queryEngine.featureStore.addMany(t)}),(e=>{this._queryEngine.featureStore.clear(),(0,u.zf)(e)||o.A.getLogger("esri.layers.GeoJSONLayer").error(new i.A("geojson-layer:refresh","An error occurred during refresh",{error:e}))})),await this._waitSnapshotComplete();const{fullExtent:t,timeExtent:s}=await this._queryEngine.fetchRecomputedExtents();return{extent:t,timeExtent:s}}async _createFeatures(e){if(null==e)return[];const{geometryType:t,hasZ:s,objectIdField:n}=this._queryEngine,r=(0,h.bd)(e,{geometryType:t,hasZ:s,objectIdField:n});if(!(0,l.aI)(this._queryEngine.spatialReference,l.KK))for(const e of r)null!=e.geometry&&(e.geometry=(0,p.Ux)((0,f.Cv)((0,p.zv)(e.geometry,this._queryEngine.geometryType,this._queryEngine.hasZ,!1),l.KK,this._queryEngine.spatialReference)));return r}async _waitSnapshotComplete(){if(this._snapshotTask&&!this._snapshotTask.finished){try{await this._snapshotTask.promise}catch{}return this._waitSnapshotComplete()}}async _fetch(e){const{url:t,customParameters:s}=this._loadOptions,r=(await(0,n.A)(t??"",{responseType:"json",query:{...s},signal:e})).data;return(0,h.sO)(r),r}_normalizeFeatures(e,t){const{objectIdField:s,fieldsIndex:n}=this._queryEngine,r=[];for(const i of e){const e=this._createDefaultAttributes(),o=(0,g.MB)(n,e,i.attributes,!0);o?t?.push(o):(this._assignObjectId(e,i.attributes,!0),i.attributes=e,i.objectId=e[s],r.push(i))}return r}async _applyEdits(e){const{adds:t,updates:s,deletes:n}=e,r={addResults:[],deleteResults:[],updateResults:[],uidToObjectId:{}};if(t?.length&&this._applyAddEdits(r,t),s?.length&&this._applyUpdateEdits(r,s),n?.length){for(const e of n)r.deleteResults.push((0,g.bP)(e));this._queryEngine.featureStore.removeManyById(n)}const{fullExtent:i,timeExtent:o}=await this._queryEngine.fetchRecomputedExtents();return{extent:i,timeExtent:o,featureEditResults:r}}_applyAddEdits(e,t){const{addResults:s}=e,{geometryType:n,hasM:r,hasZ:i,objectIdField:o,spatialReference:u,featureStore:l,fieldsIndex:c}=this._queryEngine,d=[];for(const r of t){if(r.geometry&&n!==(0,a.$B)(r.geometry)){s.push((0,g.Yx)("Incorrect geometry type."));continue}const t=this._createDefaultAttributes(),i=(0,g.MB)(c,t,r.attributes);if(i)s.push(i);else{if(this._assignObjectId(t,r.attributes),r.attributes=t,null!=r.uid){const t=r.attributes[o];e.uidToObjectId[r.uid]=t}if(null!=r.geometry){const e=r.geometry.spatialReference??u;r.geometry=(0,f.Cv)((0,g.CR)(r.geometry,e),e,u)}d.push(r),s.push((0,g.bP)(r.attributes[o]))}}l.addMany((0,p.Di)([],d,n,i,r,o))}_applyUpdateEdits({updateResults:e},t){const{geometryType:s,hasM:n,hasZ:r,objectIdField:i,spatialReference:o,featureStore:u,fieldsIndex:l}=this._queryEngine;for(const c of t){const{attributes:t,geometry:d}=c,y=t?.[i];if(null==y){e.push((0,g.Yx)(`Identifier field ${i} missing`));continue}if(!u.has(y)){e.push((0,g.Yx)(`Feature with object id ${y} missing`));continue}const h=(0,p.oN)(u.getFeature(y),s,r,n);if(null!=d){if(s!==(0,a.$B)(d)){e.push((0,g.Yx)("Incorrect geometry type."));continue}const t=d.spatialReference??o;h.geometry=(0,f.Cv)((0,g.CR)(d,t),t,o)}if(t){const s=(0,g.MB)(l,h.attributes,t);if(s){e.push(s);continue}}u.add((0,p.E2)(h,s,r,n,i)),e.push((0,g.bP)(y))}}_createObjectIdGenerator(e,t){const s=e.fieldsIndex.get(e.objectIdField);if("esriFieldTypeString"===s.type)return()=>s.name+"-"+Date.now().toString(16);let n=Number.NEGATIVE_INFINITY;for(const e of t)e.objectId&&(n=Math.max(n,e.objectId));return n=Math.max(0,n)+1,()=>n++}_assignObjectId(e,t,s=!1){const n=this._queryEngine.objectIdField;e[n]=s&&n in t?t[n]:this._objectIdGenerator()}async _checkProjection(e){try{await(0,f.Nk)(l.KK,e)}catch{throw new i.A("geojson-layer","Projection not supported")}}}},85113:(e,t,s)=>{s.d(t,{BM:()=>I,bd:()=>T,sO:()=>_,xD:()=>p});var n=s(67482),r=s(49186),i=s(21325),o=s(43334),u=s(92722),a=s(30524);const l={LineString:"esriGeometryPolyline",MultiLineString:"esriGeometryPolyline",MultiPoint:"esriGeometryMultipoint",Point:"esriGeometryPoint",Polygon:"esriGeometryPolygon",MultiPolygon:"esriGeometryPolygon"};function p(e){return l[e]}function*c(e){switch(e.type){case"Feature":yield e;break;case"FeatureCollection":for(const t of e.features)t&&(yield t)}}function*d(e){if(e)switch(e.type){case"Point":yield e.coordinates;break;case"LineString":case"MultiPoint":yield*e.coordinates;break;case"MultiLineString":case"Polygon":for(const t of e.coordinates)yield*t;break;case"MultiPolygon":for(const t of e.coordinates)for(const e of t)yield*e}}function f(e){for(const t of e)if(t.length>2)return!0;return!1}function y(e){let t=0;for(let s=0;s<e.length;s++){const n=e[s],r=e[(s+1)%e.length];t+=n[0]*r[1]-r[0]*n[1]}return t<=0}function h(e){const t=e[0],s=e[e.length-1];return t[0]===s[0]&&t[1]===s[1]&&t[2]===s[2]||e.push(t),e}function m(e,t,s){switch(t.type){case"LineString":case"MultiPoint":return function(e,t,s){return b(e,t.coordinates,s),e}(e,t,s);case"MultiLineString":return function(e,t,s){for(const n of t.coordinates)b(e,n,s);return e}(e,t,s);case"MultiPolygon":return function(e,t,s){for(const n of t.coordinates){g(e,n[0],s);for(let t=1;t<n.length;t++)S(e,n[t],s)}return e}(e,t,s);case"Point":return function(e,t,s){return w(e,t.coordinates,s),e}(e,t,s);case"Polygon":return function(e,t,s){const n=t.coordinates;g(e,n[0],s);for(let t=1;t<n.length;t++)S(e,n[t],s);return e}(e,t,s)}}function g(e,t,s){const n=h(t);!function(e){return!y(e)}(n)?b(e,n,s):F(e,n,s)}function S(e,t,s){const n=h(t);!function(e){return y(e)}(n)?b(e,n,s):F(e,n,s)}function b(e,t,s){for(const n of t)w(e,n,s);e.lengths.push(t.length)}function F(e,t,s){for(let n=t.length-1;n>=0;n--)w(e,t[n],s);e.lengths.push(t.length)}function w(e,t,s){const[n,r,i]=t;e.coords.push(n,r),s.hasZ&&e.coords.push(i||0)}function A(e){switch(typeof e){case"string":return(0,n.Br)(e)?"esriFieldTypeDate":"esriFieldTypeString";case"number":return"esriFieldTypeDouble";default:return"unknown"}}function _(e,t=4326){if(!e)throw new r.A("geojson-layer:empty","GeoJSON data is empty");if("Feature"!==e.type&&"FeatureCollection"!==e.type)throw new r.A("geojson-layer:unsupported-geojson-object","missing or not supported GeoJSON object type",{data:e});const{crs:s}=e;if(!s)return;const n="string"==typeof s?s:"name"===s.type?s.properties.name:"EPSG"===s.type?s.properties.code:null,o=(0,i.oT)({wkid:t})?new RegExp(".*(CRS84H?|4326)$","i"):new RegExp(`.*(${t})$`,"i");if(!n||!o.test(n))throw new r.A("geojson:unsupported-crs","unsupported GeoJSON 'crs' member",{crs:s})}function I(e,t={}){const s=[],n=new Set,r=new Set;let i,o=!1,u=null,l=!1,{geometryType:y=null}=t;for(const t of c(e)){const{geometry:e,properties:c,id:h}=t;if((!e||(y||(y=p(e.type)),p(e.type)===y))&&(o||(o=f(d(e))),l||(l=null!=h,l&&(i=typeof h,c&&(u=Object.keys(c).filter((e=>c[e]===h))))),c&&u&&l&&null!=h&&(u.length>1?u=u.filter((e=>c[e]===h)):1===u.length&&(u=c[u[0]]===h?u:[])),c))for(const e in c){if(n.has(e))continue;const t=A(c[e]);if("unknown"===t){r.add(e);continue}r.delete(e),n.add(e);const i=(0,a.rS)(e);i&&s.push({name:i,alias:e,type:t})}}const h=(0,a.rS)(1===u?.length&&u[0]||null)??void 0;if(h)for(const e of s)if(e.name===h&&(0,a.WA)(e)){e.type="esriFieldTypeOID";break}return{fields:s,geometryType:y,hasZ:o,objectIdFieldName:h,objectIdFieldType:i,unknownFields:Array.from(r)}}function T(e,t){return Array.from(function*(e,t={}){const{geometryType:s,objectIdField:n}=t;for(const r of e){const{geometry:e,properties:i,id:a}=r;if(e&&p(e.type)!==s)continue;const l=i||{};let c;n&&(c=l[n],null==a||c||(l[n]=c=a));const d=new o.Om(e?m(new u.A,e,t):null,l,null,c);yield d}}(c(e),t))}},64714:(e,t,s)=>{s.d(t,{F0:()=>a,Vx:()=>c,e2:()=>f,f:()=>y});var n=s(44208),r=s(4718),i=s(99352),o=s(4071),u=s(93470);function a(e){return{renderer:{type:"simple",symbol:"esriGeometryPoint"===e||"esriGeometryMultipoint"===e?u.Cb:"esriGeometryPolyline"===e?u.yM:u.WR}}}const l=/^[_$a-zA-Z][_$a-zA-Z0-9]*$/;let p=1;function c(e,t){if((0,n.A)("esri-csp-restrictions"))return()=>({[t]:null,...e});try{let s=`this${d(t)} = null;`;for(const t in e)s+=`this${d(t)} = ${JSON.stringify(e[t])};`;const n=new Function(`\n      return class AttributesClass$${p++} {\n        constructor() {\n          ${s};\n        }\n      }\n    `)();return()=>new n}catch(s){return()=>({[t]:null,...e})}}function d(e){return l.test(e)?`.${e}`:`["${e}"]`}function f(e={}){return[{name:"New Feature",description:"",prototype:{attributes:(0,r.o8)(e)}}]}function y(e,t){return{analytics:{supportsCacheHint:!1},attachment:null,data:{isVersioned:!1,isBranchVersioned:!1,supportsAttachment:!1,supportsM:!1,supportsZ:e},metadata:{supportsAdvancedFieldProperties:!1},operations:{supportsCalculate:!1,supportsTruncate:!1,supportsValidateSql:!1,supportsAdd:t,supportsDelete:t,supportsEditing:t,supportsChangeTracking:!1,supportsQuery:!0,supportsQueryBins:!1,supportsQueryAnalytics:!1,supportsQueryAttachments:!1,supportsQueryTopFeatures:!1,supportsResizeAttachments:!1,supportsSync:!1,supportsUpdate:t,supportsExceedsLimitStatistics:!0,supportsAsyncConvert3D:!1},query:i.F,queryRelated:{supportsCount:!0,supportsOrderBy:!0,supportsPagination:!0,supportsCacheHint:!1},queryTopFeatures:{supportsCacheHint:!1},queryAttributeBins:o.$,editing:{supportsGeometryUpdate:t,supportsGlobalId:!1,supportsReturnServiceEditsInSourceSpatialReference:!1,supportsRollbackOnFailure:!1,supportsUpdateWithoutM:!1,supportsUploadWithItemId:!1,supportsDeleteByAnonymous:!1,supportsDeleteByOthers:!1,supportsUpdateByAnonymous:!1,supportsUpdateByOthers:!1,supportsAsyncApplyEdits:!1,zDefault:void 0}}}},82832:(e,t,s)=>{s.d(t,{$1:()=>m,CR:()=>h,MB:()=>d,Yx:()=>a,bP:()=>p});var n=s(67482),r=s(21325),i=s(30524);class o{constructor(){this.code=null,this.description=null}}class u{constructor(e){this.error=new o,this.globalId=null,this.objectId=null,this.success=!1,this.uniqueId=null,this.error.description=e}}function a(e){return new u(e)}class l{constructor(e){this.globalId=null,this.success=!0,this.objectId=this.uniqueId=e}}function p(e){return new l(e)}const c=new Set;function d(e,t,s,n=!1){c.clear();for(const r in s){const o=e.get(r);if(!o)continue;const u=f(o,s[r]);if(c.add(o.name),o&&(n||o.editable)){const e=(0,i.CJ)(o,u);if(e)return a((0,i.uo)(e,o,u));t[o.name]=u}}for(const t of e.requiredFields??[])if(!c.has(t.name))return a(`missing required field "${t.name}"`);return null}function f(e,t){let s=t;return(0,i.WA)(e)&&"string"==typeof t?s=parseFloat(t):(0,i.yM)(e)&&null!=t&&"string"!=typeof t?s=String(t):(0,i.vE)(e)&&"string"==typeof t&&(s=(0,n._U)(t)),(0,i.WX)(s)}let y;function h(e,t){if(!e||!(0,r.fn)(t))return e;if("rings"in e||"paths"in e){if(null==y)throw new TypeError("geometry engine not loaded");return y.simplify(t,e)}return e}async function m(e,t){!(0,r.fn)(e)||"esriGeometryPolygon"!==t&&"esriGeometryPolyline"!==t||await async function(){return null==y&&(y=await Promise.all([s.e(9930),s.e(1275)]).then(s.bind(s,47559))),y}()}},4071:(e,t,s)=>{s.d(t,{$:()=>n,P:()=>r});const n={supportsDate:!1,supportsFixedInterval:!1,supportsAutoInterval:!1,supportsFixedBoundaries:!1,supportedStatistics:void 0},r={analytics:{supportsCacheHint:!1},attachment:{supportsContentType:!1,supportsExifInfo:!1,supportsKeywords:!1,supportsName:!1,supportsSize:!1,supportsCacheHint:!1,supportsResize:!1},data:{isVersioned:!1,isBranchVersioned:!1,supportsAttachment:!1,supportsM:!1,supportsZ:!1},editing:{supportsDeleteByAnonymous:!1,supportsDeleteByOthers:!1,supportsGeometryUpdate:!1,supportsGlobalId:!1,supportsReturnServiceEditsInSourceSpatialReference:!1,supportsRollbackOnFailure:!1,supportsUpdateByAnonymous:!1,supportsUpdateByOthers:!1,supportsUpdateWithoutM:!1,supportsUploadWithItemId:!1,supportsAsyncApplyEdits:!1,zDefault:void 0},metadata:{supportsAdvancedFieldProperties:!1},operations:{supportsCalculate:!1,supportsTruncate:!1,supportsValidateSql:!1,supportsAdd:!1,supportsDelete:!1,supportsEditing:!1,supportsChangeTracking:!1,supportsQuery:!1,supportsQueryAnalytics:!1,supportsQueryAttachments:!1,supportsQueryBins:!1,supportsQueryTopFeatures:!1,supportsResizeAttachments:!1,supportsSync:!1,supportsUpdate:!1,supportsExceedsLimitStatistics:!1,supportsAsyncConvert3D:!1},queryRelated:{supportsCount:!1,supportsOrderBy:!1,supportsPagination:!1,supportsCacheHint:!1},queryTopFeatures:{supportsCacheHint:!1},queryAttributeBins:n,query:{maxRecordCount:0,maxRecordCountFactor:0,standardMaxRecordCount:0,supportsCacheHint:!1,supportsCentroid:!1,supportsCompactGeometry:!1,supportsCurrentUser:!1,supportsDefaultSpatialReference:!1,supportsFullTextSearch:!1,supportsDisjointSpatialRelationship:!1,supportsDistance:!1,supportsDistinct:!1,supportsExtent:!1,supportsFormatPBF:!1,supportsGeometryProperties:!1,supportsHavingClause:!1,supportsHistoricMoment:!1,supportsMaxRecordCountFactor:!1,supportsOrderBy:!1,supportsPagination:!1,supportsPercentileStatistics:!1,supportsQuantization:!1,supportsQuantizationEditMode:!1,supportsQueryByAnonymous:!1,supportsQueryByOthers:!1,supportsQueryGeometry:!1,supportsResultType:!1,supportsReturnMesh:!1,supportsSqlExpression:!1,supportsStandardizedQueriesOnly:!1,supportsTopFeaturesQuery:!1,supportsTrueCurve:!1,supportsSpatialAggregationStatistics:!1,supportedSpatialAggregationStatistics:{envelope:!1,centroid:!1,convexHull:!1},supportsStatistics:!1,tileMaxRecordCount:0}}},92300:(e,t,s)=>{s.d(t,{V:()=>i,X:()=>r});var n=s(65864);function r(e){return{geometryType:(0,n.$B)(e[0]),geometries:e.map((e=>e.toJSON()))}}function i(e,t,s){const r=(0,n.xD)(t);return e.map((e=>{const t=r.fromJSON(e);return t.spatialReference=s,t}))}},2272:(e,t,s)=>{s.d(t,{Dl:()=>o,jV:()=>i,lF:()=>u}),s(92602),s(70333);var n=s(4718),r=s(84952);function i(e,t){return t?{...t,query:{...e??{},...t.query}}:{query:e}}function o(e){return"string"==typeof e?(0,r.An)(e):(0,n.o8)(e)}function u(e,t,s){const n={};for(const r in e){if("declaredClass"===r)continue;const i=e[r];if(null!=i&&"function"!=typeof i)if(Array.isArray(i))n[r]=i.map((e=>u(e)));else if("object"==typeof i)if(i.toJSON){const e=i.toJSON(s?.[r]);n[r]=t?e:JSON.stringify(e)}else n[r]=t?i:JSON.stringify(i);else n[r]=i}return n}s(926)},93470:(e,t,s)=>{s.d(t,{Cb:()=>i,HW:()=>p,JR:()=>r,JZ:()=>a,WR:()=>u,b6:()=>c,fT:()=>n,nC:()=>l,yM:()=>o});const n=[252,146,31,255],r=[153,153,153,255],i={type:"esriSMS",style:"esriSMSCircle",size:6,color:n,outline:{type:"esriSLS",style:"esriSLSSolid",width:.75,color:[153,153,153,255]}},o={type:"esriSLS",style:"esriSLSSolid",width:.75,color:n},u={type:"esriSFS",style:"esriSFSSolid",color:[252,146,31,196],outline:{type:"esriSLS",style:"esriSLSSolid",width:.75,color:[255,255,255,191]}},a={type:"esriTS",color:[255,255,255,255],font:{family:"arial-unicode-ms",size:10,weight:"bold"},horizontalAlignment:"center",kerning:!0,haloColor:[0,0,0,255],haloSize:1,rotated:!1,text:"",xoffset:0,yoffset:0,angle:0},l={type:"esriSMS",style:"esriSMSCircle",color:[0,0,0,255],outline:null,size:10.5},p={type:"esriSLS",style:"esriSLSSolid",color:[0,0,0,255],width:1.5},c={type:"esriSFS",style:"esriSFSSolid",color:[0,0,0,255],outline:null}}}]);