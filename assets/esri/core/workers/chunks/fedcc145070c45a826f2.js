"use strict";(self.webpackChunkRemoteClient=self.webpackChunkRemoteClient||[]).push([[4914],{88340:(e,t,i)=>{function r(){return new Float32Array(2)}function s(e,t){const i=new Float32Array(2);return i[0]=e,i[1]=t,i}function a(){return r()}function n(){return s(1,1)}function o(){return s(1,0)}function c(){return s(0,1)}i.d(t,{Un:()=>l,fA:()=>s,uY:()=>_,vt:()=>r});const _=a(),l=n(),h=o(),p=c();Object.freeze(Object.defineProperty({__proto__:null,ONES:l,UNIT_X:h,UNIT_Y:p,ZEROS:_,clone:function(e){const t=new Float32Array(2);return t[0]=e[0],t[1]=e[1],t},create:r,createView:function(e,t){return new Float32Array(e,t,2)},fromValues:s,ones:n,unitX:o,unitY:c,zeros:a},Symbol.toStringTag,{value:"Module"}))},46263:(e,t,i)=>{var r;i.d(t,{c:()=>r}),function(e){e[e.Pass=0]="Pass",e[e.Draw=1]="Draw"}(r||(r={}))},36421:(e,t,i)=>{var r;i.d(t,{p:()=>r}),function(e){e[e.Texture=0]="Texture",e[e.RenderBuffer=1]="RenderBuffer"}(r||(r={}))},21231:(e,t,i)=>{i.d(t,{g:()=>_});var r=i(49186),s=(i(44208),i(94656)),a=i(63907),n=i(36421),o=i(67171);class c extends o.R{constructor(e,t){switch(super(),this.context=e,Object.assign(this,t),this.internalFormat){case a.H0.R16F:case a.H0.R16I:case a.H0.R16UI:case a.H0.R32F:case a.H0.R32I:case a.H0.R32UI:case a.H0.R8_SNORM:case a.H0.R8:case a.H0.R8I:case a.H0.R8UI:this.pixelFormat=a.Ab.RED}}static validate(e,t){return new c(e,t)}}let _=class e{constructor(e,t=null,i=null){if(this.type=n.p.Texture,this._glName=null,this._samplingModeDirty=!1,this._wrapModeDirty=!1,this._wasImmutablyAllocated=!1,"context"in e)this._descriptor=e,i=t;else{const i=c.validate(e,t);if(!i)throw new r.A("Texture descriptor invalid");this._descriptor=i}this._descriptor.target===a.Ap.TEXTURE_CUBE_MAP?this._setDataCubeMap(i):this.setData(i)}get glName(){return this._glName}get descriptor(){return this._descriptor}get usedMemory(){return(0,o.e)(this._descriptor)}get isDirty(){return this._samplingModeDirty||this._wrapModeDirty}dispose(){this._glName&&this._descriptor.context.instanceCounter.decrement(a.vt.Texture,this),this._descriptor.context.gl&&this._glName&&(this._descriptor.context.unbindTexture(this),this._descriptor.context.gl.deleteTexture(this._glName),this._glName=null)}release(){this.dispose()}resize(e,t){const i=this._descriptor;if(i.width!==e||i.height!==t){if(this._wasImmutablyAllocated)throw new r.A("Immutable textures can't be resized!");i.width=e,i.height=t,this._descriptor.target===a.Ap.TEXTURE_CUBE_MAP?this._setDataCubeMap(null):this.setData(null)}}_setDataCubeMap(e=null){for(let t=a.Ap.TEXTURE_CUBE_MAP_POSITIVE_X;t<=a.Ap.TEXTURE_CUBE_MAP_NEGATIVE_Z;t++)this._setData(e,t)}setData(e){this._setData(e)}_setData(t,i){if(!this._descriptor.context?.gl)return;const n=this._descriptor.context.gl;(0,s.Y2)(n),this._glName||(this._glName=n.createTexture(),this._glName&&this._descriptor.context.instanceCounter.increment(a.vt.Texture,this)),void 0===t&&(t=null);const o=this._descriptor,c=i??o.target,_=E(c);null===t&&(o.width=o.width||4,o.height=o.height||4,_&&(o.depth=o.depth??1));const A=this._descriptor.context.bindTexture(this,e.TEXTURE_UNIT_FOR_UPDATES);this._descriptor.context.setActiveTexture(e.TEXTURE_UNIT_FOR_UPDATES),l(o),this._configurePixelStorage(),(0,s.Y2)(n);const R=this._deriveInternalFormat();if(u(t)){let e="width"in t?t.width:t.codedWidth,i="height"in t?t.height:t.codedHeight;const r=1;t instanceof HTMLVideoElement&&(e=t.videoWidth,i=t.videoHeight),o.width&&o.height,_&&o.depth,o.isImmutable&&!this._wasImmutablyAllocated&&this._texStorage(c,R,o.hasMipmap,e,i,r),this._texImage(c,0,R,e,i,r,t),(0,s.Y2)(n),o.hasMipmap&&this.generateMipmap(),o.width||(o.width=e),o.height||(o.height=i),_&&!o.depth&&(o.depth=r)}else{const{width:e,height:i,depth:l}=o;if(null==e||null==i)throw new r.A("Width and height must be specified!");if(_&&null==l)throw new r.A("Depth must be specified!");if(o.isImmutable&&!this._wasImmutablyAllocated&&this._texStorage(c,R,o.hasMipmap,e,i,l),d(t)){const s=t.levels,_=m(c,e,i,l),h=Math.min(_-1,s.length-1);n.texParameteri(o.target,this._descriptor.context.gl.TEXTURE_MAX_LEVEL,h);const p=R;if(!(p in a.CQ))throw new r.A("Attempting to use compressed data with an uncompressed format!");this._forEachMipmapLevel(((e,t,i,r)=>{const a=s[Math.min(e,s.length-1)];this._compressedTexImage(c,e,p,t,i,r,a)}),h)}else this._texImage(c,0,R,e,i,l,t),(0,s.Y2)(n),o.hasMipmap&&this.generateMipmap()}h(n,this._descriptor),p(n,this._descriptor),function(e,t){const i=e.capabilities.textureFilterAnisotropic;i&&e.gl.texParameterf(t.target,i.TEXTURE_MAX_ANISOTROPY,t.maxAnisotropy??1)}(this._descriptor.context,this._descriptor),(0,s.Y2)(n),this._descriptor.context.bindTexture(A,e.TEXTURE_UNIT_FOR_UPDATES)}updateData(t,i,s,a,n,o,c=0){o||console.error("An attempt to use uninitialized data!"),this._glName||console.error("An attempt to update uninitialized texture!");const _=this._descriptor,l=this._deriveInternalFormat(),{context:h,pixelFormat:p,dataType:E,target:m,isImmutable:A}=_;if(A&&!this._wasImmutablyAllocated)throw new r.A("Cannot update immutable texture before allocation!");const R=h.bindTexture(this,e.TEXTURE_UNIT_FOR_UPDATES,!0);(i<0||s<0||i+a>_.width||s+n>_.height)&&console.error("An attempt to update out of bounds of the texture!"),this._configurePixelStorage();const{gl:T}=h;c&&T.pixelStorei(T.UNPACK_SKIP_ROWS,c),u(o)?T.texSubImage2D(m,t,i,s,a,n,p,E,o):d(o)?T.compressedTexSubImage2D(m,t,i,s,a,n,l,o.levels[t]):T.texSubImage2D(m,t,i,s,a,n,p,E,o),c&&T.pixelStorei(T.UNPACK_SKIP_ROWS,0),h.bindTexture(R,e.TEXTURE_UNIT_FOR_UPDATES)}updateData3D(t,i,s,a,n,o,c,_){_||console.error("An attempt to use uninitialized data!"),this._glName||console.error("An attempt to update uninitialized texture!");const l=this._descriptor,h=this._deriveInternalFormat(),{context:p,pixelFormat:u,dataType:m,isImmutable:A,target:R}=l;if(A&&!this._wasImmutablyAllocated)throw new r.A("Cannot update immutable texture before allocation!");E(R)||console.warn("Attempting to set 3D texture data on a non-3D texture");const T=p.bindTexture(this,e.TEXTURE_UNIT_FOR_UPDATES);p.setActiveTexture(e.TEXTURE_UNIT_FOR_UPDATES),(i<0||s<0||a<0||i+n>l.width||s+o>l.height||a+c>l.depth)&&console.error("An attempt to update out of bounds of the texture!"),this._configurePixelStorage();const{gl:g}=p;if(d(_))_=_.levels[t],g.compressedTexSubImage3D(R,t,i,s,a,n,o,c,h,_);else{const e=_;g.texSubImage3D(R,t,i,s,a,n,o,c,u,m,e)}p.bindTexture(T,e.TEXTURE_UNIT_FOR_UPDATES)}generateMipmap(){const t=this._descriptor;if(!t.hasMipmap){if(this._wasImmutablyAllocated)throw new r.A("Cannot add mipmaps to immutable texture after allocation");t.hasMipmap=!0,this._samplingModeDirty=!0,l(t)}t.samplingMode===a.Cj.LINEAR?(this._samplingModeDirty=!0,t.samplingMode=a.Cj.LINEAR_MIPMAP_NEAREST):t.samplingMode===a.Cj.NEAREST&&(this._samplingModeDirty=!0,t.samplingMode=a.Cj.NEAREST_MIPMAP_NEAREST);const i=this._descriptor.context.bindTexture(this,e.TEXTURE_UNIT_FOR_UPDATES);this._descriptor.context.setActiveTexture(e.TEXTURE_UNIT_FOR_UPDATES),this._descriptor.context.gl.generateMipmap(t.target),this._descriptor.context.bindTexture(i,e.TEXTURE_UNIT_FOR_UPDATES)}clearMipmap(){const e=this._descriptor;if(e.hasMipmap){if(this._wasImmutablyAllocated)throw new r.A("Cannot delete mipmaps to immutable texture after allocation");e.hasMipmap=!1,this._samplingModeDirty=!0,l(e)}e.samplingMode===a.Cj.LINEAR_MIPMAP_NEAREST?(this._samplingModeDirty=!0,e.samplingMode=a.Cj.LINEAR):e.samplingMode===a.Cj.NEAREST_MIPMAP_NEAREST&&(this._samplingModeDirty=!0,e.samplingMode=a.Cj.NEAREST)}setSamplingMode(e){e!==this._descriptor.samplingMode&&(this._descriptor.samplingMode=e,this._samplingModeDirty=!0)}setWrapMode(e){e!==this._descriptor.wrapMode&&(this._descriptor.wrapMode=e,l(this._descriptor),this._wrapModeDirty=!0)}applyChanges(){const e=this._descriptor,t=e.context.gl;this._samplingModeDirty&&(h(t,e),this._samplingModeDirty=!1),this._wrapModeDirty&&(p(t,e),this._wrapModeDirty=!1)}_deriveInternalFormat(){if(null!=this._descriptor.internalFormat)return this._descriptor.internalFormat===a.Ab.DEPTH_STENCIL&&(this._descriptor.internalFormat=a.Ab.DEPTH24_STENCIL8),this._descriptor.internalFormat;switch(this._descriptor.dataType){case a.ld.FLOAT:switch(this._descriptor.pixelFormat){case a.Ab.RGBA:return this._descriptor.internalFormat=a.H0.RGBA32F;case a.Ab.RGB:return this._descriptor.internalFormat=a.H0.RGB32F;default:throw new r.A("Unable to derive format")}case a.ld.UNSIGNED_BYTE:switch(this._descriptor.pixelFormat){case a.Ab.RGBA:return this._descriptor.internalFormat=a.H0.RGBA8;case a.Ab.RGB:return this._descriptor.internalFormat=a.H0.RGB8}}return this._descriptor.internalFormat=this._descriptor.pixelFormat===a.Ab.DEPTH_STENCIL?a.Ab.DEPTH24_STENCIL8:this._descriptor.pixelFormat}_configurePixelStorage(){const e=this._descriptor.context.gl,{unpackAlignment:t,flipped:i,preMultiplyAlpha:r}=this._descriptor;e.pixelStorei(e.UNPACK_ALIGNMENT,t),e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,i?1:0),e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,r?1:0)}_texStorage(e,t,i,s,n,o){const{gl:c}=this._descriptor.context;if(!(t in a.H0))throw new r.A("Immutable textures must have a sized internal format");if(!this._descriptor.isImmutable)return;const _=i?m(e,s,n,o):1;if(E(e)){if(null==o)throw new r.A("Missing depth dimension for 3D texture upload");c.texStorage3D(e,_,t,s,n,o)}else c.texStorage2D(e,_,t,s,n);this._wasImmutablyAllocated=!0}_texImage(e,t,i,s,a,n,o){const c=this._descriptor.context.gl,_=E(e),{isImmutable:l,pixelFormat:h,dataType:p}=this._descriptor;if(l){if(null!=o){const i=o;if(_){if(null==n)throw new r.A("Missing depth dimension for 3D texture upload");c.texSubImage3D(e,t,0,0,0,s,a,n,h,p,i)}else c.texSubImage2D(e,t,0,0,s,a,h,p,i)}}else{const l=o;if(_){if(null==n)throw new r.A("Missing depth dimension for 3D texture upload");c.texImage3D(e,t,i,s,a,n,0,h,p,l)}else c.texImage2D(e,t,i,s,a,0,h,p,l)}}_compressedTexImage(e,t,i,s,a,n,o){const c=this._descriptor.context.gl,_=E(e);if(this._descriptor.isImmutable){if(null!=o)if(_){if(null==n)throw new r.A("Missing depth dimension for 3D texture upload");c.compressedTexSubImage3D(e,t,0,0,0,s,a,n,i,o)}else c.compressedTexSubImage2D(e,t,0,0,s,a,i,o)}else if(_){if(null==n)throw new r.A("Missing depth dimension for 3D texture upload");c.compressedTexImage3D(e,t,i,s,a,n,0,o)}else c.compressedTexImage2D(e,t,i,s,a,0,o)}_forEachMipmapLevel(e,t=1/0){let{width:i,height:s,depth:n,hasMipmap:o,target:c}=this._descriptor;const _=c===a.Ap.TEXTURE_3D;if(null==i||null==s||_&&null==n)throw new r.A("Missing texture dimensions for mipmap calculation");for(let r=0;e(r,i,s,n),o&&(1!==i||1!==s||_&&1!==n)&&!(r>=t);++r)i=Math.max(1,i>>1),s=Math.max(1,s>>1),_&&(n=Math.max(1,n>>1))}};function l(e){(null!=e.width&&e.width<0||null!=e.height&&e.height<0||null!=e.depth&&e.depth<0)&&console.error("Negative dimension parameters are not allowed!")}function h(e,t){let i=t.samplingMode,r=t.samplingMode;i===a.Cj.LINEAR_MIPMAP_NEAREST||i===a.Cj.LINEAR_MIPMAP_LINEAR?(i=a.Cj.LINEAR,t.hasMipmap||(r=a.Cj.LINEAR)):i!==a.Cj.NEAREST_MIPMAP_NEAREST&&i!==a.Cj.NEAREST_MIPMAP_LINEAR||(i=a.Cj.NEAREST,t.hasMipmap||(r=a.Cj.NEAREST)),e.texParameteri(t.target,e.TEXTURE_MAG_FILTER,i),e.texParameteri(t.target,e.TEXTURE_MIN_FILTER,r)}function p(e,t){"number"==typeof t.wrapMode?(e.texParameteri(t.target,e.TEXTURE_WRAP_S,t.wrapMode),e.texParameteri(t.target,e.TEXTURE_WRAP_T,t.wrapMode)):(e.texParameteri(t.target,e.TEXTURE_WRAP_S,t.wrapMode.s),e.texParameteri(t.target,e.TEXTURE_WRAP_T,t.wrapMode.t))}function d(e){return null!=e&&"type"in e&&"compressed"===e.type}function u(e){return null!=e&&!d(e)&&!function(e){return null!=e&&"byteLength"in e}(e)}function E(e){return e===a.Ap.TEXTURE_3D||e===a.Ap.TEXTURE_2D_ARRAY}function m(e,t,i,r=1){let s=Math.max(t,i);return e===a.Ap.TEXTURE_3D&&(s=Math.max(s,r)),Math.round(Math.log(s)/Math.LN2)+1}_.TEXTURE_UNIT_FOR_UPDATES=0},67171:(e,t,i)=>{i.d(t,{R:()=>a,e:()=>n});var r=i(63907),s=i(42293);class a{constructor(e=0,t=e){this.width=e,this.height=t,this.target=r.Ap.TEXTURE_2D,this.pixelFormat=r.Ab.RGBA,this.dataType=r.ld.UNSIGNED_BYTE,this.samplingMode=r.Cj.LINEAR,this.wrapMode=r.pF.REPEAT,this.maxAnisotropy=1,this.flipped=!1,this.hasMipmap=!1,this.isOpaque=!1,this.unpackAlignment=4,this.preMultiplyAlpha=!1,this.depth=1,this.isImmutable=!1}}function n(e){return e.width<=0||e.height<=0?0:Math.round(e.width*e.height*(e.hasMipmap?4/3:1)*(null==e.internalFormat?4:(0,s.IB)(e.internalFormat)))}},42293:(e,t,i)=>{i.d(t,{IB:()=>s}),i(44208),i(94656);var r=i(63907);function s(e){switch(e){case r.Ab.ALPHA:case r.Ab.LUMINANCE:case r.Ab.RED:case r.Ab.RED_INTEGER:case r.H0.R8:case r.H0.R8I:case r.H0.R8UI:case r.H0.R8_SNORM:case r.yQ.STENCIL_INDEX8:return 1;case r.Ab.LUMINANCE_ALPHA:case r.Ab.RG:case r.Ab.RG_INTEGER:case r.H0.RGBA4:case r.H0.R16F:case r.H0.R16I:case r.H0.R16UI:case r.H0.RG8:case r.H0.RG8I:case r.H0.RG8UI:case r.H0.RG8_SNORM:case r.H0.RGB565:case r.H0.RGB5_A1:case r.yQ.DEPTH_COMPONENT16:return 2;case r.Ab.DEPTH_COMPONENT:case r.Ab.RGB:case r.Ab.RGB_INTEGER:case r.H0.RGB8:case r.H0.RGB8I:case r.H0.RGB8UI:case r.H0.RGB8_SNORM:case r.H0.SRGB8:case r.yQ.DEPTH_COMPONENT24:return 3;case r.Ab.DEPTH_STENCIL:case r.Ab.DEPTH24_STENCIL8:case r.Ab.RGBA:case r.Ab.RGBA_INTEGER:case r.H0.RGBA8:case r.H0.R32F:case r.H0.R11F_G11F_B10F:case r.H0.RG16F:case r.H0.R32I:case r.H0.R32UI:case r.H0.RG16I:case r.H0.RG16UI:case r.H0.RGBA8I:case r.H0.RGBA8UI:case r.H0.RGBA8_SNORM:case r.H0.SRGB8_ALPHA8:case r.H0.RGB9_E5:case r.H0.RGB10_A2UI:case r.H0.RGB10_A2:case r.yQ.DEPTH_STENCIL:case r.yQ.DEPTH_COMPONENT32F:case r.yQ.DEPTH24_STENCIL8:return 4;case r.yQ.DEPTH32F_STENCIL8:return 5;case r.H0.RGB16F:case r.H0.RGB16I:case r.H0.RGB16UI:return 6;case r.H0.RG32F:case r.H0.RG32I:case r.H0.RG32UI:case r.H0.RGBA16F:case r.H0.RGBA16I:case r.H0.RGBA16UI:return 8;case r.H0.RGB32F:case r.H0.RGB32I:case r.H0.RGB32UI:return 12;case r.H0.RGBA32F:case r.H0.RGBA32I:case r.H0.RGBA32UI:return 16;case r.CQ.COMPRESSED_RGB_S3TC_DXT1_EXT:case r.CQ.COMPRESSED_RGBA_S3TC_DXT1_EXT:return.5;case r.CQ.COMPRESSED_RGBA_S3TC_DXT3_EXT:case r.CQ.COMPRESSED_RGBA_S3TC_DXT5_EXT:return 1;case r.CQ.COMPRESSED_R11_EAC:case r.CQ.COMPRESSED_SIGNED_R11_EAC:case r.CQ.COMPRESSED_RGB8_ETC2:case r.CQ.COMPRESSED_SRGB8_ETC2:case r.CQ.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2:case r.CQ.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2:return.5;case r.CQ.COMPRESSED_RG11_EAC:case r.CQ.COMPRESSED_SIGNED_RG11_EAC:case r.CQ.COMPRESSED_RGBA8_ETC2_EAC:case r.CQ.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:return 1}return 0}i(62298)},94656:(e,t,i)=>{i.d(t,{Xc:()=>_,Y2:()=>l,en:()=>c});var r=i(49186),s=i(44208),a=i(53966);const n=()=>a.A.getLogger("esri.views.webgl.checkWebGLError"),o=!!(0,s.A)("enable-feature:webgl-debug");function c(){return o}function _(){return o}function l(e){if(c()){const t=e.getError();if(t){const i=function(e,t){switch(t){case e.INVALID_ENUM:return"Invalid Enum. An unacceptable value has been specified for an enumerated argument.";case e.INVALID_VALUE:return"Invalid Value. A numeric argument is out of range.";case e.INVALID_OPERATION:return"Invalid Operation. The specified command is not allowed for the current state.";case e.INVALID_FRAMEBUFFER_OPERATION:return"Invalid Framebuffer operation. The currently bound framebuffer is not framebuffer complete when trying to render to or to read from it.";case e.OUT_OF_MEMORY:return"Out of memory. Not enough memory is left to execute the command.";case e.CONTEXT_LOST_WEBGL:return"WebGL context has been lost";default:return"Unknown error"}}(e,t),s=(new Error).stack;n().error(new r.A("webgl-error","WebGL error occurred",{message:i,stack:s}))}}}},62298:(e,t,i)=>{i(63907)}}]);