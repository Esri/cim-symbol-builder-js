{"version":3,"file":"static/js/56265.322099bf.chunk.js","mappings":"+IAAA,MAAMA,EACFC,WAAAA,GACIC,KAAKC,gBAAkB,IAAIC,IAC3BF,KAAKG,gCAAkC,CACnCC,KAAM,UACNC,MAAO,UACPC,IAAK,UACLC,aAAc,cAEtB,CACA,QAAIC,GACA,MAAO,QACX,CACAC,MAAAA,CAAOC,GACH,OAAO,IAAIC,KAAKD,EACpB,CACAE,QAAAA,CAASF,GAEL,OAAO,IAAIC,KAAKD,EAAKG,UADF,MAEvB,CACAC,qBAAAA,CAAsBJ,GAClB,MAAMN,EAAOM,EAAKK,cACZV,EAAQK,EAAKM,WAAa,EAC1BV,EAAMI,EAAKO,UACjB,MAAO,GAAGb,KAAQC,EAAMa,WAAWC,SAAS,EAAG,QAAQb,EAClDY,WACAC,SAAS,EAAG,MACrB,CACAC,aAAAA,CAAcC,EAASC,GACnB,MAAMZ,EAAOV,KAAKuB,QAAQF,GAEpBG,EADYxB,KAAKyB,cAAcH,GACbI,cAAchB,IAC/BiB,GAAUH,EACZI,QAAO,EAAGC,UAAoB,iBAATA,IACrBC,KAAI,EAAGC,WAAYA,IAClBC,EAAWhC,KAAKiC,yBAAyBN,GACzCO,EAAkBxB,EAAKyB,cAAgBzB,EAAK0B,oBAAsBJ,GAExE,OADAtB,EAAK2B,WAAWH,GACTxB,CACX,CACA4B,IAAAA,CAAKC,EAAOC,GACR,OAAOD,EAAM1B,YAAc2B,EAAM3B,SACrC,CACAU,OAAAA,CAAQF,GACJ,OAAO,IAAIV,KAAKU,EACpB,CACAI,aAAAA,CAAcH,GAEC,YAAPA,IACAA,EAAK,WAET,IAAImB,EAAYzC,KAAKC,gBAAgByC,IAAIpB,GAQzC,OAPKmB,IACDA,EAAY,IAAIE,KAAKC,eAAe,QAAS,CACzCC,SAAUvB,KACPtB,KAAKG,kCAEZH,KAAKC,gBAAgB6C,IAAIxB,EAAImB,IAE1BA,CACX,CACAR,wBAAAA,CAAyBc,GACrB,MAAOC,KAASC,GAAgBF,EAAYG,MAAM,IAC3CC,EAAOC,GAAWH,EAAaI,KAAK,IAAIC,MAAM,KAErD,OADgC,MAATN,EAAe,GAAK,IACF,GAAhBO,OAAOJ,GAAcI,OAAOH,GAAW,GACpE,E","sources":["../node_modules/timezone-groups/dist/groupByOffset/strategy/native/index.mjs"],"sourcesContent":["class NativeDateEngine {\n    constructor() {\n        this._formatterCache = new Map();\n        this._commonDateTimeFormatterOptions = {\n            year: 'numeric',\n            month: '2-digit',\n            day: '2-digit',\n            timeZoneName: 'shortOffset',\n        };\n    }\n    get name() {\n        return 'native';\n    }\n    create(date) {\n        return new Date(date);\n    }\n    increase(date) {\n        const oneDayInMs = 86400000;\n        return new Date(date.getTime() + oneDayInMs);\n    }\n    formatToIsoDateString(date) {\n        const year = date.getFullYear();\n        const month = date.getMonth() + 1;\n        const day = date.getDate();\n        return `${year}-${month.toString().padStart(2, '0')}-${day\n            .toString()\n            .padStart(2, '0')}`;\n    }\n    isoToTimeZone(isoDate, tz) {\n        const date = this._toDate(isoDate);\n        const formatter = this._getFormatter(tz);\n        const parts = formatter.formatToParts(date);\n        const [offset] = parts\n            .filter(({ type }) => type === 'timeZoneName')\n            .map(({ value }) => value);\n        const tzOffset = this._getTimeZoneOffsetInMins(offset);\n        const tzOffsetMinutes = date.getMinutes() - (date.getTimezoneOffset() - tzOffset);\n        date.setMinutes(tzOffsetMinutes);\n        return date;\n    }\n    same(date1, date2) {\n        return date1.getTime() === date2.getTime();\n    }\n    _toDate(isoDate) {\n        return new Date(isoDate);\n    }\n    _getFormatter(tz) {\n        // Workaround for https://issues.chromium.org/issues/381620359\n        if (tz === 'Factory') {\n            tz = 'Etc/GMT';\n        }\n        let formatter = this._formatterCache.get(tz);\n        if (!formatter) {\n            formatter = new Intl.DateTimeFormat('en-US', {\n                timeZone: tz,\n                ...this._commonDateTimeFormatterOptions,\n            });\n            this._formatterCache.set(tz, formatter);\n        }\n        return formatter;\n    }\n    _getTimeZoneOffsetInMins(gmtTimeZone) {\n        const [sign, ...hoursMinutes] = gmtTimeZone.slice(3);\n        const [hours, minutes] = hoursMinutes.join('').split(':');\n        const signMultiplier = sign === '+' ? 1 : -1;\n        return signMultiplier * (Number(hours) * 60 + Number(minutes || 0));\n    }\n}\n\nexport { NativeDateEngine as DateEngine };\n"],"names":["NativeDateEngine","constructor","this","_formatterCache","Map","_commonDateTimeFormatterOptions","year","month","day","timeZoneName","name","create","date","Date","increase","getTime","formatToIsoDateString","getFullYear","getMonth","getDate","toString","padStart","isoToTimeZone","isoDate","tz","_toDate","parts","_getFormatter","formatToParts","offset","filter","type","map","value","tzOffset","_getTimeZoneOffsetInMins","tzOffsetMinutes","getMinutes","getTimezoneOffset","setMinutes","same","date1","date2","formatter","get","Intl","DateTimeFormat","timeZone","set","gmtTimeZone","sign","hoursMinutes","slice","hours","minutes","join","split","Number"],"sourceRoot":""}