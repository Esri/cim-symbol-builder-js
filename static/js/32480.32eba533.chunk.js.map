{"version":3,"file":"static/js/32480.32eba533.chunk.js","mappings":"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","sources":["../node_modules/@esri/calcite-components/dist/esm/focusTrapComponent-c627d9d8.js","../node_modules/@esri/calcite-components/dist/esm/loadable-46e63135.js"],"sourcesContent":["/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.\n * v1.9.2\n */\nimport { m as tabbable, n as focusable, o as isTabbable, p as getTabIndex, r as isFocusable, d as focusElement, u as tabbableOptions } from './dom-158133b6.js';\n\n/*!\n* focus-trap 7.5.2\n* @license MIT, https://github.com/focus-trap/focus-trap/blob/master/LICENSE\n*/\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return typeof key === \"symbol\" ? key : String(key);\n}\n\nvar activeFocusTraps = {\n  activateTrap: function activateTrap(trapStack, trap) {\n    if (trapStack.length > 0) {\n      var activeTrap = trapStack[trapStack.length - 1];\n      if (activeTrap !== trap) {\n        activeTrap.pause();\n      }\n    }\n    var trapIndex = trapStack.indexOf(trap);\n    if (trapIndex === -1) {\n      trapStack.push(trap);\n    } else {\n      // move this existing trap to the front of the queue\n      trapStack.splice(trapIndex, 1);\n      trapStack.push(trap);\n    }\n  },\n  deactivateTrap: function deactivateTrap(trapStack, trap) {\n    var trapIndex = trapStack.indexOf(trap);\n    if (trapIndex !== -1) {\n      trapStack.splice(trapIndex, 1);\n    }\n    if (trapStack.length > 0) {\n      trapStack[trapStack.length - 1].unpause();\n    }\n  }\n};\nvar isSelectableInput = function isSelectableInput(node) {\n  return node.tagName && node.tagName.toLowerCase() === 'input' && typeof node.select === 'function';\n};\nvar isEscapeEvent = function isEscapeEvent(e) {\n  return (e === null || e === void 0 ? void 0 : e.key) === 'Escape' || (e === null || e === void 0 ? void 0 : e.key) === 'Esc' || (e === null || e === void 0 ? void 0 : e.keyCode) === 27;\n};\nvar isTabEvent = function isTabEvent(e) {\n  return (e === null || e === void 0 ? void 0 : e.key) === 'Tab' || (e === null || e === void 0 ? void 0 : e.keyCode) === 9;\n};\n\n// checks for TAB by default\nvar isKeyForward = function isKeyForward(e) {\n  return isTabEvent(e) && !e.shiftKey;\n};\n\n// checks for SHIFT+TAB by default\nvar isKeyBackward = function isKeyBackward(e) {\n  return isTabEvent(e) && e.shiftKey;\n};\nvar delay = function delay(fn) {\n  return setTimeout(fn, 0);\n};\n\n// Array.find/findIndex() are not supported on IE; this replicates enough\n//  of Array.findIndex() for our needs\nvar findIndex = function findIndex(arr, fn) {\n  var idx = -1;\n  arr.every(function (value, i) {\n    if (fn(value)) {\n      idx = i;\n      return false; // break\n    }\n\n    return true; // next\n  });\n\n  return idx;\n};\n\n/**\n * Get an option's value when it could be a plain value, or a handler that provides\n *  the value.\n * @param {*} value Option's value to check.\n * @param {...*} [params] Any parameters to pass to the handler, if `value` is a function.\n * @returns {*} The `value`, or the handler's returned value.\n */\nvar valueOrHandler = function valueOrHandler(value) {\n  for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    params[_key - 1] = arguments[_key];\n  }\n  return typeof value === 'function' ? value.apply(void 0, params) : value;\n};\nvar getActualTarget = function getActualTarget(event) {\n  // NOTE: If the trap is _inside_ a shadow DOM, event.target will always be the\n  //  shadow host. However, event.target.composedPath() will be an array of\n  //  nodes \"clicked\" from inner-most (the actual element inside the shadow) to\n  //  outer-most (the host HTML document). If we have access to composedPath(),\n  //  then use its first element; otherwise, fall back to event.target (and\n  //  this only works for an _open_ shadow DOM; otherwise,\n  //  composedPath()[0] === event.target always).\n  return event.target.shadowRoot && typeof event.composedPath === 'function' ? event.composedPath()[0] : event.target;\n};\n\n// NOTE: this must be _outside_ `createFocusTrap()` to make sure all traps in this\n//  current instance use the same stack if `userOptions.trapStack` isn't specified\nvar internalTrapStack = [];\nvar createFocusTrap = function createFocusTrap(elements, userOptions) {\n  // SSR: a live trap shouldn't be created in this type of environment so this\n  //  should be safe code to execute if the `document` option isn't specified\n  var doc = (userOptions === null || userOptions === void 0 ? void 0 : userOptions.document) || document;\n  var trapStack = (userOptions === null || userOptions === void 0 ? void 0 : userOptions.trapStack) || internalTrapStack;\n  var config = _objectSpread2({\n    returnFocusOnDeactivate: true,\n    escapeDeactivates: true,\n    delayInitialFocus: true,\n    isKeyForward: isKeyForward,\n    isKeyBackward: isKeyBackward\n  }, userOptions);\n  var state = {\n    // containers given to createFocusTrap()\n    // @type {Array<HTMLElement>}\n    containers: [],\n    // list of objects identifying tabbable nodes in `containers` in the trap\n    // NOTE: it's possible that a group has no tabbable nodes if nodes get removed while the trap\n    //  is active, but the trap should never get to a state where there isn't at least one group\n    //  with at least one tabbable node in it (that would lead to an error condition that would\n    //  result in an error being thrown)\n    // @type {Array<{\n    //   container: HTMLElement,\n    //   tabbableNodes: Array<HTMLElement>, // empty if none\n    //   focusableNodes: Array<HTMLElement>, // empty if none\n    //   posTabIndexesFound: boolean,\n    //   firstTabbableNode: HTMLElement|undefined,\n    //   lastTabbableNode: HTMLElement|undefined,\n    //   firstDomTabbableNode: HTMLElement|undefined,\n    //   lastDomTabbableNode: HTMLElement|undefined,\n    //   nextTabbableNode: (node: HTMLElement, forward: boolean) => HTMLElement|undefined\n    // }>}\n    containerGroups: [],\n    // same order/length as `containers` list\n\n    // references to objects in `containerGroups`, but only those that actually have\n    //  tabbable nodes in them\n    // NOTE: same order as `containers` and `containerGroups`, but __not necessarily__\n    //  the same length\n    tabbableGroups: [],\n    nodeFocusedBeforeActivation: null,\n    mostRecentlyFocusedNode: null,\n    active: false,\n    paused: false,\n    // timer ID for when delayInitialFocus is true and initial focus in this trap\n    //  has been delayed during activation\n    delayInitialFocusTimer: undefined,\n    // the most recent KeyboardEvent for the configured nav key (typically [SHIFT+]TAB), if any\n    recentNavEvent: undefined\n  };\n  var trap; // eslint-disable-line prefer-const -- some private functions reference it, and its methods reference private functions, so we must declare here and define later\n\n  /**\n   * Gets a configuration option value.\n   * @param {Object|undefined} configOverrideOptions If true, and option is defined in this set,\n   *  value will be taken from this object. Otherwise, value will be taken from base configuration.\n   * @param {string} optionName Name of the option whose value is sought.\n   * @param {string|undefined} [configOptionName] Name of option to use __instead of__ `optionName`\n   *  IIF `configOverrideOptions` is not defined. Otherwise, `optionName` is used.\n   */\n  var getOption = function getOption(configOverrideOptions, optionName, configOptionName) {\n    return configOverrideOptions && configOverrideOptions[optionName] !== undefined ? configOverrideOptions[optionName] : config[configOptionName || optionName];\n  };\n\n  /**\n   * Finds the index of the container that contains the element.\n   * @param {HTMLElement} element\n   * @param {Event} [event] If available, and `element` isn't directly found in any container,\n   *  the event's composed path is used to see if includes any known trap containers in the\n   *  case where the element is inside a Shadow DOM.\n   * @returns {number} Index of the container in either `state.containers` or\n   *  `state.containerGroups` (the order/length of these lists are the same); -1\n   *  if the element isn't found.\n   */\n  var findContainerIndex = function findContainerIndex(element, event) {\n    var composedPath = typeof (event === null || event === void 0 ? void 0 : event.composedPath) === 'function' ? event.composedPath() : undefined;\n    // NOTE: search `containerGroups` because it's possible a group contains no tabbable\n    //  nodes, but still contains focusable nodes (e.g. if they all have `tabindex=-1`)\n    //  and we still need to find the element in there\n    return state.containerGroups.findIndex(function (_ref) {\n      var container = _ref.container,\n        tabbableNodes = _ref.tabbableNodes;\n      return container.contains(element) || ( // fall back to explicit tabbable search which will take into consideration any\n      //  web components if the `tabbableOptions.getShadowRoot` option was used for\n      //  the trap, enabling shadow DOM support in tabbable (`Node.contains()` doesn't\n      //  look inside web components even if open)\n      composedPath === null || composedPath === void 0 ? void 0 : composedPath.includes(container)) || tabbableNodes.find(function (node) {\n        return node === element;\n      });\n    });\n  };\n\n  /**\n   * Gets the node for the given option, which is expected to be an option that\n   *  can be either a DOM node, a string that is a selector to get a node, `false`\n   *  (if a node is explicitly NOT given), or a function that returns any of these\n   *  values.\n   * @param {string} optionName\n   * @returns {undefined | false | HTMLElement | SVGElement} Returns\n   *  `undefined` if the option is not specified; `false` if the option\n   *  resolved to `false` (node explicitly not given); otherwise, the resolved\n   *  DOM node.\n   * @throws {Error} If the option is set, not `false`, and is not, or does not\n   *  resolve to a node.\n   */\n  var getNodeForOption = function getNodeForOption(optionName) {\n    var optionValue = config[optionName];\n    if (typeof optionValue === 'function') {\n      for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        params[_key2 - 1] = arguments[_key2];\n      }\n      optionValue = optionValue.apply(void 0, params);\n    }\n    if (optionValue === true) {\n      optionValue = undefined; // use default value\n    }\n\n    if (!optionValue) {\n      if (optionValue === undefined || optionValue === false) {\n        return optionValue;\n      }\n      // else, empty string (invalid), null (invalid), 0 (invalid)\n\n      throw new Error(\"`\".concat(optionName, \"` was specified but was not a node, or did not return a node\"));\n    }\n    var node = optionValue; // could be HTMLElement, SVGElement, or non-empty string at this point\n\n    if (typeof optionValue === 'string') {\n      node = doc.querySelector(optionValue); // resolve to node, or null if fails\n      if (!node) {\n        throw new Error(\"`\".concat(optionName, \"` as selector refers to no known node\"));\n      }\n    }\n    return node;\n  };\n  var getInitialFocusNode = function getInitialFocusNode() {\n    var node = getNodeForOption('initialFocus');\n\n    // false explicitly indicates we want no initialFocus at all\n    if (node === false) {\n      return false;\n    }\n    if (node === undefined || !isFocusable(node, config.tabbableOptions)) {\n      // option not specified nor focusable: use fallback options\n      if (findContainerIndex(doc.activeElement) >= 0) {\n        node = doc.activeElement;\n      } else {\n        var firstTabbableGroup = state.tabbableGroups[0];\n        var firstTabbableNode = firstTabbableGroup && firstTabbableGroup.firstTabbableNode;\n\n        // NOTE: `fallbackFocus` option function cannot return `false` (not supported)\n        node = firstTabbableNode || getNodeForOption('fallbackFocus');\n      }\n    }\n    if (!node) {\n      throw new Error('Your focus-trap needs to have at least one focusable element');\n    }\n    return node;\n  };\n  var updateTabbableNodes = function updateTabbableNodes() {\n    state.containerGroups = state.containers.map(function (container) {\n      var tabbableNodes = tabbable(container, config.tabbableOptions);\n\n      // NOTE: if we have tabbable nodes, we must have focusable nodes; focusable nodes\n      //  are a superset of tabbable nodes since nodes with negative `tabindex` attributes\n      //  are focusable but not tabbable\n      var focusableNodes = focusable(container, config.tabbableOptions);\n      var firstTabbableNode = tabbableNodes.length > 0 ? tabbableNodes[0] : undefined;\n      var lastTabbableNode = tabbableNodes.length > 0 ? tabbableNodes[tabbableNodes.length - 1] : undefined;\n      var firstDomTabbableNode = focusableNodes.find(function (node) {\n        return isTabbable(node);\n      });\n      var lastDomTabbableNode = focusableNodes.slice().reverse().find(function (node) {\n        return isTabbable(node);\n      });\n      var posTabIndexesFound = !!tabbableNodes.find(function (node) {\n        return getTabIndex(node) > 0;\n      });\n      return {\n        container: container,\n        tabbableNodes: tabbableNodes,\n        focusableNodes: focusableNodes,\n        /** True if at least one node with positive `tabindex` was found in this container. */\n        posTabIndexesFound: posTabIndexesFound,\n        /** First tabbable node in container, __tabindex__ order; `undefined` if none. */\n        firstTabbableNode: firstTabbableNode,\n        /** Last tabbable node in container, __tabindex__ order; `undefined` if none. */\n        lastTabbableNode: lastTabbableNode,\n        // NOTE: DOM order is NOT NECESSARILY \"document position\" order, but figuring that out\n        //  would require more than just https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n        //  because that API doesn't work with Shadow DOM as well as it should (@see\n        //  https://github.com/whatwg/dom/issues/320) and since this first/last is only needed, so far,\n        //  to address an edge case related to positive tabindex support, this seems like a much easier,\n        //  \"close enough most of the time\" alternative for positive tabindexes which should generally\n        //  be avoided anyway...\n        /** First tabbable node in container, __DOM__ order; `undefined` if none. */\n        firstDomTabbableNode: firstDomTabbableNode,\n        /** Last tabbable node in container, __DOM__ order; `undefined` if none. */\n        lastDomTabbableNode: lastDomTabbableNode,\n        /**\n         * Finds the __tabbable__ node that follows the given node in the specified direction,\n         *  in this container, if any.\n         * @param {HTMLElement} node\n         * @param {boolean} [forward] True if going in forward tab order; false if going\n         *  in reverse.\n         * @returns {HTMLElement|undefined} The next tabbable node, if any.\n         */\n        nextTabbableNode: function nextTabbableNode(node) {\n          var forward = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n          var nodeIdx = tabbableNodes.indexOf(node);\n          if (nodeIdx < 0) {\n            // either not tabbable nor focusable, or was focused but not tabbable (negative tabindex):\n            //  since `node` should at least have been focusable, we assume that's the case and mimic\n            //  what browsers do, which is set focus to the next node in __document position order__,\n            //  regardless of positive tabindexes, if any -- and for reasons explained in the NOTE\n            //  above related to `firstDomTabbable` and `lastDomTabbable` properties, we fall back to\n            //  basic DOM order\n            if (forward) {\n              return focusableNodes.slice(focusableNodes.indexOf(node) + 1).find(function (el) {\n                return isTabbable(el);\n              });\n            }\n            return focusableNodes.slice(0, focusableNodes.indexOf(node)).reverse().find(function (el) {\n              return isTabbable(el);\n            });\n          }\n          return tabbableNodes[nodeIdx + (forward ? 1 : -1)];\n        }\n      };\n    });\n    state.tabbableGroups = state.containerGroups.filter(function (group) {\n      return group.tabbableNodes.length > 0;\n    });\n\n    // throw if no groups have tabbable nodes and we don't have a fallback focus node either\n    if (state.tabbableGroups.length <= 0 && !getNodeForOption('fallbackFocus') // returning false not supported for this option\n    ) {\n      throw new Error('Your focus-trap must have at least one container with at least one tabbable node in it at all times');\n    }\n\n    // NOTE: Positive tabindexes are only properly supported in single-container traps because\n    //  doing it across multiple containers where tabindexes could be all over the place\n    //  would require Tabbable to support multiple containers, would require additional\n    //  specialized Shadow DOM support, and would require Tabbable's multi-container support\n    //  to look at those containers in document position order rather than user-provided\n    //  order (as they are treated in Focus-trap, for legacy reasons). See discussion on\n    //  https://github.com/focus-trap/focus-trap/issues/375 for more details.\n    if (state.containerGroups.find(function (g) {\n      return g.posTabIndexesFound;\n    }) && state.containerGroups.length > 1) {\n      throw new Error(\"At least one node with a positive tabindex was found in one of your focus-trap's multiple containers. Positive tabindexes are only supported in single-container focus-traps.\");\n    }\n  };\n  var tryFocus = function tryFocus(node) {\n    if (node === false) {\n      return;\n    }\n    if (node === doc.activeElement) {\n      return;\n    }\n    if (!node || !node.focus) {\n      tryFocus(getInitialFocusNode());\n      return;\n    }\n    node.focus({\n      preventScroll: !!config.preventScroll\n    });\n    // NOTE: focus() API does not trigger focusIn event so set MRU node manually\n    state.mostRecentlyFocusedNode = node;\n    if (isSelectableInput(node)) {\n      node.select();\n    }\n  };\n  var getReturnFocusNode = function getReturnFocusNode(previousActiveElement) {\n    var node = getNodeForOption('setReturnFocus', previousActiveElement);\n    return node ? node : node === false ? false : previousActiveElement;\n  };\n\n  /**\n   * Finds the next node (in either direction) where focus should move according to a\n   *  keyboard focus-in event.\n   * @param {Object} params\n   * @param {Node} [params.target] Known target __from which__ to navigate, if any.\n   * @param {KeyboardEvent|FocusEvent} [params.event] Event to use if `target` isn't known (event\n   *  will be used to determine the `target`). Ignored if `target` is specified.\n   * @param {boolean} [params.isBackward] True if focus should move backward.\n   * @returns {Node|undefined} The next node, or `undefined` if a next node couldn't be\n   *  determined given the current state of the trap.\n   */\n  var findNextNavNode = function findNextNavNode(_ref2) {\n    var target = _ref2.target,\n      event = _ref2.event,\n      _ref2$isBackward = _ref2.isBackward,\n      isBackward = _ref2$isBackward === void 0 ? false : _ref2$isBackward;\n    target = target || getActualTarget(event);\n    updateTabbableNodes();\n    var destinationNode = null;\n    if (state.tabbableGroups.length > 0) {\n      // make sure the target is actually contained in a group\n      // NOTE: the target may also be the container itself if it's focusable\n      //  with tabIndex='-1' and was given initial focus\n      var containerIndex = findContainerIndex(target, event);\n      var containerGroup = containerIndex >= 0 ? state.containerGroups[containerIndex] : undefined;\n      if (containerIndex < 0) {\n        // target not found in any group: quite possible focus has escaped the trap,\n        //  so bring it back into...\n        if (isBackward) {\n          // ...the last node in the last group\n          destinationNode = state.tabbableGroups[state.tabbableGroups.length - 1].lastTabbableNode;\n        } else {\n          // ...the first node in the first group\n          destinationNode = state.tabbableGroups[0].firstTabbableNode;\n        }\n      } else if (isBackward) {\n        // REVERSE\n\n        // is the target the first tabbable node in a group?\n        var startOfGroupIndex = findIndex(state.tabbableGroups, function (_ref3) {\n          var firstTabbableNode = _ref3.firstTabbableNode;\n          return target === firstTabbableNode;\n        });\n        if (startOfGroupIndex < 0 && (containerGroup.container === target || isFocusable(target, config.tabbableOptions) && !isTabbable(target, config.tabbableOptions) && !containerGroup.nextTabbableNode(target, false))) {\n          // an exception case where the target is either the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle shift+tab as if focus were on the container's\n          //  first tabbable node, and go to the last tabbable node of the LAST group\n          startOfGroupIndex = containerIndex;\n        }\n        if (startOfGroupIndex >= 0) {\n          // YES: then shift+tab should go to the last tabbable node in the\n          //  previous group (and wrap around to the last tabbable node of\n          //  the LAST group if it's the first tabbable node of the FIRST group)\n          var destinationGroupIndex = startOfGroupIndex === 0 ? state.tabbableGroups.length - 1 : startOfGroupIndex - 1;\n          var destinationGroup = state.tabbableGroups[destinationGroupIndex];\n          destinationNode = getTabIndex(target) >= 0 ? destinationGroup.lastTabbableNode : destinationGroup.lastDomTabbableNode;\n        } else if (!isTabEvent(event)) {\n          // user must have customized the nav keys so we have to move focus manually _within_\n          //  the active group: do this based on the order determined by tabbable()\n          destinationNode = containerGroup.nextTabbableNode(target, false);\n        }\n      } else {\n        // FORWARD\n\n        // is the target the last tabbable node in a group?\n        var lastOfGroupIndex = findIndex(state.tabbableGroups, function (_ref4) {\n          var lastTabbableNode = _ref4.lastTabbableNode;\n          return target === lastTabbableNode;\n        });\n        if (lastOfGroupIndex < 0 && (containerGroup.container === target || isFocusable(target, config.tabbableOptions) && !isTabbable(target, config.tabbableOptions) && !containerGroup.nextTabbableNode(target))) {\n          // an exception case where the target is the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle tab as if focus were on the container's\n          //  last tabbable node, and go to the first tabbable node of the FIRST group\n          lastOfGroupIndex = containerIndex;\n        }\n        if (lastOfGroupIndex >= 0) {\n          // YES: then tab should go to the first tabbable node in the next\n          //  group (and wrap around to the first tabbable node of the FIRST\n          //  group if it's the last tabbable node of the LAST group)\n          var _destinationGroupIndex = lastOfGroupIndex === state.tabbableGroups.length - 1 ? 0 : lastOfGroupIndex + 1;\n          var _destinationGroup = state.tabbableGroups[_destinationGroupIndex];\n          destinationNode = getTabIndex(target) >= 0 ? _destinationGroup.firstTabbableNode : _destinationGroup.firstDomTabbableNode;\n        } else if (!isTabEvent(event)) {\n          // user must have customized the nav keys so we have to move focus manually _within_\n          //  the active group: do this based on the order determined by tabbable()\n          destinationNode = containerGroup.nextTabbableNode(target);\n        }\n      }\n    } else {\n      // no groups available\n      // NOTE: the fallbackFocus option does not support returning false to opt-out\n      destinationNode = getNodeForOption('fallbackFocus');\n    }\n    return destinationNode;\n  };\n\n  // This needs to be done on mousedown and touchstart instead of click\n  // so that it precedes the focus event.\n  var checkPointerDown = function checkPointerDown(e) {\n    var target = getActualTarget(e);\n    if (findContainerIndex(target, e) >= 0) {\n      // allow the click since it ocurred inside the trap\n      return;\n    }\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      // immediately deactivate the trap\n      trap.deactivate({\n        // NOTE: by setting `returnFocus: false`, deactivate() will do nothing,\n        //  which will result in the outside click setting focus to the node\n        //  that was clicked (and if not focusable, to \"nothing\"); by setting\n        //  `returnFocus: true`, we'll attempt to re-focus the node originally-focused\n        //  on activation (or the configured `setReturnFocus` node), whether the\n        //  outside click was on a focusable node or not\n        returnFocus: config.returnFocusOnDeactivate\n      });\n      return;\n    }\n\n    // This is needed for mobile devices.\n    // (If we'll only let `click` events through,\n    // then on mobile they will be blocked anyways if `touchstart` is blocked.)\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      // allow the click outside the trap to take place\n      return;\n    }\n\n    // otherwise, prevent the click\n    e.preventDefault();\n  };\n\n  // In case focus escapes the trap for some strange reason, pull it back in.\n  // NOTE: the focusIn event is NOT cancelable, so if focus escapes, it may cause unexpected\n  //  scrolling if the node that got focused was out of view; there's nothing we can do to\n  //  prevent that from happening by the time we discover that focus escaped\n  var checkFocusIn = function checkFocusIn(event) {\n    var target = getActualTarget(event);\n    var targetContained = findContainerIndex(target, event) >= 0;\n\n    // In Firefox when you Tab out of an iframe the Document is briefly focused.\n    if (targetContained || target instanceof Document) {\n      if (targetContained) {\n        state.mostRecentlyFocusedNode = target;\n      }\n    } else {\n      // escaped! pull it back in to where it just left\n      event.stopImmediatePropagation();\n\n      // focus will escape if the MRU node had a positive tab index and user tried to nav forward;\n      //  it will also escape if the MRU node had a 0 tab index and user tried to nav backward\n      //  toward a node with a positive tab index\n      var nextNode; // next node to focus, if we find one\n      var navAcrossContainers = true;\n      if (state.mostRecentlyFocusedNode) {\n        if (getTabIndex(state.mostRecentlyFocusedNode) > 0) {\n          // MRU container index must be >=0 otherwise we wouldn't have it as an MRU node...\n          var mruContainerIdx = findContainerIndex(state.mostRecentlyFocusedNode);\n          // there MAY not be any tabbable nodes in the container if there are at least 2 containers\n          //  and the MRU node is focusable but not tabbable (focus-trap requires at least 1 container\n          //  with at least one tabbable node in order to function, so this could be the other container\n          //  with nothing tabbable in it)\n          var tabbableNodes = state.containerGroups[mruContainerIdx].tabbableNodes;\n          if (tabbableNodes.length > 0) {\n            // MRU tab index MAY not be found if the MRU node is focusable but not tabbable\n            var mruTabIdx = tabbableNodes.findIndex(function (node) {\n              return node === state.mostRecentlyFocusedNode;\n            });\n            if (mruTabIdx >= 0) {\n              if (config.isKeyForward(state.recentNavEvent)) {\n                if (mruTabIdx + 1 < tabbableNodes.length) {\n                  nextNode = tabbableNodes[mruTabIdx + 1];\n                  navAcrossContainers = false;\n                }\n                // else, don't wrap within the container as focus should move to next/previous\n                //  container\n              } else {\n                if (mruTabIdx - 1 >= 0) {\n                  nextNode = tabbableNodes[mruTabIdx - 1];\n                  navAcrossContainers = false;\n                }\n                // else, don't wrap within the container as focus should move to next/previous\n                //  container\n              }\n              // else, don't find in container order without considering direction too\n            }\n          }\n          // else, no tabbable nodes in that container (which means we must have at least one other\n          //  container with at least one tabbable node in it, otherwise focus-trap would've thrown\n          //  an error the last time updateTabbableNodes() was run): find next node among all known\n          //  containers\n        } else {\n          // check to see if there's at least one tabbable node with a positive tab index inside\n          //  the trap because focus seems to escape when navigating backward from a tabbable node\n          //  with tabindex=0 when this is the case (instead of wrapping to the tabbable node with\n          //  the greatest positive tab index like it should)\n          if (!state.containerGroups.some(function (g) {\n            return g.tabbableNodes.some(function (n) {\n              return getTabIndex(n) > 0;\n            });\n          })) {\n            // no containers with tabbable nodes with positive tab indexes which means the focus\n            //  escaped for some other reason and we should just execute the fallback to the\n            //  MRU node or initial focus node, if any\n            navAcrossContainers = false;\n          }\n        }\n      } else {\n        // no MRU node means we're likely in some initial condition when the trap has just\n        //  been activated and initial focus hasn't been given yet, in which case we should\n        //  fall through to trying to focus the initial focus node, which is what should\n        //  happen below at this point in the logic\n        navAcrossContainers = false;\n      }\n      if (navAcrossContainers) {\n        nextNode = findNextNavNode({\n          // move FROM the MRU node, not event-related node (which will be the node that is\n          //  outside the trap causing the focus escape we're trying to fix)\n          target: state.mostRecentlyFocusedNode,\n          isBackward: config.isKeyBackward(state.recentNavEvent)\n        });\n      }\n      if (nextNode) {\n        tryFocus(nextNode);\n      } else {\n        tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());\n      }\n    }\n    state.recentNavEvent = undefined; // clear\n  };\n\n  // Hijack key nav events on the first and last focusable nodes of the trap,\n  // in order to prevent focus from escaping. If it escapes for even a\n  // moment it can end up scrolling the page and causing confusion so we\n  // kind of need to capture the action at the keydown phase.\n  var checkKeyNav = function checkKeyNav(event) {\n    var isBackward = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    state.recentNavEvent = event;\n    var destinationNode = findNextNavNode({\n      event: event,\n      isBackward: isBackward\n    });\n    if (destinationNode) {\n      if (isTabEvent(event)) {\n        // since tab natively moves focus, we wouldn't have a destination node unless we\n        //  were on the edge of a container and had to move to the next/previous edge, in\n        //  which case we want to prevent default to keep the browser from moving focus\n        //  to where it normally would\n        event.preventDefault();\n      }\n      tryFocus(destinationNode);\n    }\n    // else, let the browser take care of [shift+]tab and move the focus\n  };\n\n  var checkKey = function checkKey(event) {\n    if (isEscapeEvent(event) && valueOrHandler(config.escapeDeactivates, event) !== false) {\n      event.preventDefault();\n      trap.deactivate();\n      return;\n    }\n    if (config.isKeyForward(event) || config.isKeyBackward(event)) {\n      checkKeyNav(event, config.isKeyBackward(event));\n    }\n  };\n  var checkClick = function checkClick(e) {\n    var target = getActualTarget(e);\n    if (findContainerIndex(target, e) >= 0) {\n      return;\n    }\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      return;\n    }\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      return;\n    }\n    e.preventDefault();\n    e.stopImmediatePropagation();\n  };\n\n  //\n  // EVENT LISTENERS\n  //\n\n  var addListeners = function addListeners() {\n    if (!state.active) {\n      return;\n    }\n\n    // There can be only one listening focus trap at a time\n    activeFocusTraps.activateTrap(trapStack, trap);\n\n    // Delay ensures that the focused element doesn't capture the event\n    // that caused the focus trap activation.\n    state.delayInitialFocusTimer = config.delayInitialFocus ? delay(function () {\n      tryFocus(getInitialFocusNode());\n    }) : tryFocus(getInitialFocusNode());\n    doc.addEventListener('focusin', checkFocusIn, true);\n    doc.addEventListener('mousedown', checkPointerDown, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('touchstart', checkPointerDown, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('click', checkClick, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('keydown', checkKey, {\n      capture: true,\n      passive: false\n    });\n    return trap;\n  };\n  var removeListeners = function removeListeners() {\n    if (!state.active) {\n      return;\n    }\n    doc.removeEventListener('focusin', checkFocusIn, true);\n    doc.removeEventListener('mousedown', checkPointerDown, true);\n    doc.removeEventListener('touchstart', checkPointerDown, true);\n    doc.removeEventListener('click', checkClick, true);\n    doc.removeEventListener('keydown', checkKey, true);\n    return trap;\n  };\n\n  //\n  // MUTATION OBSERVER\n  //\n\n  var checkDomRemoval = function checkDomRemoval(mutations) {\n    var isFocusedNodeRemoved = mutations.some(function (mutation) {\n      var removedNodes = Array.from(mutation.removedNodes);\n      return removedNodes.some(function (node) {\n        return node === state.mostRecentlyFocusedNode;\n      });\n    });\n\n    // If the currently focused is removed then browsers will move focus to the\n    // <body> element. If this happens, try to move focus back into the trap.\n    if (isFocusedNodeRemoved) {\n      tryFocus(getInitialFocusNode());\n    }\n  };\n\n  // Use MutationObserver - if supported - to detect if focused node is removed\n  // from the DOM.\n  var mutationObserver = typeof window !== 'undefined' && 'MutationObserver' in window ? new MutationObserver(checkDomRemoval) : undefined;\n  var updateObservedNodes = function updateObservedNodes() {\n    if (!mutationObserver) {\n      return;\n    }\n    mutationObserver.disconnect();\n    if (state.active && !state.paused) {\n      state.containers.map(function (container) {\n        mutationObserver.observe(container, {\n          subtree: true,\n          childList: true\n        });\n      });\n    }\n  };\n\n  //\n  // TRAP DEFINITION\n  //\n\n  trap = {\n    get active() {\n      return state.active;\n    },\n    get paused() {\n      return state.paused;\n    },\n    activate: function activate(activateOptions) {\n      if (state.active) {\n        return this;\n      }\n      var onActivate = getOption(activateOptions, 'onActivate');\n      var onPostActivate = getOption(activateOptions, 'onPostActivate');\n      var checkCanFocusTrap = getOption(activateOptions, 'checkCanFocusTrap');\n      if (!checkCanFocusTrap) {\n        updateTabbableNodes();\n      }\n      state.active = true;\n      state.paused = false;\n      state.nodeFocusedBeforeActivation = doc.activeElement;\n      onActivate === null || onActivate === void 0 ? void 0 : onActivate();\n      var finishActivation = function finishActivation() {\n        if (checkCanFocusTrap) {\n          updateTabbableNodes();\n        }\n        addListeners();\n        updateObservedNodes();\n        onPostActivate === null || onPostActivate === void 0 ? void 0 : onPostActivate();\n      };\n      if (checkCanFocusTrap) {\n        checkCanFocusTrap(state.containers.concat()).then(finishActivation, finishActivation);\n        return this;\n      }\n      finishActivation();\n      return this;\n    },\n    deactivate: function deactivate(deactivateOptions) {\n      if (!state.active) {\n        return this;\n      }\n      var options = _objectSpread2({\n        onDeactivate: config.onDeactivate,\n        onPostDeactivate: config.onPostDeactivate,\n        checkCanReturnFocus: config.checkCanReturnFocus\n      }, deactivateOptions);\n      clearTimeout(state.delayInitialFocusTimer); // noop if undefined\n      state.delayInitialFocusTimer = undefined;\n      removeListeners();\n      state.active = false;\n      state.paused = false;\n      updateObservedNodes();\n      activeFocusTraps.deactivateTrap(trapStack, trap);\n      var onDeactivate = getOption(options, 'onDeactivate');\n      var onPostDeactivate = getOption(options, 'onPostDeactivate');\n      var checkCanReturnFocus = getOption(options, 'checkCanReturnFocus');\n      var returnFocus = getOption(options, 'returnFocus', 'returnFocusOnDeactivate');\n      onDeactivate === null || onDeactivate === void 0 ? void 0 : onDeactivate();\n      var finishDeactivation = function finishDeactivation() {\n        delay(function () {\n          if (returnFocus) {\n            tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));\n          }\n          onPostDeactivate === null || onPostDeactivate === void 0 ? void 0 : onPostDeactivate();\n        });\n      };\n      if (returnFocus && checkCanReturnFocus) {\n        checkCanReturnFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation)).then(finishDeactivation, finishDeactivation);\n        return this;\n      }\n      finishDeactivation();\n      return this;\n    },\n    pause: function pause(pauseOptions) {\n      if (state.paused || !state.active) {\n        return this;\n      }\n      var onPause = getOption(pauseOptions, 'onPause');\n      var onPostPause = getOption(pauseOptions, 'onPostPause');\n      state.paused = true;\n      onPause === null || onPause === void 0 ? void 0 : onPause();\n      removeListeners();\n      updateObservedNodes();\n      onPostPause === null || onPostPause === void 0 ? void 0 : onPostPause();\n      return this;\n    },\n    unpause: function unpause(unpauseOptions) {\n      if (!state.paused || !state.active) {\n        return this;\n      }\n      var onUnpause = getOption(unpauseOptions, 'onUnpause');\n      var onPostUnpause = getOption(unpauseOptions, 'onPostUnpause');\n      state.paused = false;\n      onUnpause === null || onUnpause === void 0 ? void 0 : onUnpause();\n      updateTabbableNodes();\n      addListeners();\n      updateObservedNodes();\n      onPostUnpause === null || onPostUnpause === void 0 ? void 0 : onPostUnpause();\n      return this;\n    },\n    updateContainerElements: function updateContainerElements(containerElements) {\n      var elementsAsArray = [].concat(containerElements).filter(Boolean);\n      state.containers = elementsAsArray.map(function (element) {\n        return typeof element === 'string' ? doc.querySelector(element) : element;\n      });\n      if (state.active) {\n        updateTabbableNodes();\n      }\n      updateObservedNodes();\n      return this;\n    }\n  };\n\n  // initialize container elements\n  trap.updateContainerElements(elements);\n  return trap;\n};\n\n/**\n * This module allows custom configuration for components.\n */\nconst customConfig = globalThis[\"calciteConfig\"];\nconst focusTrapStack = customConfig?.focusTrapStack || [];\n\n/**\n * Helper to set up the FocusTrap component.\n *\n * @param {FocusTrapComponent} component The FocusTrap component.\n * @param options\n */\nfunction connectFocusTrap(component, options) {\n  const { el } = component;\n  const focusTrapNode = options?.focusTrapEl || el;\n  if (!focusTrapNode) {\n    return;\n  }\n  const focusTrapOptions = {\n    clickOutsideDeactivates: true,\n    escapeDeactivates: false,\n    fallbackFocus: focusTrapNode,\n    setReturnFocus: (el) => {\n      focusElement(el);\n      return false;\n    },\n    ...options?.focusTrapOptions,\n    // the following options are not overridable\n    document: el.ownerDocument,\n    tabbableOptions,\n    trapStack: focusTrapStack,\n  };\n  component.focusTrap = createFocusTrap(focusTrapNode, focusTrapOptions);\n}\n/**\n * Helper to activate the FocusTrap component.\n *\n * @param {FocusTrapComponent} component The FocusTrap component.\n * @param [options] The FocusTrap activate options.\n */\nfunction activateFocusTrap(component, options) {\n  if (!component.focusTrapDisabled) {\n    component.focusTrap?.activate(options);\n  }\n}\n/**\n * Helper to deactivate the FocusTrap component.\n *\n * @param {FocusTrapComponent} component The FocusTrap component.\n * @param [options] The FocusTrap deactivate options.\n */\nfunction deactivateFocusTrap(component, options) {\n  component.focusTrap?.deactivate(options);\n}\n/**\n * Helper to update the element(s) that are used within the FocusTrap component.\n *\n * @param {FocusTrapComponent} component The FocusTrap component.\n * @example\n * const modal = document.querySelector(\"calcite-modal\");\n * const input = document.createElement(\"calcite-input\");\n * content.appendChild(input);\n * await input.componentOnReady();\n * await modal.updateFocusTrapElements();\n * requestAnimationFrame(() => input.setFocus());\n */\nfunction updateFocusTrapElements(component) {\n  component.focusTrap?.updateContainerElements(component.el);\n}\n\nexport { activateFocusTrap as a, connectFocusTrap as c, deactivateFocusTrap as d, updateFocusTrapElements as u };\n","/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.\n * v1.9.2\n */\nimport { f as forceUpdate } from './index-57f4809d.js';\n\nconst resolveMap = new WeakMap();\nconst promiseMap = new WeakMap();\n/**\n * This helper util sets up the component for the ability to know when the component has been loaded.\n *\n * This should be used in the `componentWillLoad` lifecycle hook.\n *\n * ```\n * componentWillLoad(): void {\n *   setUpLoadableComponent(this);\n * }\n * ```\n *\n * @param component\n */\nfunction setUpLoadableComponent(component) {\n  promiseMap.set(component, new Promise((resolve) => resolveMap.set(component, resolve)));\n}\n/**\n * This helper util lets the loadable component know that it is now loaded.\n *\n * This should be used in the `componentDidLoad` lifecycle hook.\n *\n * ```\n * componentDidLoad(): void {\n *   setComponentLoaded(this);\n * }\n * ```\n *\n * @param component\n */\nfunction setComponentLoaded(component) {\n  resolveMap.get(component)();\n}\n/**\n * This helper util can be used to ensure a component has been loaded (The \"componentDidLoad\" Stencil lifecycle method has been called).\n *\n * Requires requires `LoadableComponent` to be implemented.\n *\n * A component developer can await this method before proceeding with any logic that requires a component to be loaded first.\n *\n * ```\n * async myMethod(): Promise<void> {\n *   await componentLoaded(this);\n * }\n * ```\n *\n * @param component\n * @returns Promise<void>\n */\nfunction componentLoaded(component) {\n  return promiseMap.get(component);\n}\n/**\n * This helper util can be used to ensuring the component is loaded and rendered by the browser (The \"componentDidLoad\" Stencil lifecycle method has been called and any internal elements are focusable).\n *\n * Requires requires `LoadableComponent` to be implemented.\n *\n * A component developer can await this method before proceeding with any logic that requires a component to be loaded first and then an internal element be focused.\n *\n * ```\n * async setFocus(): Promise<void> {\n *   await componentFocusable(this);\n *   this.internalElement?.focus();\n * }\n * ```\n *\n * @param component\n * @returns Promise<void>\n */\nasync function componentFocusable(component) {\n  await componentLoaded(component);\n  forceUpdate(component);\n  return new Promise((resolve) => requestAnimationFrame(() => resolve()));\n}\n\nexport { setComponentLoaded as a, componentLoaded as b, componentFocusable as c, setUpLoadableComponent as s };\n"],"names":["ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","arg","input","hint","prim","Symbol","toPrimitive","undefined","res","call","TypeError","String","Number","_toPrimitive","_toPropertyKey","configurable","writable","activeFocusTraps","trapStack","trap","activeTrap","pause","trapIndex","indexOf","splice","unpause","isTabEvent","e","keyCode","isKeyForward","shiftKey","isKeyBackward","delay","fn","setTimeout","findIndex","arr","idx","every","valueOrHandler","_len","params","Array","_key","getActualTarget","event","shadowRoot","composedPath","internalTrapStack","createFocusTrap","elements","userOptions","doc","document","config","returnFocusOnDeactivate","escapeDeactivates","delayInitialFocus","state","containers","containerGroups","tabbableGroups","nodeFocusedBeforeActivation","mostRecentlyFocusedNode","active","paused","delayInitialFocusTimer","recentNavEvent","getOption","configOverrideOptions","optionName","configOptionName","findContainerIndex","element","_ref","container","tabbableNodes","contains","includes","find","node","getNodeForOption","optionValue","_len2","_key2","Error","concat","querySelector","getInitialFocusNode","isFocusable","tabbableOptions","activeElement","firstTabbableGroup","firstTabbableNode","updateTabbableNodes","map","tabbable","focusableNodes","focusable","lastTabbableNode","firstDomTabbableNode","isTabbable","lastDomTabbableNode","slice","reverse","posTabIndexesFound","getTabIndex","nextTabbableNode","forward","nodeIdx","el","group","g","tryFocus","focus","preventScroll","tagName","toLowerCase","select","isSelectableInput","getReturnFocusNode","previousActiveElement","findNextNavNode","_ref2","_ref2$isBackward","isBackward","destinationNode","containerIndex","containerGroup","startOfGroupIndex","_ref3","destinationGroupIndex","destinationGroup","lastOfGroupIndex","_ref4","_destinationGroupIndex","_destinationGroup","checkPointerDown","clickOutsideDeactivates","deactivate","returnFocus","allowOutsideClick","preventDefault","checkFocusIn","targetContained","Document","nextNode","stopImmediatePropagation","navAcrossContainers","mruContainerIdx","mruTabIdx","some","n","checkKey","checkKeyNav","checkClick","addListeners","addEventListener","capture","passive","removeListeners","removeEventListener","mutationObserver","window","MutationObserver","mutations","mutation","from","removedNodes","updateObservedNodes","disconnect","observe","subtree","childList","activate","activateOptions","this","onActivate","onPostActivate","checkCanFocusTrap","finishActivation","then","deactivateOptions","options","onDeactivate","onPostDeactivate","checkCanReturnFocus","clearTimeout","finishDeactivation","pauseOptions","onPause","onPostPause","unpauseOptions","onUnpause","onPostUnpause","updateContainerElements","containerElements","elementsAsArray","Boolean","focusTrapStack","globalThis","connectFocusTrap","component","focusTrapNode","focusTrapEl","focusTrapOptions","fallbackFocus","setReturnFocus","focusElement","ownerDocument","focusTrap","activateFocusTrap","focusTrapDisabled","deactivateFocusTrap","updateFocusTrapElements","resolveMap","WeakMap","promiseMap","setUpLoadableComponent","set","Promise","resolve","setComponentLoaded","get","componentLoaded","async","componentFocusable","forceUpdate","requestAnimationFrame"],"sourceRoot":""}