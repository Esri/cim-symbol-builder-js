{"version":3,"file":"static/js/2061.91b41b45.chunk.js","mappings":"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","sources":["../node_modules/@esri/calcite-components/dist/esm/src/components/sortable-list/resources.ts","../node_modules/@esri/calcite-components/dist/esm/src/components/sortable-list/sortable-list.tsx","../node_modules/@esri/calcite-components/dist/esm/src/components/sortable-list/sortable-list.scss?tag=calcite-sortable-list&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/esm/src/utils/observers.ts"],"sourcesContent":["export const CSS = {\n  sortItem: \"sort-item\",\n  container: \"container\",\n  containerHorizontal: \"container--horizontal\",\n  containerVertical: \"container--vertical\",\n};\n","import { Component, Element, Event, EventEmitter, h, Listen, Prop, VNode } from \"@stencil/core\";\nimport Sortable from \"sortablejs\";\nimport {\n  InteractiveComponent,\n  InteractiveContainer,\n  updateHostInteraction,\n} from \"../../utils/interactive\";\nimport { createObserver } from \"../../utils/observers\";\nimport { HandleNudge } from \"../handle/interfaces\";\nimport { Layout } from \"../interfaces\";\nimport {\n  DragDetail,\n  connectSortableComponent,\n  disconnectSortableComponent,\n  SortableComponent,\n} from \"../../utils/sortableComponent\";\nimport { focusElement } from \"../../utils/dom\";\nimport { CSS } from \"./resources\";\n\n/**\n * @slot - A slot for adding sortable items.\n */\n@Component({\n  tag: \"calcite-sortable-list\",\n  styleUrl: \"sortable-list.scss\",\n  shadow: true,\n})\nexport class SortableList implements InteractiveComponent, SortableComponent {\n  // --------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * When provided, the method will be called to determine whether the element can  move from the list.\n   */\n  @Prop() canPull: (detail: DragDetail) => boolean;\n\n  /**\n   * When provided, the method will be called to determine whether the element can be added from another list.\n   */\n  @Prop() canPut: (detail: DragDetail) => boolean;\n\n  /**\n   * Specifies which items inside the element should be draggable.\n   */\n  @Prop({ reflect: true }) dragSelector?: string;\n\n  /**\n   * The list's group identifier.\n   *\n   * To drag elements from one list into another, both lists must have the same group value.\n   */\n  @Prop({ reflect: true }) group?: string;\n\n  /**\n   * The selector for the handle elements.\n   */\n  @Prop({ reflect: true }) handleSelector = \"calcite-handle\";\n\n  /**\n   * Indicates the horizontal or vertical orientation of the component.\n   */\n  @Prop({ reflect: true }) layout: Extract<\"horizontal\" | \"vertical\" | \"grid\", Layout> = \"vertical\";\n\n  /**\n   * When true, disabled prevents interaction. This state shows items with lower opacity/grayed.\n   */\n  @Prop({ reflect: true }) disabled = false;\n\n  /**\n   * When true, content is waiting to be loaded. This state shows a busy indicator.\n   */\n  @Prop({ reflect: true }) loading = false;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteSortableListElement;\n\n  items: Element[] = [];\n\n  mutationObserver = createObserver(\"mutation\", () => {\n    this.setUpSorting();\n  });\n\n  sortable: Sortable;\n\n  dragEnabled = true;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  // --------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    this.setUpSorting();\n    this.beginObserving();\n  }\n\n  disconnectedCallback(): void {\n    disconnectSortableComponent(this);\n    this.endObserving();\n  }\n\n  componentDidRender(): void {\n    updateHostInteraction(this);\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * Emitted when the order of the list has changed.\n   */\n  @Event({ cancelable: false }) calciteListOrderChange: EventEmitter<void>;\n\n  @Listen(\"calciteHandleNudge\")\n  calciteHandleNudgeNextHandler(event: CustomEvent<HandleNudge>): void {\n    this.handleNudgeEvent(event);\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  // --------------------------------------------------------------------------\n\n  onGlobalDragStart(): void {\n    this.endObserving();\n  }\n\n  onGlobalDragEnd(): void {\n    this.beginObserving();\n  }\n\n  onDragEnd(): void {}\n\n  onDragStart(): void {}\n\n  onDragSort(): void {\n    this.items = Array.from(this.el.children);\n    this.calciteListOrderChange.emit();\n  }\n\n  handleNudgeEvent(event: CustomEvent<HandleNudge>): void {\n    const { direction } = event.detail;\n\n    const handle = event\n      .composedPath()\n      .find((el: HTMLElement) => el.matches(this.handleSelector)) as HTMLElement;\n\n    const sortItem = this.items.find((item) => {\n      return item.contains(handle) || event.composedPath().includes(item);\n    });\n\n    const lastIndex = this.items.length - 1;\n    const startingIndex = this.items.indexOf(sortItem);\n    let appendInstead = false;\n    let buddyIndex: number;\n\n    if (direction === \"up\") {\n      if (startingIndex === 0) {\n        appendInstead = true;\n      } else {\n        buddyIndex = startingIndex - 1;\n      }\n    } else {\n      if (startingIndex === lastIndex) {\n        buddyIndex = 0;\n      } else if (startingIndex === lastIndex - 1) {\n        appendInstead = true;\n      } else {\n        buddyIndex = startingIndex + 2;\n      }\n    }\n\n    this.endObserving();\n\n    if (appendInstead) {\n      sortItem.parentElement.appendChild(sortItem);\n    } else {\n      sortItem.parentElement.insertBefore(sortItem, this.items[buddyIndex]);\n    }\n\n    this.items = Array.from(this.el.children);\n\n    this.beginObserving();\n    requestAnimationFrame(() => focusElement(handle));\n\n    if (\"selected\" in handle) {\n      handle.selected = true;\n    }\n  }\n\n  setUpSorting(): void {\n    this.items = Array.from(this.el.children);\n    connectSortableComponent(this);\n  }\n\n  beginObserving(): void {\n    this.mutationObserver?.observe(this.el, { childList: true, subtree: true });\n  }\n\n  endObserving(): void {\n    this.mutationObserver?.disconnect();\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  // --------------------------------------------------------------------------\n\n  render(): VNode {\n    const { disabled, layout } = this;\n    const horizontal = layout === \"horizontal\" || false;\n\n    return (\n      <InteractiveContainer disabled={disabled}>\n        <div\n          class={{\n            [CSS.container]: true,\n            [CSS.containerVertical]: !horizontal,\n            [CSS.containerHorizontal]: horizontal,\n          }}\n        >\n          <slot />\n        </div>\n      </InteractiveContainer>\n    );\n  }\n}\n",":host {\n  @apply flex;\n}\n\n@include disabled();\n\n.container {\n  @apply flex flex-auto;\n}\n\n.container--vertical {\n  @apply flex-col;\n}\n\n.container--horizontal {\n  @apply flex-row;\n}\n\n@include base-component();\n","import { isBrowser } from \"./browser\";\n\nexport interface ExtendedMutationObserver extends MutationObserver {\n  new: () => ExtendedMutationObserver;\n  unobserve: (target: Node) => void;\n}\n\ndeclare const ExtendedMutationObserver: {\n  prototype: ExtendedMutationObserver;\n  new (callback: MutationCallback): ExtendedMutationObserver;\n};\n\ntype ObserverType = \"mutation\" | \"intersection\" | \"resize\";\n\ntype ObserverCallbackType<T extends ObserverType> = T extends \"mutation\"\n  ? MutationCallback\n  : T extends \"intersection\"\n    ? IntersectionObserverCallback\n    : T extends \"resize\"\n      ? ResizeObserverCallback\n      : never;\n\ntype ObserverOptions<T extends ObserverType> = T extends \"intersection\" ? IntersectionObserverInit : never;\n\ntype ObserverClassType<T extends ObserverType> = T extends \"mutation\"\n  ? typeof ExtendedMutationObserver\n  : T extends \"intersection\"\n    ? typeof IntersectionObserver\n    : T extends \"resize\"\n      ? typeof ResizeObserver\n      : never;\n\ntype ObserverInstanceType<T extends ObserverType> = T extends \"mutation\"\n  ? ExtendedMutationObserver\n  : T extends \"intersection\"\n    ? IntersectionObserver\n    : T extends \"resize\"\n      ? ResizeObserver\n      : never;\n\n/**\n * This utility ensures observers are created only for browser contexts.\n *\n * @param type - the type of observer to create\n * @param callback - the observer callback\n * @param options - the observer options\n */\nexport function createObserver<T extends ObserverType>(\n  type: T,\n  callback: ObserverCallbackType<T>,\n  options?: ObserverOptions<T>,\n): ObserverInstanceType<T> | undefined {\n  if (!isBrowser()) {\n    return undefined;\n  }\n\n  const Observer = getObserver<T>(type);\n  return new Observer(callback as any, options) as any;\n}\n\nfunction getObserver<T extends ObserverType>(type: T): ObserverClassType<T> {\n  // based on https://github.com/whatwg/dom/issues/126#issuecomment-1049814948\n  class ExtendedMutationObserver extends window.MutationObserver implements ExtendedMutationObserver {\n    private observedEntry: Array<{\n      target: Node;\n      options?: MutationObserverInit;\n    }> = [];\n\n    private readonly callback: MutationCallback;\n\n    constructor(callback: MutationCallback) {\n      super(callback);\n      this.callback = callback;\n    }\n\n    observe(target: Node, options?: MutationObserverInit): void {\n      this.observedEntry.push({ target, options });\n\n      return super.observe(target, options);\n    }\n\n    unobserve(target: Node): void {\n      const newObservedEntries = this.observedEntry.filter((observed) => observed.target !== target);\n      this.observedEntry = [];\n      this.callback(super.takeRecords(), this);\n      this.disconnect();\n      newObservedEntries.forEach((observed) => this.observe(observed.target, observed.options));\n    }\n  }\n\n  return (function () {\n    return (\n      type === \"intersection\"\n        ? window.IntersectionObserver\n        : type === \"mutation\"\n          ? ExtendedMutationObserver\n          : window.ResizeObserver\n    ) as any;\n  })();\n}\n"],"names":["CSS","SortableList","items","mutationObserver","createObserver","this","setUpSorting","dragEnabled","connectedCallback","beginObserving","disconnectedCallback","disconnectSortableComponent","endObserving","componentDidRender","updateHostInteraction","calciteHandleNudgeNextHandler","event","handleNudgeEvent","onGlobalDragStart","onGlobalDragEnd","onDragEnd","onDragStart","onDragSort","Array","from","el","children","calciteListOrderChange","emit","direction","detail","handle","composedPath","find","matches","handleSelector","sortItem","item","contains","includes","lastIndex","length","startingIndex","indexOf","buddyIndex","appendInstead","parentElement","appendChild","insertBefore","requestAnimationFrame","focusElement","selected","connectSortableComponent","observe","childList","subtree","disconnect","render","disabled","layout","horizontal","h","InteractiveContainer","key","class","type","callback","options","isBrowser","Observer","ExtendedMutationObserver","window","MutationObserver","constructor","super","observedEntry","target","push","unobserve","newObservedEntries","filter","observed","takeRecords","forEach","IntersectionObserver","ResizeObserver","getObserver"],"sourceRoot":""}