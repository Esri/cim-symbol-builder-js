{"version":3,"file":"static/js/1311.d7e2faf7.chunk.js","mappings":"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","sources":["../node_modules/@esri/calcite-components/dist/esm/src/components/fab/resources.ts","../node_modules/@esri/calcite-components/dist/esm/src/components/fab/fab.tsx","../node_modules/@esri/calcite-components/dist/esm/src/components/fab/fab.scss?tag=calcite-fab&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/esm/src/utils/interactive.tsx","../node_modules/@esri/calcite-components/dist/esm/src/utils/loadable.ts"],"sourcesContent":["export const CSS = {\n  button: \"button\",\n};\n\nexport const ICONS = {\n  plus: \"plus\",\n} as const;\n","import { Component, Element, h, Method, Prop, VNode } from \"@stencil/core\";\nimport { focusElement } from \"../../utils/dom\";\nimport {\n  InteractiveComponent,\n  InteractiveContainer,\n  updateHostInteraction,\n} from \"../../utils/interactive\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport { Appearance, Kind, Scale } from \"../interfaces\";\nimport { IconNameOrString } from \"../icon/interfaces\";\nimport { CSS, ICONS } from \"./resources\";\n\n@Component({\n  tag: \"calcite-fab\",\n  styleUrl: \"fab.scss\",\n  shadow: true,\n})\nexport class Fab implements InteractiveComponent, LoadableComponent {\n  // --------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * Specifies the appearance style of the component.\n   */\n  @Prop({ reflect: true }) appearance: Extract<\"solid\" | \"outline-fill\", Appearance> = \"solid\";\n\n  /**\n   * Specifies the kind of the component, which will apply to border and background.\n   */\n  @Prop({ reflect: true }) kind: Extract<\"brand\" | \"danger\" | \"inverse\" | \"neutral\", Kind> =\n    \"brand\";\n\n  /**\n   * When `true`, interaction is prevented and the component is displayed with lower opacity.\n   */\n  @Prop({ reflect: true }) disabled = false;\n\n  /**\n   * Specifies an icon to display.\n   *\n   * @default \"plus\"\n   */\n  @Prop({ reflect: true }) icon: IconNameOrString = ICONS.plus;\n\n  /** When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`). */\n  @Prop({ reflect: true }) iconFlipRtl = false;\n\n  /**\n   * Accessible name for the component.\n   */\n  @Prop() label: string;\n\n  /**\n   * When `true`, a busy indicator is displayed.\n   */\n  @Prop({ reflect: true }) loading = false;\n\n  /**\n   * Specifies the size of the component.\n   */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  /**\n   * Specifies text to accompany the component's icon.\n   */\n  @Prop() text: string;\n\n  /**\n   * When `true`, displays the `text` value in the component.\n   */\n  @Prop({ reflect: true }) textEnabled = false;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteFabElement;\n\n  private buttonEl: HTMLElement;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  componentWillLoad(): void {\n    setUpLoadableComponent(this);\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n  }\n\n  componentDidRender(): void {\n    updateHostInteraction(this);\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Methods\n  //\n  // --------------------------------------------------------------------------\n\n  /** Sets focus on the component. */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n\n    focusElement(this.buttonEl);\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  // --------------------------------------------------------------------------\n\n  render(): VNode {\n    const {\n      appearance,\n      kind,\n      disabled,\n      loading,\n      scale,\n      textEnabled,\n      icon,\n      label,\n      text,\n      iconFlipRtl,\n    } = this;\n\n    const title = !textEnabled ? label || text || null : null;\n\n    return (\n      <InteractiveContainer disabled={disabled}>\n        <calcite-button\n          appearance={appearance === \"solid\" ? \"solid\" : \"outline-fill\"}\n          class={CSS.button}\n          disabled={disabled}\n          iconFlipRtl={iconFlipRtl ? \"start\" : null}\n          iconStart={icon}\n          kind={kind}\n          label={label}\n          loading={loading}\n          ref={(buttonEl): void => {\n            this.buttonEl = buttonEl;\n          }}\n          round={true}\n          scale={scale}\n          title={title}\n          type=\"button\"\n          width=\"auto\"\n        >\n          {this.textEnabled ? this.text : null}\n        </calcite-button>\n      </InteractiveContainer>\n    );\n  }\n}\n",":host {\n  @apply flex bg-transparent;\n}\n\n@include disabled();\n\ncalcite-button {\n  @apply shadow-2;\n  &:hover {\n    @apply shadow-2-lg;\n  }\n  &:active {\n    @apply shadow-2-sm;\n  }\n}\n\n@include base-component();\n","import { JSXAttributes } from \"@stencil/core/internal\";\nimport { FunctionalComponent, h, VNode } from \"@stencil/core\";\n\nexport interface InteractiveComponent {\n  /**\n   * The host element.\n   */\n  readonly el: InteractiveHTMLElement;\n\n  /**\n   * When true, prevents user interaction.\n   *\n   * Notes:\n   *\n   * This prop should use the @Prop decorator and reflect.\n   * The `disabled` Sass mixin must be added to the component's stylesheet.\n   */\n  disabled: boolean;\n}\n\n/**\n * Exported for testing purposes only.\n *\n * @internal\n */\nexport type InteractiveHTMLElement = HTMLElement & Pick<InteractiveComponent, \"disabled\">;\n\nfunction interceptedClick(): void {\n  const { disabled } = this as InteractiveHTMLElement;\n\n  if (!disabled) {\n    HTMLElement.prototype.click.call(this);\n  }\n}\n\nfunction onPointerDown(event: PointerEvent): void {\n  const interactiveElement = event.target as InteractiveHTMLElement;\n\n  if (interactiveElement.disabled) {\n    // prevent click from moving focus on host\n    event.preventDefault();\n  }\n}\n\nconst nonBubblingWhenDisabledMouseEvents = [\"mousedown\", \"mouseup\", \"click\"];\n\nfunction onNonBubblingWhenDisabledMouseEvent(event: MouseEvent): void {\n  const interactiveElement = event.target as InteractiveHTMLElement;\n\n  // prevent disallowed mouse events from being emitted on the disabled host (per https://github.com/whatwg/html/issues/5886)\n  // ⚠ we generally avoid stopping propagation of events, but this is needed to adhere to the intended spec changes above ⚠\n  if (interactiveElement.disabled) {\n    event.stopImmediatePropagation();\n    event.preventDefault();\n  }\n}\n\nconst captureOnlyOptions = { capture: true } as const;\n\n/**\n * This helper updates the host element to prevent keyboard interaction on its subtree and sets the appropriate aria attribute for accessibility.\n *\n * This should be used in the `componentDidRender` lifecycle hook.\n *\n * **Notes**\n *\n * this util is not needed for simple components whose root element or elements are an interactive component (custom element or native control). For those cases, set the `disabled` props on the root components instead.\n * technically, users can override `tabindex` and restore keyboard navigation, but this will be considered user error\n *\n * @param component\n */\nexport function updateHostInteraction(component: InteractiveComponent): void {\n  if (component.disabled) {\n    component.el.setAttribute(\"aria-disabled\", \"true\");\n\n    if (component.el.contains(document.activeElement)) {\n      (document.activeElement as HTMLElement).blur();\n    }\n\n    blockInteraction(component);\n\n    return;\n  }\n\n  restoreInteraction(component);\n\n  component.el.removeAttribute(\"aria-disabled\");\n}\n\nfunction blockInteraction(component: InteractiveComponent): void {\n  component.el.click = interceptedClick;\n  addInteractionListeners(component.el);\n}\n\nfunction addInteractionListeners(element: HTMLElement): void {\n  element.addEventListener(\"pointerdown\", onPointerDown, captureOnlyOptions);\n  nonBubblingWhenDisabledMouseEvents.forEach((event) =>\n    element.addEventListener(event, onNonBubblingWhenDisabledMouseEvent, captureOnlyOptions),\n  );\n}\n\nfunction restoreInteraction(component: InteractiveComponent): void {\n  delete component.el.click; // fallback on HTMLElement.prototype.click\n  removeInteractionListeners(component.el);\n}\n\nfunction removeInteractionListeners(element: HTMLElement): void {\n  element.removeEventListener(\"pointerdown\", onPointerDown, captureOnlyOptions);\n  nonBubblingWhenDisabledMouseEvents.forEach((event) =>\n    element.removeEventListener(event, onNonBubblingWhenDisabledMouseEvent, captureOnlyOptions),\n  );\n}\n\nexport interface InteractiveContainerProps extends JSXAttributes {\n  disabled: boolean;\n}\n\nexport const CSS = {\n  container: \"interaction-container\",\n};\n\nexport const InteractiveContainer: FunctionalComponent<InteractiveContainerProps> = (\n  { disabled },\n  children: VNode[],\n): VNode => (\n  <div class={CSS.container} inert={disabled}>\n    {...children}\n  </div>\n);\n","import { forceUpdate } from \"@stencil/core\";\nimport { isBrowser } from \"./browser\";\n\n/**\n * This helper adds support for knowing when a component has been loaded.\n *\n * Related issue: https://github.com/Esri/calcite-design-system/issues/5369\n * Could be related to Stencil.js issue: https://github.com/ionic-team/stencil/issues/3580\n *\n * Implementing\n *\n * ```\n * export class MyComponent implements LoadableComponent { }\n * ```\n *\n * ```\n *  //--------------------------------------------------------------------------\n *  //\n *  //  Lifecycle\n *  //\n *  //--------------------------------------------------------------------------\n *\n *  componentWillLoad(): void {\n *    setUpLoadableComponent(this);\n *  }\n *\n *  componentDidLoad(): void {\n *    setComponentLoaded(this);\n *  }\n *\n *  // --------------------------------------------------------------------------\n *  //\n *  //  Methods\n *  //\n *  // --------------------------------------------------------------------------\n *\n *  async myMethod(): Promise<void> {\n *    await componentLoaded(this);\n *  }\n * ```\n */\nexport interface LoadableComponent {\n  /**\n   * Stencil lifecycle method.\n   * https://stenciljs.com/docs/component-lifecycle#componentwillload\n   *\n   * Called once just after the component is first connected to the DOM. Since this method is only called once, it's a good place to load data asynchronously and to setup the state without triggering extra re-renders.\n   */\n  componentWillLoad: () => Promise<void> | void;\n\n  /**\n   * Stencil lifecycle method.\n   * https://stenciljs.com/docs/component-lifecycle#componentdidload\n   *\n   * Called once just after the component is fully loaded and the first render() occurs.\n   */\n  componentDidLoad: () => Promise<void> | void;\n}\n\nconst resolveMap = new WeakMap<LoadableComponent, (value: void | PromiseLike<void>) => void>();\n\nconst promiseMap = new WeakMap<LoadableComponent, Promise<void>>();\n\n/**\n * This helper util sets up the component for the ability to know when the component has been loaded.\n *\n * This should be used in the `componentWillLoad` lifecycle hook.\n *\n * ```\n * componentWillLoad(): void {\n *   setUpLoadableComponent(this);\n * }\n * ```\n *\n * @param component\n */\nexport function setUpLoadableComponent(component: LoadableComponent): void {\n  promiseMap.set(component, new Promise((resolve) => resolveMap.set(component, resolve)));\n}\n\n/**\n * This helper util lets the loadable component know that it is now loaded.\n *\n * This should be used in the `componentDidLoad` lifecycle hook.\n *\n * ```\n * componentDidLoad(): void {\n *   setComponentLoaded(this);\n * }\n * ```\n *\n * @param component\n */\nexport function setComponentLoaded(component: LoadableComponent): void {\n  resolveMap.get(component)();\n}\n\n/**\n * This helper util can be used to ensure a component has been loaded (The \"componentDidLoad\" Stencil lifecycle method has been called).\n *\n * Requires requires `LoadableComponent` to be implemented.\n *\n * A component developer can await this method before proceeding with any logic that requires a component to be loaded first.\n *\n * ```\n * async myMethod(): Promise<void> {\n *   await componentLoaded(this);\n * }\n * ```\n *\n * @param component\n * @returns Promise<void>\n */\nexport function componentLoaded(component: LoadableComponent): Promise<void> {\n  return promiseMap.get(component);\n}\n\n/**\n * This helper util can be used to ensuring the component is loaded and rendered by the browser (The \"componentDidLoad\" Stencil lifecycle method has been called and any internal elements are focusable).\n *\n * Requires `LoadableComponent` to be implemented.\n *\n * A component developer can await this method before proceeding with any logic that requires a component to be loaded first and then an internal element be focused.\n *\n * ```\n * async setFocus(): Promise<void> {\n *   await componentFocusable(this);\n *   this.internalElement?.focus();\n * }\n * ```\n *\n * @param component\n * @returns Promise<void>\n */\nexport async function componentFocusable(component: LoadableComponent): Promise<void> {\n  await componentLoaded(component);\n\n  if (!isBrowser()) {\n    return;\n  }\n\n  forceUpdate(component);\n  return new Promise((resolve) => requestAnimationFrame(() => resolve()));\n}\n"],"names":["CSS","ICONS","Fab","componentWillLoad","setUpLoadableComponent","this","componentDidLoad","setComponentLoaded","componentDidRender","updateHostInteraction","setFocus","componentFocusable","focusElement","buttonEl","render","appearance","kind","disabled","loading","scale","textEnabled","icon","label","text","iconFlipRtl","title","h","InteractiveContainer","key","class","iconStart","ref","round","type","width","interceptedClick","HTMLElement","prototype","click","call","onPointerDown","event","target","preventDefault","nonBubblingWhenDisabledMouseEvents","onNonBubblingWhenDisabledMouseEvent","stopImmediatePropagation","captureOnlyOptions","capture","component","el","setAttribute","contains","document","activeElement","blur","element","addEventListener","forEach","blockInteraction","removeEventListener","restoreInteraction","removeAttribute","children","inert","resolveMap","WeakMap","promiseMap","set","Promise","resolve","get","componentLoaded","async","isBrowser","forceUpdate","requestAnimationFrame"],"sourceRoot":""}