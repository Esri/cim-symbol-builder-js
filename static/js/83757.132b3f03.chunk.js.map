{"version":3,"file":"static/js/83757.132b3f03.chunk.js","mappings":"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","sources":["../node_modules/@esri/calcite-components/dist/esm/calcite-icon.entry.js","../node_modules/@esri/calcite-components/dist/esm/observers-72fa7eae.js"],"sourcesContent":["/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.\n * v1.9.2\n */\nimport { g as getAssetPath, r as registerInstance, h, H as Host, a as getElement } from './index-57f4809d.js';\nimport { g as getElementDir, t as toAriaBoolean } from './dom-158133b6.js';\nimport { c as createObserver } from './observers-72fa7eae.js';\nimport './guid-a5b8c53d.js';\nimport './resources-19304982.js';\n\nconst CSS = {\n  icon: \"icon\",\n  flipRtl: \"flip-rtl\",\n};\n\n/**\n * Icon data cache.\n * Exported for testing purposes.\n *\n * @private\n */\nconst iconCache = {};\n/**\n * Icon request cache.\n * Exported for testing purposes.\n *\n * @private\n */\nconst requestCache = {};\nconst scaleToPx = {\n  s: 16,\n  m: 24,\n  l: 32,\n};\nasync function fetchIcon({ icon, scale }) {\n  const size = scaleToPx[scale];\n  const name = normalizeIconName(icon);\n  const filled = name.charAt(name.length - 1) === \"F\";\n  const iconName = filled ? name.substring(0, name.length - 1) : name;\n  const id = `${iconName}${size}${filled ? \"F\" : \"\"}`;\n  if (iconCache[id]) {\n    return iconCache[id];\n  }\n  if (!requestCache[id]) {\n    requestCache[id] = fetch(getAssetPath(`./assets/icon/${id}.json`))\n      .then((resp) => resp.json())\n      .catch(() => {\n      console.error(`\"${id}\" is not a valid calcite-ui-icon name`);\n      return \"\";\n    });\n  }\n  const path = await requestCache[id];\n  iconCache[id] = path;\n  return path;\n}\n/**\n * Normalize the icon name to match the path data module exports.\n * Exported for testing purposes.\n *\n * @param name â€“ an icon name that can be either kebab or camel-cased\n * @private\n */\nfunction normalizeIconName(name) {\n  const numberLeadingName = !isNaN(Number(name.charAt(0)));\n  const parts = name.split(\"-\");\n  const kebabCased = parts.length > 0;\n  if (kebabCased) {\n    const firstNonDigitInPartPattern = /[a-z]/i;\n    name = parts\n      .map((part, partIndex) => {\n      return part.replace(firstNonDigitInPartPattern, function replacer(match, offset) {\n        const isFirstCharInName = partIndex === 0 && offset === 0;\n        if (isFirstCharInName) {\n          return match;\n        }\n        return match.toUpperCase();\n      });\n    })\n      .join(\"\");\n  }\n  return numberLeadingName ? `i${name}` : name;\n}\n\nconst iconCss = \":host{display:inline-flex;color:var(--calcite-ui-icon-color)}:host([scale=s]){block-size:1rem;inline-size:1rem;min-inline-size:1rem;min-block-size:1rem}:host([scale=m]){block-size:1.5rem;inline-size:1.5rem;min-inline-size:1.5rem;min-block-size:1.5rem}:host([scale=l]){block-size:2rem;inline-size:2rem;min-inline-size:2rem;min-block-size:2rem}.flip-rtl{transform:scaleX(-1)}.svg{display:block}:host([hidden]){display:none}[hidden]{display:none}\";\n\nconst Icon = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.icon = null;\n    this.flipRtl = false;\n    this.scale = \"m\";\n    this.textLabel = undefined;\n    this.pathData = undefined;\n    this.visible = false;\n  }\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n  connectedCallback() {\n    this.waitUntilVisible(() => {\n      this.visible = true;\n      this.loadIconPathData();\n    });\n  }\n  disconnectedCallback() {\n    this.intersectionObserver?.disconnect();\n    this.intersectionObserver = null;\n  }\n  async componentWillLoad() {\n    this.loadIconPathData();\n  }\n  render() {\n    const { el, flipRtl, pathData, scale, textLabel } = this;\n    const dir = getElementDir(el);\n    const size = scaleToPx[scale];\n    const semantic = !!textLabel;\n    const paths = [].concat(pathData || \"\");\n    return (h(Host, { \"aria-hidden\": toAriaBoolean(!semantic), \"aria-label\": semantic ? textLabel : null, role: semantic ? \"img\" : null }, h(\"svg\", { \"aria-hidden\": \"true\", class: {\n        [CSS.flipRtl]: dir === \"rtl\" && flipRtl,\n        svg: true,\n      }, fill: \"currentColor\", height: \"100%\", viewBox: `0 0 ${size} ${size}`, width: \"100%\", xmlns: \"http://www.w3.org/2000/svg\" }, paths.map((path) => typeof path === \"string\" ? (h(\"path\", { d: path })) : (h(\"path\", { d: path.d, opacity: \"opacity\" in path ? path.opacity : 1 }))))));\n  }\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n  async loadIconPathData() {\n    const { icon, scale, visible } = this;\n    if (!icon || !visible) {\n      return;\n    }\n    this.pathData = await fetchIcon({ icon, scale });\n  }\n  waitUntilVisible(callback) {\n    this.intersectionObserver = createObserver(\"intersection\", (entries) => {\n      entries.forEach((entry) => {\n        if (entry.isIntersecting) {\n          this.intersectionObserver.disconnect();\n          this.intersectionObserver = null;\n          callback();\n        }\n      });\n    }, { rootMargin: \"50px\" });\n    if (!this.intersectionObserver) {\n      callback();\n      return;\n    }\n    this.intersectionObserver.observe(this.el);\n  }\n  static get assetsDirs() { return [\"assets\"]; }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"icon\": [\"loadIconPathData\"],\n    \"scale\": [\"loadIconPathData\"]\n  }; }\n};\nIcon.style = iconCss;\n\nexport { Icon as calcite_icon };\n","/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.\n * v1.9.2\n */\n/**\n * This utility ensures observers are created only for browser contexts.\n *\n * @param type - the type of observer to create\n * @param callback - the observer callback\n * @param options - the observer options\n */\nfunction createObserver(type, callback, options) {\n  const Observer = getObserver(type);\n  return new Observer(callback, options);\n}\nfunction getObserver(type) {\n  // based on https://github.com/whatwg/dom/issues/126#issuecomment-1049814948\n  class ExtendedMutationObserver extends window.MutationObserver {\n    constructor(callback) {\n      super(callback);\n      this.observedEntry = [];\n      this.callback = callback;\n    }\n    observe(target, options) {\n      this.observedEntry.push({ target, options });\n      return super.observe(target, options);\n    }\n    unobserve(target) {\n      const newObservedEntries = this.observedEntry.filter((observed) => observed.target !== target);\n      this.observedEntry = [];\n      this.callback(super.takeRecords(), this);\n      this.disconnect();\n      newObservedEntries.forEach((observed) => this.observe(observed.target, observed.options));\n    }\n  }\n  return (function () {\n    return (type === \"intersection\"\n      ? window.IntersectionObserver\n      : type === \"mutation\"\n        ? ExtendedMutationObserver\n        : window.ResizeObserver);\n  })();\n}\n\nexport { createObserver as c };\n"],"names":["CSS","iconCache","requestCache","scaleToPx","s","m","l","async","fetchIcon","icon","scale","size","name","numberLeadingName","isNaN","Number","charAt","parts","split","length","firstNonDigitInPartPattern","map","part","partIndex","replace","match","offset","toUpperCase","join","normalizeIconName","filled","id","substring","fetch","getAssetPath","then","resp","json","catch","console","error","path","Icon","constructor","hostRef","registerInstance","this","flipRtl","textLabel","undefined","pathData","visible","connectedCallback","waitUntilVisible","loadIconPathData","disconnectedCallback","intersectionObserver","disconnect","render","el","dir","getElementDir","semantic","paths","concat","h","Host","toAriaBoolean","role","class","svg","fill","height","viewBox","width","xmlns","d","opacity","callback","createObserver","entries","forEach","entry","isIntersecting","rootMargin","observe","assetsDirs","getElement","watchers","style","type","options","Observer","ExtendedMutationObserver","window","MutationObserver","super","observedEntry","target","push","unobserve","newObservedEntries","filter","observed","takeRecords","IntersectionObserver","ResizeObserver","getObserver"],"sourceRoot":""}