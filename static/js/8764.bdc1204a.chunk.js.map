{"version":3,"file":"static/js/8764.bdc1204a.chunk.js","mappings":"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","sources":["../node_modules/@esri/calcite-components/dist/esm/src/components/action-group/action-group.scss?tag=calcite-action-group&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/esm/src/components/action-group/action-group.tsx","../node_modules/@esri/calcite-components/dist/esm/src/utils/conditionalSlot.ts","../node_modules/@esri/calcite-components/dist/esm/src/utils/loadable.ts","../node_modules/@esri/calcite-components/dist/esm/src/components/action-group/resources.ts","../node_modules/@esri/calcite-components/dist/esm/src/components/action-menu/resources.ts","../node_modules/@esri/calcite-components/dist/esm/src/utils/t9n.ts"],"sourcesContent":["/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-action-background-color: Specifies the component's background color.\n * @prop --calcite-action-group-border-color: Specifies the component's border color when used in a `calcite-action-bar` or `calcite-action-menu`.\n * @prop --calcite-action-group-columns: When `layout` is `\"grid\"`, specifies the component's grid-template-columns.\n * @prop --calcite-action-group-gap: When `layout` is `\"grid\"`, specifies the component's gap.\n * @prop --calcite-action-group-padding: [Deprecated] Use `--calcite-action-group-gap`. Specifies the component's padding.\n *\n */\n\n:host {\n  @extend %component-host;\n\n  @apply flex\n  flex-col\n  p-0;\n\n  background-color: transparent;\n  border-color: var(--calcite-action-group-border-color, var(--calcite-color-border-3));\n  border-style: solid;\n  border-width: 0;\n}\n\n.container {\n  @apply flex flex-col flex-grow;\n}\n\n:host([columns=\"1\"]) {\n  --calcite-internal-action-group-columns: 1;\n}\n:host([columns=\"2\"]) {\n  --calcite-internal-action-group-columns: 2;\n}\n:host([columns=\"3\"]) {\n  --calcite-internal-action-group-columns: 3;\n}\n:host([columns=\"4\"]) {\n  --calcite-internal-action-group-columns: 4;\n}\n:host([columns=\"5\"]) {\n  --calcite-internal-action-group-columns: 5;\n}\n:host([columns=\"6\"]) {\n  --calcite-internal-action-group-columns: 6;\n}\n\n:host(:first-child) {\n  @apply pt-0;\n}\n\n:host([layout=\"horizontal\"]),\n:host([layout=\"horizontal\"]) .container {\n  @apply flex-row;\n}\n\n:host([layout=\"grid\"]) {\n  @apply grid;\n\n  .container {\n    @apply grid\n    place-content-stretch;\n    background-color: transparent;\n    grid-template-columns: repeat(\n      var(--calcite-action-group-columns, var(--calcite-internal-action-group-columns, 3)),\n      auto\n    );\n    gap: var(--calcite-action-group-gap, 1px);\n    padding: var(--calcite-action-group-gap, 1px);\n  }\n}\n\n@include base-component();\n","import { Component, Element, h, Method, Prop, State, VNode, Watch } from \"@stencil/core\";\nimport { CalciteActionMenuCustomEvent } from \"../../components\";\nimport {\n  ConditionalSlotComponent,\n  connectConditionalSlotComponent,\n  disconnectConditionalSlotComponent,\n} from \"../../utils/conditionalSlot\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport { connectLocalized, disconnectLocalized, LocalizedComponent } from \"../../utils/locale\";\nimport {\n  connectMessages,\n  disconnectMessages,\n  setUpMessages,\n  T9nComponent,\n  updateMessages,\n} from \"../../utils/t9n\";\nimport { SLOTS as ACTION_MENU_SLOTS } from \"../action-menu/resources\";\nimport { Layout, Scale } from \"../interfaces\";\nimport { FlipPlacement, LogicalPlacement, OverlayPositioning } from \"../../utils/floating-ui\";\nimport { slotChangeHasAssignedElement } from \"../../utils/dom\";\nimport { Columns } from \"./interfaces\";\nimport { ActionGroupMessages } from \"./assets/action-group/t9n\";\nimport { ICONS, SLOTS, CSS } from \"./resources\";\n\n/**\n * @slot - A slot for adding a group of `calcite-action`s.\n * @slot menu-actions - A slot for adding an overflow menu with `calcite-action`s inside a `calcite-dropdown`.\n * @slot menu-tooltip - A slot for adding a `calcite-tooltip` for the menu.\n */\n@Component({\n  tag: \"calcite-action-group\",\n  styleUrl: \"action-group.scss\",\n  shadow: {\n    delegatesFocus: true,\n  },\n  assetsDirs: [\"assets\"],\n})\nexport class ActionGroup\n  implements ConditionalSlotComponent, LoadableComponent, LocalizedComponent, T9nComponent\n{\n  // --------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * When `true`, the component is expanded.\n   */\n  @Prop({ reflect: true }) expanded = false;\n\n  @Watch(\"expanded\")\n  expandedHandler(): void {\n    this.menuOpen = false;\n  }\n\n  /**\n   *  Accessible name for the component.\n   */\n  @Prop() label: string;\n\n  /**\n   * Indicates the layout of the component.\n   *\n   * @deprecated Use the `layout` property on the component's parent instead.\n   */\n  @Prop({ reflect: true }) layout: Extract<\"horizontal\" | \"vertical\" | \"grid\", Layout> = \"vertical\";\n\n  /**\n   * Indicates number of columns.\n   */\n  @Prop({ reflect: true }) columns: Columns;\n\n  /**\n   * When `true`, the `calcite-action-menu` is open.\n   */\n  @Prop({ reflect: true, mutable: true }) menuOpen = false;\n\n  /**\n   * Determines the type of positioning to use for the overlaid content.\n   *\n   * Using `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n   * `\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.\n   *\n   */\n  @Prop({ reflect: true }) overlayPositioning: OverlayPositioning = \"absolute\";\n\n  /**\n   * Specifies the size of the `calcite-action-menu`.\n   */\n  @Prop({ reflect: true }) scale: Scale;\n\n  /**\n   * Specifies the component's fallback menu `placement` when it's initial or specified `placement` has insufficient space available.\n   */\n  @Prop() menuFlipPlacements: FlipPlacement[];\n\n  /**\n   * Determines where the action menu will be positioned.\n   */\n  @Prop({ reflect: true }) menuPlacement: LogicalPlacement;\n\n  /**\n   * Made into a prop for testing purposes only\n   *\n   * @internal\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messages: ActionGroupMessages;\n\n  /**\n   * Use this property to override individual strings used by the component.\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messageOverrides: Partial<ActionGroupMessages>;\n\n  @Watch(\"messageOverrides\")\n  onMessagesChange(): void {\n    /* wired up by t9n util */\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n  @Element() el: HTMLCalciteActionGroupElement;\n\n  @State() effectiveLocale = \"\";\n\n  @Watch(\"effectiveLocale\")\n  effectiveLocaleChange(): void {\n    updateMessages(this, this.effectiveLocale);\n  }\n\n  @State() defaultMessages: ActionGroupMessages;\n\n  @State() hasMenuActions = false;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  //--------------------------------------------------------------------------\n\n  /** Sets focus on the component's first focusable element. */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n    this.el.focus();\n  }\n  // --------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  // --------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    connectLocalized(this);\n    connectMessages(this);\n    connectConditionalSlotComponent(this);\n  }\n\n  disconnectedCallback(): void {\n    disconnectLocalized(this);\n    disconnectMessages(this);\n    disconnectConditionalSlotComponent(this);\n  }\n\n  async componentWillLoad(): Promise<void> {\n    setUpLoadableComponent(this);\n    await setUpMessages(this);\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Component Methods\n  //\n  // --------------------------------------------------------------------------\n\n  renderMenu(): VNode {\n    const {\n      expanded,\n      menuOpen,\n      scale,\n      layout,\n      messages,\n      overlayPositioning,\n      hasMenuActions,\n      menuFlipPlacements,\n      menuPlacement,\n    } = this;\n\n    return (\n      <calcite-action-menu\n        expanded={expanded}\n        flipPlacements={\n          menuFlipPlacements ?? (layout === \"horizontal\" ? [\"top\", \"bottom\"] : [\"left\", \"right\"])\n        }\n        hidden={!hasMenuActions}\n        label={messages.more}\n        onCalciteActionMenuOpen={this.setMenuOpen}\n        open={menuOpen}\n        overlayPositioning={overlayPositioning}\n        placement={menuPlacement ?? (layout === \"horizontal\" ? \"bottom-start\" : \"leading-start\")}\n        scale={scale}\n      >\n        <calcite-action\n          icon={ICONS.menu}\n          scale={scale}\n          slot={ACTION_MENU_SLOTS.trigger}\n          text={messages.more}\n          textEnabled={expanded}\n        />\n        <slot name={SLOTS.menuActions} onSlotchange={this.handleMenuActionsSlotChange} />\n        <slot name={SLOTS.menuTooltip} slot={ACTION_MENU_SLOTS.tooltip} />\n      </calcite-action-menu>\n    );\n  }\n\n  render(): VNode {\n    return (\n      <div aria-label={this.label} class={CSS.container} role=\"group\">\n        <slot />\n        {this.renderMenu()}\n      </div>\n    );\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  // --------------------------------------------------------------------------\n\n  setMenuOpen = (event: CalciteActionMenuCustomEvent<void>): void => {\n    this.menuOpen = !!event.target.open;\n  };\n\n  handleMenuActionsSlotChange = (event: Event): void => {\n    this.hasMenuActions = slotChangeHasAssignedElement(event);\n  };\n}\n","import { forceUpdate } from \"@stencil/core\";\nimport { createObserver, ExtendedMutationObserver } from \"./observers\";\n\n/**\n * Defines interface for components with a dynamically changing slot.\n *\n * @deprecated Use `onSlotchange` event with `slotChangeHasAssignedElement` DOM utility instead.\n *\n * ```\n * <slot onSlotchange={(event) => this.mySlotHasElement = slotChangeHasAssignedElement(event)} />}\n * ```\n */\nexport interface ConditionalSlotComponent {\n  /**\n   * The host element.\n   */\n  readonly el: HTMLElement;\n}\n\nlet mutationObserver: ExtendedMutationObserver;\nconst observerOptions: Pick<Parameters<MutationObserver[\"observe\"]>[1], \"childList\"> = { childList: true };\n\n/**\n * Helper to set up a conditional slot component on connectedCallback.\n *\n * @param component\n * @deprecated Use `onSlotchange` event with `slotChangeHasAssignedElement` DOM utility instead.\n *\n * ```\n * <slot onSlotchange={(event) => this.mySlotHasElement = slotChangeHasAssignedElement(event)} />}\n * ```\n */\nexport function connectConditionalSlotComponent(component: ConditionalSlotComponent): void {\n  if (!mutationObserver) {\n    mutationObserver = createObserver(\"mutation\", processMutations);\n  }\n\n  mutationObserver.observe(component.el, observerOptions);\n}\n\n/**\n * Helper to tear down a conditional slot component on disconnectedCallback.\n *\n * @param component\n * @deprecated Use `onSlotchange` event with `slotChangeHasAssignedElement` DOM utility instead.\n *\n * ```\n * <slot onSlotchange={(event) => this.mySlotHasElement = slotChangeHasAssignedElement(event)} />}\n * ```\n */\nexport function disconnectConditionalSlotComponent(component: ConditionalSlotComponent): void {\n  mutationObserver.unobserve(component.el);\n}\n\nfunction processMutations(mutations: MutationRecord[]): void {\n  mutations.forEach(({ target }) => {\n    forceUpdate(target);\n  });\n}\n","import { forceUpdate } from \"@stencil/core\";\nimport { isBrowser } from \"./browser\";\n\n/**\n * This helper adds support for knowing when a component has been loaded.\n *\n * Related issue: https://github.com/Esri/calcite-design-system/issues/5369\n * Could be related to Stencil.js issue: https://github.com/ionic-team/stencil/issues/3580\n *\n * Implementing\n *\n * ```\n * export class MyComponent implements LoadableComponent { }\n * ```\n *\n * ```\n *  //--------------------------------------------------------------------------\n *  //\n *  //  Lifecycle\n *  //\n *  //--------------------------------------------------------------------------\n *\n *  componentWillLoad(): void {\n *    setUpLoadableComponent(this);\n *  }\n *\n *  componentDidLoad(): void {\n *    setComponentLoaded(this);\n *  }\n *\n *  // --------------------------------------------------------------------------\n *  //\n *  //  Methods\n *  //\n *  // --------------------------------------------------------------------------\n *\n *  async myMethod(): Promise<void> {\n *    await componentLoaded(this);\n *  }\n * ```\n */\nexport interface LoadableComponent {\n  /**\n   * Stencil lifecycle method.\n   * https://stenciljs.com/docs/component-lifecycle#componentwillload\n   *\n   * Called once just after the component is first connected to the DOM. Since this method is only called once, it's a good place to load data asynchronously and to setup the state without triggering extra re-renders.\n   */\n  componentWillLoad: () => Promise<void> | void;\n\n  /**\n   * Stencil lifecycle method.\n   * https://stenciljs.com/docs/component-lifecycle#componentdidload\n   *\n   * Called once just after the component is fully loaded and the first render() occurs.\n   */\n  componentDidLoad: () => Promise<void> | void;\n}\n\nconst resolveMap = new WeakMap<LoadableComponent, (value: void | PromiseLike<void>) => void>();\n\nconst promiseMap = new WeakMap<LoadableComponent, Promise<void>>();\n\n/**\n * This helper util sets up the component for the ability to know when the component has been loaded.\n *\n * This should be used in the `componentWillLoad` lifecycle hook.\n *\n * ```\n * componentWillLoad(): void {\n *   setUpLoadableComponent(this);\n * }\n * ```\n *\n * @param component\n */\nexport function setUpLoadableComponent(component: LoadableComponent): void {\n  promiseMap.set(component, new Promise((resolve) => resolveMap.set(component, resolve)));\n}\n\n/**\n * This helper util lets the loadable component know that it is now loaded.\n *\n * This should be used in the `componentDidLoad` lifecycle hook.\n *\n * ```\n * componentDidLoad(): void {\n *   setComponentLoaded(this);\n * }\n * ```\n *\n * @param component\n */\nexport function setComponentLoaded(component: LoadableComponent): void {\n  resolveMap.get(component)();\n}\n\n/**\n * This helper util can be used to ensure a component has been loaded (The \"componentDidLoad\" Stencil lifecycle method has been called).\n *\n * Requires requires `LoadableComponent` to be implemented.\n *\n * A component developer can await this method before proceeding with any logic that requires a component to be loaded first.\n *\n * ```\n * async myMethod(): Promise<void> {\n *   await componentLoaded(this);\n * }\n * ```\n *\n * @param component\n * @returns Promise<void>\n */\nexport function componentLoaded(component: LoadableComponent): Promise<void> {\n  return promiseMap.get(component);\n}\n\n/**\n * This helper util can be used to ensuring the component is loaded and rendered by the browser (The \"componentDidLoad\" Stencil lifecycle method has been called and any internal elements are focusable).\n *\n * Requires `LoadableComponent` to be implemented.\n *\n * A component developer can await this method before proceeding with any logic that requires a component to be loaded first and then an internal element be focused.\n *\n * ```\n * async setFocus(): Promise<void> {\n *   await componentFocusable(this);\n *   this.internalElement?.focus();\n * }\n * ```\n *\n * @param component\n * @returns Promise<void>\n */\nexport async function componentFocusable(component: LoadableComponent): Promise<void> {\n  await componentLoaded(component);\n\n  if (!isBrowser()) {\n    return;\n  }\n\n  forceUpdate(component);\n  return new Promise((resolve) => requestAnimationFrame(() => resolve()));\n}\n","export const SLOTS = {\n  menuActions: \"menu-actions\",\n  menuTooltip: \"menu-tooltip\",\n};\n\nexport const ICONS = {\n  menu: \"ellipsis\",\n} as const;\n\nexport const CSS = {\n  container: \"container\",\n};\n","export const CSS = {\n  menu: \"menu\",\n  defaultTrigger: \"default-trigger\",\n};\n\nexport const SLOTS = {\n  tooltip: \"tooltip\",\n  trigger: \"trigger\",\n};\n\nexport const ICONS = {\n  menu: \"ellipsis\",\n} as const;\n\nexport const activeAttr = \"data-active\";\n","import { getAssetPath } from \"@stencil/core\";\nimport { getSupportedLocale, LocalizedComponent } from \"./locale\";\nimport { isBrowser } from \"./browser\";\n\nexport type MessageBundle = Record<string, string>;\n\nexport const componentLangToMessageBundleCache: Record<string, Promise<MessageBundle>> = {};\n\nasync function getMessageBundle(lang: string, component: string): Promise<MessageBundle> {\n  const key = `${component}_${lang}`;\n\n  if (componentLangToMessageBundleCache[key]) {\n    return componentLangToMessageBundleCache[key];\n  }\n\n  componentLangToMessageBundleCache[key] = fetch(getAssetPath(`./assets/${component}/t9n/messages_${lang}.json`))\n    .then((resp) => {\n      if (!resp.ok) {\n        throwMessageFetchError();\n      }\n      return resp.json();\n    })\n    .catch(() => throwMessageFetchError());\n\n  return componentLangToMessageBundleCache[key];\n}\n\nfunction throwMessageFetchError(): never {\n  throw new Error(\"could not fetch component message bundle\");\n}\n\nfunction mergeMessages(component: T9nComponent): void {\n  component.messages = {\n    ...component.defaultMessages,\n    ...component.messageOverrides,\n  };\n}\n\nfunction noop(): void {\n  // intentionally empty\n}\n\n/**\n * This utility sets up the messages used by the component. It should be awaited in the `componentWillLoad` lifecycle hook.\n *\n * @param component\n */\nexport async function setUpMessages(component: T9nComponent): Promise<void> {\n  component.defaultMessages = await fetchMessages(component, component.effectiveLocale);\n  mergeMessages(component);\n}\n\nasync function fetchMessages(component: T9nComponent, lang: string): Promise<MessageBundle> {\n  if (!isBrowser()) {\n    return {};\n  }\n\n  const { el } = component;\n  const tag = el.tagName.toLowerCase();\n  const componentName = tag.replace(\"calcite-\", \"\");\n\n  return getMessageBundle(getSupportedLocale(lang, \"t9n\"), componentName);\n}\n\n/**\n * This utility must be set up for the component to update its default message bundle if the locale changes.\n *\n * It can be set up in **either** of the following ways:\n *\n * 1. called from `LocalizedComponent`'s `onLocaleChange` method or\n * 2. called from a watcher configured to watch `LocalizedComponent`'s `effectiveLocale` prop\n *\n * @param component\n * @param lang\n */\nexport async function updateMessages(component: T9nComponent, lang: string): Promise<void> {\n  component.defaultMessages = await fetchMessages(component, lang);\n  mergeMessages(component);\n}\n\n/**\n * This utility sets up internals for messages support.\n *\n * It needs to be called in `connectedCallback`\n *\n * **Note**: this must be called after `LocalizedComponent`'s `connectLocalized` method.\n *\n * @param component\n */\nexport function connectMessages(component: T9nComponent): void {\n  component.onMessagesChange = defaultOnMessagesChange;\n}\n\n/**\n * This utility tears down internals for messages support.\n *\n * It needs to be called in `disconnectedCallback`\n *\n * @param component\n */\nexport function disconnectMessages(component: T9nComponent): void {\n  // we set this to noop to for watchers triggered when components are disconnected\n  component.onMessagesChange = noop;\n}\n\n/**\n * This interface enables components to support built-in translation strings.\n *\n * **Notes**:\n *\n * This requires `LocalizedComponent` to be implemented.\n * To avoid unnecessary lookups, composite components should set `lang` on internal t9n components.\n */\nexport interface T9nComponent extends LocalizedComponent {\n  el: HTMLElement;\n\n  /**\n   * This property holds all messages used by the component's rendering.\n   *\n   * This prop should use the `@Prop` decorator. It uses `@Prop` decorator for testing purpose only.\n   */\n  messages: MessageBundle;\n\n  /**\n   * This property holds the component's default messages.\n   */\n  defaultMessages: MessageBundle;\n\n  /**\n   * This property holds all user message overrides.\n   *\n   * This prop should use the `@Prop` decorator.\n   */\n  messageOverrides: Partial<MessageBundle>;\n\n  /**\n   * This private method ensures messages are kept in sync.\n   *\n   * This method should be empty and configured to watch for changes on  `messageOverrides` property.\n   *\n   * @Watch(\"messageOverrides\")\n   * onMessagesChange(): void {\n   *  \\/* wired up by t9n util *\\/\n   * }\n   */\n  onMessagesChange: () => void;\n}\n\nfunction defaultOnMessagesChange(this: T9nComponent): void {\n  mergeMessages(this);\n}\n"],"names":["ActionGroup","setMenuOpen","event","this","menuOpen","target","open","handleMenuActionsSlotChange","hasMenuActions","slotChangeHasAssignedElement","expandedHandler","onMessagesChange","effectiveLocaleChange","updateMessages","effectiveLocale","setFocus","componentFocusable","el","focus","connectedCallback","connectLocalized","connectMessages","connectConditionalSlotComponent","disconnectedCallback","disconnectLocalized","disconnectMessages","disconnectConditionalSlotComponent","componentWillLoad","setUpLoadableComponent","setUpMessages","componentDidLoad","setComponentLoaded","renderMenu","expanded","scale","layout","messages","overlayPositioning","menuFlipPlacements","menuPlacement","h","flipPlacements","hidden","label","more","onCalciteActionMenuOpen","placement","icon","ICONS","menu","slot","SLOTS$1","trigger","text","textEnabled","name","SLOTS","menuActions","onSlotchange","menuTooltip","tooltip","render","key","class","CSS","container","role","mutationObserver","observerOptions","childList","component","createObserver","processMutations","observe","unobserve","mutations","forEach","forceUpdate","resolveMap","WeakMap","promiseMap","set","Promise","resolve","get","componentLoaded","async","isBrowser","requestAnimationFrame","defaultTrigger","activeAttr","componentLangToMessageBundleCache","throwMessageFetchError","Error","mergeMessages","defaultMessages","messageOverrides","noop","fetchMessages","lang","componentName","tagName","toLowerCase","replace","fetch","getAssetPath","then","resp","ok","json","catch","getMessageBundle","getSupportedLocale","defaultOnMessagesChange"],"sourceRoot":""}