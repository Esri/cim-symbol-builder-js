{"version":3,"file":"static/js/82344.860cdc89.chunk.js","mappings":"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","sources":["../node_modules/@arcgis/lumina/dist/proxyExports-Cdzj7WL_.js","../node_modules/@arcgis/lumina/dist/controllers/index.js","../node_modules/@esri/calcite-components/dist/chunks/Heading.js","../node_modules/@esri/calcite-components/dist/chunks/logger.js","../node_modules/@esri/calcite-components/dist/chunks/observers.js","../node_modules/@esri/calcite-components/dist/chunks/useT9n.js","../node_modules/@esri/calcite-components/dist/components/calcite-tip-manager/customElement.js","../node_modules/lit-html/src/directives/keyed.ts","../node_modules/lit-html/src/async-directive.ts","../node_modules/lit-html/src/directives/ref.ts","../node_modules/lit-html/src/static.ts"],"sourcesContent":["import { d as setParentController, e as retrieveParentControllers, o as setAmbientChildController, t as trackKey, h as bypassReadOnly } from \"./Controller-BQOv8BAL.js\";\nconst proxyExports = (Class) => (...args) => {\n  const ambientControllers = retrieveParentControllers();\n  const instance = new Class(...args);\n  const initialExports = instance.exports;\n  setParentController(ambientControllers.at(-1));\n  const manager = instance.component.manager;\n  manager.W(instance, initialExports);\n  instance.watchExports(manager.W.bind(manager, instance));\n  setAmbientChildController(instance);\n  const hostCandidates = [instance.component, ...ambientControllers].reverse();\n  return trackKey(\n    hostCandidates,\n    (resolution) => resolution === void 0 ? void 0 : setProxy(instance, resolution, initialExports),\n    initialExports\n  );\n};\nconst setProxy = (controller, { host, key, isReactive: assignedToProp }, initialExports) => {\n  const genericHost = host;\n  const controllerValueChanged = genericHost[key] !== controller.exports;\n  const hostValueChanged = genericHost[key] !== initialExports;\n  const controllerUpdatedExports = initialExports !== controller.exports;\n  if (controllerValueChanged && !hostValueChanged && controllerUpdatedExports) {\n    genericHost[key] = controller.exports;\n  }\n  const isProxyExportsOnComponent = host === controller.component;\n  if (isProxyExportsOnComponent) {\n    if (assignedToProp) {\n      const manager = controller.component.manager;\n      if (hostValueChanged) {\n        manager.W(controller, genericHost[key]);\n      }\n      controller.onUpdate((changes) => {\n        if (changes.has(key)) {\n          const value = genericHost[key];\n          if (value !== controller.exports) {\n            manager.W(controller, value);\n          }\n        }\n      });\n    }\n    controller.O = assignedToProp ? void 0 : key;\n  }\n  const isReadOnly = controller.component.constructor.elementProperties.get(key)?.readOnly;\n  controller.watchExports(() => {\n    if (genericHost[key] === controller.exports) {\n      return;\n    }\n    if (isReadOnly) {\n      bypassReadOnly(() => {\n        genericHost[key] = controller.exports;\n      });\n    } else {\n      genericHost[key] = controller.exports;\n    }\n  });\n};\nexport {\n  proxyExports as p\n};\n","import { C as Controller, s as setAmbientComponent, i as isPromise, d as setParentController, e as retrieveParentControllers, t as trackKey, r as retrieveComponent, f as createEventFactory } from \"../Controller-BQOv8BAL.js\";\nimport { G, h, g, c, n, m, k, l, j } from \"../Controller-BQOv8BAL.js\";\nimport { p as proxyExports } from \"../proxyExports-Cdzj7WL_.js\";\nimport { isServer } from \"lit\";\nimport { observeAncestorsMutation, isEsriInternalEnv, getElementAttribute, getElementLocales, startLocaleObserver } from \"@arcgis/components-utils\";\nconst makeController = (constructor) => proxy(void 0, constructor);\nconst makeGenericController = (constructor) => (component) => proxy(\n  component,\n  /**\n   * GenericController is identical to Controller, in all except for typing.\n   * So dying a type-cast here so as not to needlessly add one more object\n   * to the prototype chain\n   */\n  constructor\n);\nclass FunctionalController extends Controller {\n  constructor(component, constructor) {\n    super(component);\n    const originalExports = this.exports;\n    try {\n      setAmbientComponent(this.component);\n      const value = constructor(this.component, this);\n      const constructorChangedExports = this.exports !== originalExports;\n      if (isPromise(value)) {\n        if (!constructorChangedExports) {\n          this.setProvisionalExports(value);\n        }\n        const resolved = value.then((result) => {\n          this.exports = result;\n          super.catchUpLifecycle();\n        }).catch((error) => {\n          this.P.reject(error);\n          console.error(error);\n        });\n        this.onLoad(async () => await resolved);\n      } else {\n        if (!constructorChangedExports || value !== void 0) {\n          this.exports = value;\n        }\n        queueMicrotask(() => super.catchUpLifecycle());\n      }\n    } catch (error) {\n      this.P.reject(error);\n      console.error(error);\n    }\n  }\n  /** Noop - will be called in the constructor instead */\n  catchUpLifecycle() {\n    return;\n  }\n}\nconst proxy = proxyExports(FunctionalController);\nconst useWatchAttributes = (attributes, callback) => new AttributeWatchController(attributes, callback);\nclass AttributeWatchController extends Controller {\n  #observer;\n  #attributes;\n  #callback;\n  constructor(attributes, callback) {\n    super();\n    if (isServer) {\n      return;\n    }\n    this.#attributes = attributes;\n    this.#callback = callback;\n    this.#observer = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        if (attributes.includes(mutation.attributeName)) {\n          callback.call(\n            this.component,\n            this.component.el.getAttribute(mutation.attributeName),\n            mutation.oldValue,\n            mutation.attributeName\n          );\n        }\n      });\n    });\n  }\n  hostConnected() {\n    this.#attributes.forEach((attribute) => {\n      if (this.component.el.hasAttribute(attribute)) {\n        this.#callback.call(this.component, null, this.component.el.getAttribute(attribute), attribute);\n      }\n    });\n    this.#observer.observe(this.component.el, {\n      attributes: true,\n      attributeOldValue: true,\n      attributeFilter: this.#attributes\n    });\n  }\n  hostDisconnected() {\n    this.#observer.disconnect();\n  }\n}\nconst load = makeController;\nconst toFunction = (Class) => (...args) => {\n  const ambientControllers = retrieveParentControllers();\n  const instance = new Class(...args);\n  setParentController(ambientControllers.at(-1));\n  return instance;\n};\nconst useMedia = (query) => makeController((_component, controller) => {\n  const media = globalThis.matchMedia(query);\n  const changed = () => {\n    controller.exports = media.matches;\n  };\n  changed();\n  controller.onLifecycle(() => {\n    media.addEventListener(\"change\", changed);\n    return () => media.removeEventListener(\"change\", changed);\n  });\n  return void 0;\n});\nconst defaultDirection = \"ltr\";\nconst useDirection = () => makeController((component, controller) => {\n  controller.exports = defaultDirection;\n  controller.onLifecycle(() => {\n    const callback = () => {\n      const dir = getElementAttribute(component.el, \"dir\", defaultDirection);\n      controller.exports = dir === \"rtl\" ? \"rtl\" : \"ltr\";\n    };\n    callback();\n    return observeAncestorsMutation(component.el, [\"dir\"], callback);\n  });\n  if (process.env.NODE_ENV !== \"production\" && isEsriInternalEnv()) {\n    trackKey(\n      component,\n      (resolved) => {\n        if (resolved?.key === \"dir\") {\n          throw new Error(\n            `Do not assign this controller to a prop called \\`dir\\` as that will overwrite the \\`dir\\` attribute on the host element - component should not be setting the \\`dir\\` attribute on itself. Instead, assign this controller to a property called \\`direction\\`.`\n          );\n        }\n      },\n      controller.exports\n    );\n  }\n  return void 0;\n});\nconst makeT9nController = (getAssetPath) => (options = {}) => (\n  // eslint-disable-next-line @typescript-eslint/promise-function-async\n  makeController((component, controller) => {\n    const locale = getElementLocales(component.el);\n    const pending = { [\"_lang\"]: locale.lang, [\"_t9nLocale\"]: locale.t9nLocale, [\"_loading\"]: true };\n    const componentWithOverrides = component;\n    controller.onLifecycle(\n      () => startLocaleObserver(\n        component.el,\n        () => getAssetPath(\"./assets\"),\n        ({ t9nLocale, t9nStrings, lang }) => {\n          const withoutOverrides = {\n            ...t9nStrings,\n            [\"_lang\"]: lang,\n            [\"_t9nLocale\"]: t9nLocale,\n            [\"_loading\"]: false\n          };\n          controller.exports = withoutOverrides;\n          const label = t9nStrings.componentLabel;\n          if (typeof label === \"string\" && \"label\" in component && component.label == null) {\n            component.label ??= label;\n          }\n          applyOverrides(componentWithOverrides.messageOverrides);\n        },\n        options.name\n      )\n    );\n    const applyOverrides = (messageOverrides) => {\n      const currentValue = controller.exports;\n      const rawMessages = currentValue[\"_original\"] ?? currentValue;\n      const updated = deepMerge(rawMessages, messageOverrides);\n      if (messageOverrides) {\n        updated[\"_original\"] = rawMessages;\n      }\n      controller.exports = updated;\n    };\n    if (\"messageOverrides\" in componentWithOverrides) {\n      controller.onUpdate((changes) => {\n        if (changes.has(\"messageOverrides\")) {\n          applyOverrides(componentWithOverrides.messageOverrides);\n        }\n      });\n    }\n    if (options.blocking) {\n      controller.setProvisionalExports(pending, false);\n      return controller.ready;\n    } else {\n      return pending;\n    }\n  })\n);\nconst deepMerge = (original, overwrites) => {\n  if (!overwrites) {\n    return original;\n  }\n  const merged = { ...original };\n  Object.entries(overwrites).forEach(([key, value]) => {\n    if (typeof value === \"object\") {\n      merged[key] = deepMerge(original[key], value);\n    } else {\n      merged[key] = value ?? original[key];\n    }\n  });\n  return merged;\n};\nconst usePropertyChange = (_component) => propertyChangeController;\nconst eventName = \"arcgisPropertyChange\";\nconst propertyChangeController = (...toWatch) => {\n  const component = retrieveComponent();\n  const eventEmitter = createEventFactory(eventName, void 0, component);\n  if (process.env.NODE_ENV !== \"production\" && isEsriInternalEnv()) {\n    toWatch.forEach((prop) => {\n      const descriptor = component.constructor.elementProperties.get(prop);\n      const isProp = descriptor !== void 0 && descriptor.state !== true;\n      if (!isProp) {\n        throw new Error(\n          `For usePropertyChange to emit event on \"${prop}\" property change, you should add @property() to ${prop} in ${component.el.localName}`\n        );\n      }\n    });\n  }\n  let isFirst = true;\n  component.manager.onUpdated((changes) => {\n    if (isFirst || !component.el.isConnected) {\n      isFirst = false;\n      return;\n    }\n    for (const name of toWatch) {\n      if (changes.has(name)) {\n        eventEmitter.emit({ name });\n      }\n    }\n  });\n  if (process.env.NODE_ENV !== \"production\" && isEsriInternalEnv()) {\n    trackKey(\n      component,\n      (resolution) => {\n        if (resolution === void 0 || resolution.isReactive || resolution.key !== eventName) {\n          throw new Error(\n            `For consistency, usePropertyChange must be assigned to an arcgisPropertyChange property and that property should not have @property() or @state() decorators: arcgisPropertyChange = usePropertyChange<this>()(\"prop1\", \"prop2\");`\n          );\n        }\n      },\n      eventEmitter\n    );\n  }\n  return eventEmitter;\n};\nexport {\n  Controller,\n  G as GenericController,\n  h as bypassReadOnly,\n  g as bypassSetter,\n  c as controllerSymbol,\n  n as getControllersCount,\n  m as isController,\n  k as keyTrackResolve,\n  load,\n  makeController,\n  makeGenericController,\n  makeT9nController,\n  proxyExports,\n  retrieveComponent,\n  toFunction,\n  trackKey,\n  l as trackPropKey,\n  j as trackPropertyKey,\n  useDirection,\n  useMedia,\n  usePropertyChange,\n  useWatchAttributes\n};\n","/*! All material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\nv3.2.1 */\nimport { keyed } from \"lit-html/directives/keyed.js\";\nimport { unsafeStatic, literal, html } from \"lit-html/static.js\";\nimport { safeClassMap } from \"@arcgis/lumina\";\nfunction constrainHeadingLevel(level) {\n  return Math.min(Math.max(Math.ceil(level), 1), 6);\n}\nconst Heading = ({ children, ...props }) => {\n  const DynamicHtmlTag = props.level ? unsafeStatic(`h${props.level}`) : literal`div`;\n  return keyed(props.key, html`<${DynamicHtmlTag} class=${safeClassMap(props.class)}>${children}</${DynamicHtmlTag}>`);\n};\nexport {\n  Heading as H,\n  constrainHeadingLevel as c\n};\n","/*! All material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\nv3.2.1 */\nimport { l as logLevel } from \"./runtime.js\";\nconst loggedDeprecations = /* @__PURE__ */ new Set();\nconst logLevels = {\n  trace: 0,\n  debug: 1,\n  info: 2,\n  warn: 4,\n  error: 8,\n  off: 10\n};\nfunction willLog(level) {\n  return logLevels[level] >= logLevels[logLevel];\n}\nfunction forwardToConsole(level, ...data) {\n  if (!willLog(level)) {\n    return;\n  }\n  const badgeTemplate = \"%ccalcite\";\n  const badgeStyle = \"background: #007AC2; color: #fff; border-radius: 4px; padding: 2px 4px;\";\n  console[level].call(this, badgeTemplate, badgeStyle, ...data);\n}\nlet listFormatter;\nconst logger = {\n  debug: (message) => forwardToConsole(\"debug\", message),\n  info: (message) => forwardToConsole(\"info\", message),\n  warn: (message) => forwardToConsole(\"warn\", message),\n  error: (message) => forwardToConsole(\"error\", message),\n  trace: (message) => forwardToConsole(\"trace\", message),\n  deprecated\n};\nfunction deprecated(context, { component, name, suggested, removalVersion }) {\n  const key = `${context}:${context === \"component\" ? \"\" : component}${name}`;\n  if (loggedDeprecations.has(key)) {\n    return;\n  }\n  loggedDeprecations.add(key);\n  const multiSuggestions = Array.isArray(suggested);\n  if (multiSuggestions && !listFormatter) {\n    listFormatter = new Intl.ListFormat(\"en\", { style: \"long\", type: \"disjunction\" });\n  }\n  const message = `[${name}] ${context} is deprecated and will be removed in ${removalVersion === \"future\" ? `a future version` : `v${removalVersion}`}.${suggested ? ` Use ${multiSuggestions ? listFormatter.format(suggested.map((suggestion) => `\"${suggestion}\"`)) : `\"${suggested}\"`} instead.` : \"\"}`;\n  forwardToConsole(\"warn\", message);\n}\nexport {\n  logger as l\n};\n","/*! All material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\nv3.2.1 */\nimport { isServer } from \"lit\";\nfunction createObserver(type, callback, options) {\n  if (isServer) {\n    return void 0;\n  }\n  const Observer = getObserver(type);\n  return new Observer(callback, options);\n}\nfunction getObserver(type) {\n  class ExtendedMutationObserver extends window.MutationObserver {\n    constructor(callback) {\n      super(callback);\n      this.observedEntry = [];\n      this.callback = callback;\n    }\n    observe(target, options) {\n      this.observedEntry.push({ target, options });\n      return super.observe(target, options);\n    }\n    unobserve(target) {\n      const newObservedEntries = this.observedEntry.filter((observed) => observed.target !== target);\n      this.observedEntry = [];\n      this.callback(super.takeRecords(), this);\n      this.disconnect();\n      newObservedEntries.forEach((observed) => this.observe(observed.target, observed.options));\n    }\n  }\n  return function() {\n    return type === \"intersection\" ? window.IntersectionObserver : type === \"mutation\" ? ExtendedMutationObserver : window.ResizeObserver;\n  }();\n}\nexport {\n  createObserver as c\n};\n","/*! All material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\nv3.2.1 */\nimport { makeT9nController } from \"@arcgis/lumina/controllers\";\nimport { g as getAssetPath } from \"./runtime.js\";\nconst useT9n = makeT9nController(getAssetPath);\nexport {\n  useT9n as u\n};\n","/*! All material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\nv3.2.1 */\nimport { c as customElement } from \"../../chunks/runtime.js\";\nimport { ref } from \"lit-html/directives/ref.js\";\nimport { keyed } from \"lit-html/directives/keyed.js\";\nimport { html } from \"lit\";\nimport { LitElement, createEvent, safeClassMap } from \"@arcgis/lumina\";\nimport { g as getElementDir } from \"../../chunks/dom.js\";\nimport { c as createObserver } from \"../../chunks/observers.js\";\nimport { H as Heading } from \"../../chunks/Heading.js\";\nimport { l as logger } from \"../../chunks/logger.js\";\nimport { u as useT9n } from \"../../chunks/useT9n.js\";\nimport { css } from \"@lit/reactive-element/css-tag.js\";\nconst CSS = {\n  header: \"header\",\n  heading: \"heading\",\n  close: \"close\",\n  container: \"container\",\n  tipContainer: \"tip-container\",\n  tipContainerAdvancing: \"tip-container--advancing\",\n  tipContainerRetreating: \"tip-container--retreating\",\n  pagination: \"pagination\",\n  pagePosition: \"page-position\",\n  pageNext: \"page-next\",\n  pagePrevious: \"page-previous\"\n};\nconst ICONS = {\n  chevronLeft: \"chevron-left\",\n  chevronRight: \"chevron-right\",\n  close: \"x\"\n};\nconst styles = css`:host{box-sizing:border-box;display:block;background-color:var(--calcite-color-foreground-1);font-size:var(--calcite-font-size--1);line-height:1rem;color:var(--calcite-color-text-2);--calcite-tip-manager-height: 19vh}:host *{box-sizing:border-box}:host([closed]){display:none}.header{margin:0;display:flex;align-content:space-between;align-items:center;fill:var(--calcite-color-text-2);color:var(--calcite-color-text-2)}.heading{margin:0;padding:0;font-weight:var(--calcite-font-weight-medium)}.header .heading{flex:1 1 auto;padding:.5rem}.header{border-width:0px;border-block-end-width:1px;border-style:solid;border-color:var(--calcite-color-border-3);padding-block:0px;padding-inline-end:0px;padding-inline-start:1rem}.header .heading{padding:0;font-size:var(--calcite-font-size-1);line-height:1.5rem;font-weight:var(--calcite-font-weight-bold);color:var(--calcite-color-text-1)}.container{position:relative;overflow:hidden;outline-color:transparent;min-block-size:150px}.container:focus{outline:2px solid var(--calcite-color-focus, var(--calcite-ui-focus-color, var(--calcite-color-brand)));outline-offset:calc(2px*(1 - (2*clamp(0,var(--calcite-offset-invert-focus),1))))}.tip-container{margin-block-start:1px;display:flex;align-items:flex-start;justify-content:center;overflow:auto;padding:1rem;outline-color:transparent;animation-name:none;animation-duration:var(--calcite-animation-timing);block-size:var(--calcite-tip-manager-height)}.tip-container:focus{outline:2px solid var(--calcite-color-focus, var(--calcite-ui-focus-color, var(--calcite-color-brand)));outline-offset:calc(2px*(1 - (2*clamp(0,var(--calcite-offset-invert-focus),1))))}::slotted(calcite-tip){margin:0;border-style:none;max-inline-size:var(--calcite-tip-max-width)}.tip-container--advancing{animation-name:tip-advance}.tip-container--retreating{animation-name:tip-retreat}.pagination{display:flex;align-items:center;justify-content:center;padding-inline:0px;padding-block:.75rem .5rem}.page-position{margin-block:0px;margin-inline:.5rem;font-size:var(--calcite-font-size--2);line-height:1rem}@keyframes tip-advance{0%{opacity:0;transform:translate3d(50px,0,0) scale(.99)}to{opacity:1;transform:translateZ(0) scale(1)}}@keyframes tip-retreat{0%{opacity:0;transform:translate3d(-50px,0,0) scale(.99)}to{opacity:1;transform:translateZ(0) scale(1)}}:host([hidden]){display:none}[hidden]{display:none}`;\nclass TipManager extends LitElement {\n  constructor() {\n    super(...arguments);\n    this.messages = useT9n();\n    this.mutationObserver = createObserver(\"mutation\", () => this.setUpTips());\n    this.closed = false;\n    this.calciteTipManagerClose = createEvent({ cancelable: false });\n  }\n  static {\n    this.properties = { direction: [16, {}, { state: true }], groupTitle: [16, {}, { state: true }], selectedIndex: [16, {}, { state: true }], tips: [16, {}, { state: true }], total: [16, {}, { state: true }], closed: [7, {}, { reflect: true, type: Boolean }], headingLevel: [11, {}, { type: Number, reflect: true }], messageOverrides: [0, {}, { attribute: false }] };\n  }\n  static {\n    this.styles = styles;\n  }\n  async nextTip() {\n    this.direction = \"advancing\";\n    const nextIndex = this.selectedIndex + 1;\n    this.selectedIndex = (nextIndex + this.total) % this.total;\n  }\n  async previousTip() {\n    this.direction = \"retreating\";\n    const previousIndex = this.selectedIndex - 1;\n    this.selectedIndex = (previousIndex + this.total) % this.total;\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    this.setUpTips();\n    this.mutationObserver?.observe(this.el, { childList: true, subtree: true });\n  }\n  async load() {\n    logger.deprecated(\"component\", {\n      name: \"tip-manager\",\n      removalVersion: 4,\n      suggested: \"carousel\"\n    });\n  }\n  willUpdate(changes) {\n    if (changes.has(\"closed\") && (this.hasUpdated || this.closed !== false)) {\n      this.direction = null;\n    }\n    if (changes.has(\"selectedIndex\")) {\n      this.selectedChangeHandler();\n    }\n    if (changes.has(\"messages\")) {\n      this.updateGroupTitle();\n    }\n  }\n  loaded() {\n    this.updateGroupTitle();\n  }\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this.mutationObserver?.disconnect();\n  }\n  selectedChangeHandler() {\n    this.showSelectedTip();\n    this.updateGroupTitle();\n  }\n  setUpTips() {\n    const tips = Array.from(this.el.querySelectorAll(\"calcite-tip\"));\n    this.total = tips.length;\n    if (this.total === 0) {\n      return;\n    }\n    const selectedTip = this.el.querySelector(\"calcite-tip[selected]\");\n    this.tips = tips;\n    this.selectedIndex = selectedTip ? tips.indexOf(selectedTip) : 0;\n    tips.forEach((tip) => {\n      tip.closeDisabled = true;\n    });\n    this.showSelectedTip();\n  }\n  hideTipManager() {\n    this.closed = true;\n    this.calciteTipManagerClose.emit();\n  }\n  showSelectedTip() {\n    this.tips.forEach((tip, index) => {\n      const isSelected = this.selectedIndex === index;\n      tip.selected = isSelected;\n      tip.hidden = !isSelected;\n    });\n  }\n  updateGroupTitle() {\n    if (this.tips) {\n      const selectedTip = this.tips[this.selectedIndex];\n      const tipParent = selectedTip.closest(\"calcite-tip-group\");\n      this.groupTitle = tipParent?.groupTitle || this.messages?.defaultGroupTitle;\n    }\n  }\n  previousClicked() {\n    this.previousTip();\n  }\n  nextClicked() {\n    this.nextTip();\n  }\n  tipManagerKeyDownHandler(event) {\n    if (event.target !== this.container) {\n      return;\n    }\n    switch (event.key) {\n      case \"ArrowRight\":\n        event.preventDefault();\n        this.nextTip();\n        break;\n      case \"ArrowLeft\":\n        event.preventDefault();\n        this.previousTip();\n        break;\n      case \"Home\":\n        event.preventDefault();\n        this.selectedIndex = 0;\n        break;\n      case \"End\":\n        event.preventDefault();\n        this.selectedIndex = this.total - 1;\n        break;\n    }\n  }\n  storeContainerRef(el) {\n    this.container = el;\n  }\n  renderPagination() {\n    const dir = getElementDir(this.el);\n    const { selectedIndex, tips, total, messages } = this;\n    const nextLabel = messages.next;\n    const previousLabel = messages.previous;\n    const paginationLabel = messages.defaultPaginationLabel;\n    return tips.length > 1 ? html`<footer class=${safeClassMap(CSS.pagination)}><calcite-action class=${safeClassMap(CSS.pagePrevious)} .icon=${dir === \"ltr\" ? ICONS.chevronLeft : ICONS.chevronRight} @click=${this.previousClicked} scale=m .text=${previousLabel}></calcite-action><span class=${safeClassMap(CSS.pagePosition)}>${`${paginationLabel} ${selectedIndex + 1}/${total}`}</span><calcite-action class=${safeClassMap(CSS.pageNext)} .icon=${dir === \"ltr\" ? ICONS.chevronRight : ICONS.chevronLeft} @click=${this.nextClicked} scale=m .text=${nextLabel}></calcite-action></footer>` : null;\n  }\n  render() {\n    const { closed, direction, headingLevel, groupTitle, selectedIndex, messages, total } = this;\n    const closeLabel = messages.close;\n    if (total === 0) {\n      return null;\n    }\n    return html`<section .ariaHidden=${closed} class=${safeClassMap(CSS.container)} .hidden=${closed} @keydown=${this.tipManagerKeyDownHandler} tabindex=0 ${ref(this.storeContainerRef)}><header class=${safeClassMap(CSS.header)}>${Heading({ class: CSS.heading, level: headingLevel, children: groupTitle })}<calcite-action class=${safeClassMap(CSS.close)} @click=${this.hideTipManager} scale=m .text=${closeLabel}><calcite-icon .icon=${ICONS.close} scale=m></calcite-icon></calcite-action></header>${keyed(selectedIndex, html`<div class=${safeClassMap({\n      [CSS.tipContainer]: true,\n      [CSS.tipContainerAdvancing]: !closed && direction === \"advancing\",\n      [CSS.tipContainerRetreating]: !closed && direction === \"retreating\"\n    })} tabindex=0><slot></slot></div>`)}${this.renderPagination()}</section>`;\n  }\n}\ncustomElement(\"calcite-tip-manager\", TipManager);\nexport {\n  TipManager\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {nothing} from '../lit-html.js';\nimport {\n  directive,\n  Directive,\n  ChildPart,\n  DirectiveParameters,\n} from '../directive.js';\nimport {setCommittedValue} from '../directive-helpers.js';\n\nclass Keyed extends Directive {\n  key: unknown = nothing;\n\n  render(k: unknown, v: unknown) {\n    this.key = k;\n    return v;\n  }\n\n  override update(part: ChildPart, [k, v]: DirectiveParameters<this>) {\n    if (k !== this.key) {\n      // Clear the part before returning a value. The one-arg form of\n      // setCommittedValue sets the value to a sentinel which forces a\n      // commit the next render.\n      setCommittedValue(part);\n      this.key = k;\n    }\n    return v;\n  }\n}\n\n/**\n * Associates a renderable value with a unique key. When the key changes, the\n * previous DOM is removed and disposed before rendering the next value, even\n * if the value - such as a template - is the same.\n *\n * This is useful for forcing re-renders of stateful components, or working\n * with code that expects new data to generate new HTML elements, such as some\n * animation techniques.\n */\nexport const keyed = directive(Keyed);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {Keyed};\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * Overview:\n *\n * This module is designed to add support for an async `setValue` API and\n * `disconnected` callback to directives with the least impact on the core\n * runtime or payload when that feature is not used.\n *\n * The strategy is to introduce a `AsyncDirective` subclass of\n * `Directive` that climbs the \"parent\" tree in its constructor to note which\n * branches of lit-html's \"logical tree\" of data structures contain such\n * directives and thus need to be crawled when a subtree is being cleared (or\n * manually disconnected) in order to run the `disconnected` callback.\n *\n * The \"nodes\" of the logical tree include Parts, TemplateInstances (for when a\n * TemplateResult is committed to a value of a ChildPart), and Directives; these\n * all implement a common interface called `DisconnectableChild`. Each has a\n * `_$parent` reference which is set during construction in the core code, and a\n * `_$disconnectableChildren` field which is initially undefined.\n *\n * The sparse tree created by means of the `AsyncDirective` constructor\n * crawling up the `_$parent` tree and placing a `_$disconnectableChildren` Set\n * on each parent that includes each child that contains a\n * `AsyncDirective` directly or transitively via its children. In order to\n * notify connection state changes and disconnect (or reconnect) a tree, the\n * `_$notifyConnectionChanged` API is patched onto ChildParts as a directive\n * climbs the parent tree, which is called by the core when clearing a part if\n * it exists. When called, that method iterates over the sparse tree of\n * Set<DisconnectableChildren> built up by AsyncDirectives, and calls\n * `_$notifyDirectiveConnectionChanged` on any directives that are encountered\n * in that tree, running the required callbacks.\n *\n * A given \"logical tree\" of lit-html data-structures might look like this:\n *\n *  ChildPart(N1) _$dC=[D2,T3]\n *   ._directive\n *     AsyncDirective(D2)\n *   ._value // user value was TemplateResult\n *     TemplateInstance(T3) _$dC=[A4,A6,N10,N12]\n *      ._$parts[]\n *        AttributePart(A4) _$dC=[D5]\n *         ._directives[]\n *           AsyncDirective(D5)\n *        AttributePart(A6) _$dC=[D7,D8]\n *         ._directives[]\n *           AsyncDirective(D7)\n *           Directive(D8) _$dC=[D9]\n *            ._directive\n *              AsyncDirective(D9)\n *        ChildPart(N10) _$dC=[D11]\n *         ._directive\n *           AsyncDirective(D11)\n *         ._value\n *           string\n *        ChildPart(N12) _$dC=[D13,N14,N16]\n *         ._directive\n *           AsyncDirective(D13)\n *         ._value // user value was iterable\n *           Array<ChildPart>\n *             ChildPart(N14) _$dC=[D15]\n *              ._value\n *                string\n *             ChildPart(N16) _$dC=[D17,T18]\n *              ._directive\n *                AsyncDirective(D17)\n *              ._value // user value was TemplateResult\n *                TemplateInstance(T18) _$dC=[A19,A21,N25]\n *                 ._$parts[]\n *                   AttributePart(A19) _$dC=[D20]\n *                    ._directives[]\n *                      AsyncDirective(D20)\n *                   AttributePart(A21) _$dC=[22,23]\n *                    ._directives[]\n *                      AsyncDirective(D22)\n *                      Directive(D23) _$dC=[D24]\n *                       ._directive\n *                         AsyncDirective(D24)\n *                   ChildPart(N25) _$dC=[D26]\n *                    ._directive\n *                      AsyncDirective(D26)\n *                    ._value\n *                      string\n *\n * Example 1: The directive in ChildPart(N12) updates and returns `nothing`. The\n * ChildPart will _clear() itself, and so we need to disconnect the \"value\" of\n * the ChildPart (but not its directive). In this case, when `_clear()` calls\n * `_$notifyConnectionChanged()`, we don't iterate all of the\n * _$disconnectableChildren, rather we do a value-specific disconnection: i.e.\n * since the _value was an Array<ChildPart> (because an iterable had been\n * committed), we iterate the array of ChildParts (N14, N16) and run\n * `setConnected` on them (which does recurse down the full tree of\n * `_$disconnectableChildren` below it, and also removes N14 and N16 from N12's\n * `_$disconnectableChildren`). Once the values have been disconnected, we then\n * check whether the ChildPart(N12)'s list of `_$disconnectableChildren` is empty\n * (and would remove it from its parent TemplateInstance(T3) if so), but since\n * it would still contain its directive D13, it stays in the disconnectable\n * tree.\n *\n * Example 2: In the course of Example 1, `setConnected` will reach\n * ChildPart(N16); in this case the entire part is being disconnected, so we\n * simply iterate all of N16's `_$disconnectableChildren` (D17,T18) and\n * recursively run `setConnected` on them. Note that we only remove children\n * from `_$disconnectableChildren` for the top-level values being disconnected\n * on a clear; doing this bookkeeping lower in the tree is wasteful since it's\n * all being thrown away.\n *\n * Example 3: If the LitElement containing the entire tree above becomes\n * disconnected, it will run `childPart.setConnected()` (which calls\n * `childPart._$notifyConnectionChanged()` if it exists); in this case, we\n * recursively run `setConnected()` over the entire tree, without removing any\n * children from `_$disconnectableChildren`, since this tree is required to\n * re-connect the tree, which does the same operation, simply passing\n * `isConnected: true` down the tree, signaling which callback to run.\n */\n\nimport {AttributePart, ChildPart, Disconnectable, Part} from './lit-html.js';\nimport {isSingleExpression} from './directive-helpers.js';\nimport {Directive, PartInfo, PartType} from './directive.js';\nexport * from './directive.js';\n\nconst DEV_MODE = true;\n\n/**\n * Recursively walks down the tree of Parts/TemplateInstances/Directives to set\n * the connected state of directives and run `disconnected`/ `reconnected`\n * callbacks.\n *\n * @return True if there were children to disconnect; false otherwise\n */\nconst notifyChildrenConnectedChanged = (\n  parent: Disconnectable,\n  isConnected: boolean\n): boolean => {\n  const children = parent._$disconnectableChildren;\n  if (children === undefined) {\n    return false;\n  }\n  for (const obj of children) {\n    // The existence of `_$notifyDirectiveConnectionChanged` is used as a \"brand\" to\n    // disambiguate AsyncDirectives from other DisconnectableChildren\n    // (as opposed to using an instanceof check to know when to call it); the\n    // redundancy of \"Directive\" in the API name is to avoid conflicting with\n    // `_$notifyConnectionChanged`, which exists `ChildParts` which are also in\n    // this list\n    // Disconnect Directive (and any nested directives contained within)\n    // This property needs to remain unminified.\n    (obj as AsyncDirective)['_$notifyDirectiveConnectionChanged']?.(\n      isConnected,\n      false\n    );\n    // Disconnect Part/TemplateInstance\n    notifyChildrenConnectedChanged(obj, isConnected);\n  }\n  return true;\n};\n\n/**\n * Removes the given child from its parent list of disconnectable children, and\n * if the parent list becomes empty as a result, removes the parent from its\n * parent, and so forth up the tree when that causes subsequent parent lists to\n * become empty.\n */\nconst removeDisconnectableFromParent = (obj: Disconnectable) => {\n  let parent, children;\n  do {\n    if ((parent = obj._$parent) === undefined) {\n      break;\n    }\n    children = parent._$disconnectableChildren!;\n    children.delete(obj);\n    obj = parent;\n  } while (children?.size === 0);\n};\n\nconst addDisconnectableToParent = (obj: Disconnectable) => {\n  // Climb the parent tree, creating a sparse tree of children needing\n  // disconnection\n  for (let parent; (parent = obj._$parent); obj = parent) {\n    let children = parent._$disconnectableChildren;\n    if (children === undefined) {\n      parent._$disconnectableChildren = children = new Set();\n    } else if (children.has(obj)) {\n      // Once we've reached a parent that already contains this child, we\n      // can short-circuit\n      break;\n    }\n    children.add(obj);\n    installDisconnectAPI(parent);\n  }\n};\n\n/**\n * Changes the parent reference of the ChildPart, and updates the sparse tree of\n * Disconnectable children accordingly.\n *\n * Note, this method will be patched onto ChildPart instances and called from\n * the core code when parts are moved between different parents.\n */\nfunction reparentDisconnectables(this: ChildPart, newParent: Disconnectable) {\n  if (this._$disconnectableChildren !== undefined) {\n    removeDisconnectableFromParent(this);\n    this._$parent = newParent;\n    addDisconnectableToParent(this);\n  } else {\n    this._$parent = newParent;\n  }\n}\n\n/**\n * Sets the connected state on any directives contained within the committed\n * value of this part (i.e. within a TemplateInstance or iterable of\n * ChildParts) and runs their `disconnected`/`reconnected`s, as well as within\n * any directives stored on the ChildPart (when `valueOnly` is false).\n *\n * `isClearingValue` should be passed as `true` on a top-level part that is\n * clearing itself, and not as a result of recursively disconnecting directives\n * as part of a `clear` operation higher up the tree. This both ensures that any\n * directive on this ChildPart that produced a value that caused the clear\n * operation is not disconnected, and also serves as a performance optimization\n * to avoid needless bookkeeping when a subtree is going away; when clearing a\n * subtree, only the top-most part need to remove itself from the parent.\n *\n * `fromPartIndex` is passed only in the case of a partial `_clear` running as a\n * result of truncating an iterable.\n *\n * Note, this method will be patched onto ChildPart instances and called from the\n * core code when parts are cleared or the connection state is changed by the\n * user.\n */\nfunction notifyChildPartConnectedChanged(\n  this: ChildPart,\n  isConnected: boolean,\n  isClearingValue = false,\n  fromPartIndex = 0\n) {\n  const value = this._$committedValue;\n  const children = this._$disconnectableChildren;\n  if (children === undefined || children.size === 0) {\n    return;\n  }\n  if (isClearingValue) {\n    if (Array.isArray(value)) {\n      // Iterable case: Any ChildParts created by the iterable should be\n      // disconnected and removed from this ChildPart's disconnectable\n      // children (starting at `fromPartIndex` in the case of truncation)\n      for (let i = fromPartIndex; i < value.length; i++) {\n        notifyChildrenConnectedChanged(value[i], false);\n        removeDisconnectableFromParent(value[i]);\n      }\n    } else if (value != null) {\n      // TemplateInstance case: If the value has disconnectable children (will\n      // only be in the case that it is a TemplateInstance), we disconnect it\n      // and remove it from this ChildPart's disconnectable children\n      notifyChildrenConnectedChanged(value as Disconnectable, false);\n      removeDisconnectableFromParent(value as Disconnectable);\n    }\n  } else {\n    notifyChildrenConnectedChanged(this, isConnected);\n  }\n}\n\n/**\n * Patches disconnection API onto ChildParts.\n */\nconst installDisconnectAPI = (obj: Disconnectable) => {\n  if ((obj as ChildPart).type == PartType.CHILD) {\n    (obj as ChildPart)._$notifyConnectionChanged ??=\n      notifyChildPartConnectedChanged;\n    (obj as ChildPart)._$reparentDisconnectables ??= reparentDisconnectables;\n  }\n};\n\n/**\n * An abstract `Directive` base class whose `disconnected` method will be\n * called when the part containing the directive is cleared as a result of\n * re-rendering, or when the user calls `part.setConnected(false)` on\n * a part that was previously rendered containing the directive (as happens\n * when e.g. a LitElement disconnects from the DOM).\n *\n * If `part.setConnected(true)` is subsequently called on a\n * containing part, the directive's `reconnected` method will be called prior\n * to its next `update`/`render` callbacks. When implementing `disconnected`,\n * `reconnected` should also be implemented to be compatible with reconnection.\n *\n * Note that updates may occur while the directive is disconnected. As such,\n * directives should generally check the `this.isConnected` flag during\n * render/update to determine whether it is safe to subscribe to resources\n * that may prevent garbage collection.\n */\nexport abstract class AsyncDirective extends Directive {\n  // As opposed to other Disconnectables, AsyncDirectives always get notified\n  // when the RootPart connection changes, so the public `isConnected`\n  // is a locally stored variable initialized via its part's getter and synced\n  // via `_$notifyDirectiveConnectionChanged`. This is cheaper than using\n  // the _$isConnected getter, which has to look back up the tree each time.\n  /**\n   * The connection state for this Directive.\n   */\n  isConnected!: boolean;\n\n  // @internal\n  override _$disconnectableChildren?: Set<Disconnectable> = undefined;\n  /**\n   * Initialize the part with internal fields\n   * @param part\n   * @param parent\n   * @param attributeIndex\n   */\n  override _$initialize(\n    part: Part,\n    parent: Disconnectable,\n    attributeIndex: number | undefined\n  ) {\n    super._$initialize(part, parent, attributeIndex);\n    addDisconnectableToParent(this);\n    this.isConnected = part._$isConnected;\n  }\n  // This property needs to remain unminified.\n  /**\n   * Called from the core code when a directive is going away from a part (in\n   * which case `shouldRemoveFromParent` should be true), and from the\n   * `setChildrenConnected` helper function when recursively changing the\n   * connection state of a tree (in which case `shouldRemoveFromParent` should\n   * be false).\n   *\n   * @param isConnected\n   * @param isClearingDirective - True when the directive itself is being\n   *     removed; false when the tree is being disconnected\n   * @internal\n   */\n  override ['_$notifyDirectiveConnectionChanged'](\n    isConnected: boolean,\n    isClearingDirective = true\n  ) {\n    if (isConnected !== this.isConnected) {\n      this.isConnected = isConnected;\n      if (isConnected) {\n        this.reconnected?.();\n      } else {\n        this.disconnected?.();\n      }\n    }\n    if (isClearingDirective) {\n      notifyChildrenConnectedChanged(this, isConnected);\n      removeDisconnectableFromParent(this);\n    }\n  }\n\n  /**\n   * Sets the value of the directive's Part outside the normal `update`/`render`\n   * lifecycle of a directive.\n   *\n   * This method should not be called synchronously from a directive's `update`\n   * or `render`.\n   *\n   * @param directive The directive to update\n   * @param value The value to set\n   */\n  setValue(value: unknown) {\n    if (isSingleExpression(this.__part as unknown as PartInfo)) {\n      this.__part._$setValue(value, this);\n    } else {\n      // this.__attributeIndex will be defined in this case, but\n      // assert it in dev mode\n      if (DEV_MODE && this.__attributeIndex === undefined) {\n        throw new Error(`Expected this.__attributeIndex to be a number`);\n      }\n      const newValues = [...(this.__part._$committedValue as Array<unknown>)];\n      newValues[this.__attributeIndex!] = value;\n      (this.__part as AttributePart)._$setValue(newValues, this, 0);\n    }\n  }\n\n  /**\n   * User callbacks for implementing logic to release any resources/subscriptions\n   * that may have been retained by this directive. Since directives may also be\n   * re-connected, `reconnected` should also be implemented to restore the\n   * working state of the directive prior to the next render.\n   */\n  protected disconnected() {}\n  protected reconnected() {}\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport {nothing, ElementPart} from '../lit-html.js';\nimport {directive, AsyncDirective} from '../async-directive.js';\n\n/**\n * Creates a new Ref object, which is container for a reference to an element.\n */\nexport const createRef = <T = Element>() => new Ref<T>();\n\n/**\n * An object that holds a ref value.\n */\nclass Ref<T = Element> {\n  /**\n   * The current Element value of the ref, or else `undefined` if the ref is no\n   * longer rendered.\n   */\n  readonly value?: T;\n}\n\nexport type {Ref};\n\ninterface RefInternal {\n  value: Element | undefined;\n}\n\n// When callbacks are used for refs, this map tracks the last value the callback\n// was called with, for ensuring a directive doesn't clear the ref if the ref\n// has already been rendered to a new spot. It is double-keyed on both the\n// context (`options.host`) and the callback, since we auto-bind class methods\n// to `options.host`.\nconst lastElementForContextAndCallback = new WeakMap<\n  object,\n  WeakMap<Function, Element | undefined>\n>();\n\nexport type RefOrCallback<T = Element> = Ref<T> | ((el: T | undefined) => void);\n\nclass RefDirective extends AsyncDirective {\n  private _element?: Element;\n  private _ref?: RefOrCallback;\n  private _context?: object;\n\n  render(_ref?: RefOrCallback) {\n    return nothing;\n  }\n\n  override update(part: ElementPart, [ref]: Parameters<this['render']>) {\n    const refChanged = ref !== this._ref;\n    if (refChanged && this._ref !== undefined) {\n      // The ref passed to the directive has changed;\n      // unset the previous ref's value\n      this._updateRefValue(undefined);\n    }\n    if (refChanged || this._lastElementForRef !== this._element) {\n      // We either got a new ref or this is the first render;\n      // store the ref/element & update the ref value\n      this._ref = ref;\n      this._context = part.options?.host;\n      this._updateRefValue((this._element = part.element));\n    }\n    return nothing;\n  }\n\n  private _updateRefValue(element: Element | undefined) {\n    if (!this.isConnected) {\n      element = undefined;\n    }\n    if (typeof this._ref === 'function') {\n      // If the current ref was called with a previous value, call with\n      // `undefined`; We do this to ensure callbacks are called in a consistent\n      // way regardless of whether a ref might be moving up in the tree (in\n      // which case it would otherwise be called with the new value before the\n      // previous one unsets it) and down in the tree (where it would be unset\n      // before being set). Note that element lookup is keyed by\n      // both the context and the callback, since we allow passing unbound\n      // functions that are called on options.host, and we want to treat\n      // these as unique \"instances\" of a function.\n      const context = this._context ?? globalThis;\n      let lastElementForCallback =\n        lastElementForContextAndCallback.get(context);\n      if (lastElementForCallback === undefined) {\n        lastElementForCallback = new WeakMap();\n        lastElementForContextAndCallback.set(context, lastElementForCallback);\n      }\n      if (lastElementForCallback.get(this._ref) !== undefined) {\n        this._ref.call(this._context, undefined);\n      }\n      lastElementForCallback.set(this._ref, element);\n      // Call the ref with the new element value\n      if (element !== undefined) {\n        this._ref.call(this._context, element);\n      }\n    } else {\n      (this._ref as RefInternal)!.value = element;\n    }\n  }\n\n  private get _lastElementForRef() {\n    return typeof this._ref === 'function'\n      ? lastElementForContextAndCallback\n          .get(this._context ?? globalThis)\n          ?.get(this._ref)\n      : this._ref?.value;\n  }\n\n  override disconnected() {\n    // Only clear the box if our element is still the one in it (i.e. another\n    // directive instance hasn't rendered its element to it before us); that\n    // only happens in the event of the directive being cleared (not via manual\n    // disconnection)\n    if (this._lastElementForRef === this._element) {\n      this._updateRefValue(undefined);\n    }\n  }\n\n  override reconnected() {\n    // If we were manually disconnected, we can safely put our element back in\n    // the box, since no rendering could have occurred to change its state\n    this._updateRefValue(this._element);\n  }\n}\n\n/**\n * Sets the value of a Ref object or calls a ref callback with the element it's\n * bound to.\n *\n * A Ref object acts as a container for a reference to an element. A ref\n * callback is a function that takes an element as its only argument.\n *\n * The ref directive sets the value of the Ref object or calls the ref callback\n * during rendering, if the referenced element changed.\n *\n * Note: If a ref callback is rendered to a different element position or is\n * removed in a subsequent render, it will first be called with `undefined`,\n * followed by another call with the new element it was rendered to (if any).\n *\n * ```js\n * // Using Ref object\n * const inputRef = createRef();\n * render(html`<input ${ref(inputRef)}>`, container);\n * inputRef.value.focus();\n *\n * // Using callback\n * const callback = (inputElement) => inputElement.focus();\n * render(html`<input ${ref(callback)}>`, container);\n * ```\n */\nexport const ref = directive(RefDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {RefDirective};\n","/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n// Any new exports need to be added to the export statement in\n// `packages/lit/src/index.all.ts`.\n\nimport {\n  html as coreHtml,\n  svg as coreSvg,\n  mathml as coreMathml,\n  TemplateResult,\n} from './lit-html.js';\n\nexport interface StaticValue {\n  /** The value to interpolate as-is into the template. */\n  _$litStatic$: string;\n\n  /**\n   * A value that can't be decoded from ordinary JSON, make it harder for\n   * an attacker-controlled data that goes through JSON.parse to produce a valid\n   * StaticValue.\n   */\n  r: typeof brand;\n}\n\n/**\n * Prevents JSON injection attacks.\n *\n * The goals of this brand:\n *   1) fast to check\n *   2) code is small on the wire\n *   3) multiple versions of Lit in a single page will all produce mutually\n *      interoperable StaticValues\n *   4) normal JSON.parse (without an unusual reviver) can not produce a\n *      StaticValue\n *\n * Symbols satisfy (1), (2), and (4). We use Symbol.for to satisfy (3), but\n * we don't care about the key, so we break ties via (2) and use the empty\n * string.\n */\nconst brand = Symbol.for('');\n\n/** Safely extracts the string part of a StaticValue. */\nconst unwrapStaticValue = (value: unknown): string | undefined => {\n  if ((value as Partial<StaticValue>)?.r !== brand) {\n    return undefined;\n  }\n  return (value as Partial<StaticValue>)?.['_$litStatic$'];\n};\n\n/**\n * Wraps a string so that it behaves like part of the static template\n * strings instead of a dynamic value.\n *\n * Users must take care to ensure that adding the static string to the template\n * results in well-formed HTML, or else templates may break unexpectedly.\n *\n * Note that this function is unsafe to use on untrusted content, as it will be\n * directly parsed into HTML. Do not pass user input to this function\n * without sanitizing it.\n *\n * Static values can be changed, but they will cause a complete re-render\n * since they effectively create a new template.\n */\nexport const unsafeStatic = (value: string): StaticValue => ({\n  ['_$litStatic$']: value,\n  r: brand,\n});\n\nconst textFromStatic = (value: StaticValue) => {\n  if (value['_$litStatic$'] !== undefined) {\n    return value['_$litStatic$'];\n  } else {\n    throw new Error(\n      `Value passed to 'literal' function must be a 'literal' result: ${value}. Use 'unsafeStatic' to pass non-literal values, but\n            take care to ensure page security.`\n    );\n  }\n};\n\n/**\n * Tags a string literal so that it behaves like part of the static template\n * strings instead of a dynamic value.\n *\n * The only values that may be used in template expressions are other tagged\n * `literal` results or `unsafeStatic` values (note that untrusted content\n * should never be passed to `unsafeStatic`).\n *\n * Users must take care to ensure that adding the static string to the template\n * results in well-formed HTML, or else templates may break unexpectedly.\n *\n * Static values can be changed, but they will cause a complete re-render since\n * they effectively create a new template.\n */\nexport const literal = (\n  strings: TemplateStringsArray,\n  ...values: unknown[]\n): StaticValue => ({\n  ['_$litStatic$']: values.reduce(\n    (acc, v, idx) => acc + textFromStatic(v as StaticValue) + strings[idx + 1],\n    strings[0]\n  ) as string,\n  r: brand,\n});\n\nconst stringsCache = new Map<string, TemplateStringsArray>();\n\n/**\n * Wraps a lit-html template tag (`html` or `svg`) to add static value support.\n */\nexport const withStatic =\n  (coreTag: typeof coreHtml | typeof coreSvg | typeof coreMathml) =>\n  (strings: TemplateStringsArray, ...values: unknown[]): TemplateResult => {\n    const l = values.length;\n    let staticValue: string | undefined;\n    let dynamicValue: unknown;\n    const staticStrings: Array<string> = [];\n    const dynamicValues: Array<unknown> = [];\n    let i = 0;\n    let hasStatics = false;\n    let s: string;\n\n    while (i < l) {\n      s = strings[i];\n      // Collect any unsafeStatic values, and their following template strings\n      // so that we treat a run of template strings and unsafe static values as\n      // a single template string.\n      while (\n        i < l &&\n        ((dynamicValue = values[i]),\n        (staticValue = unwrapStaticValue(dynamicValue))) !== undefined\n      ) {\n        s += staticValue + strings[++i];\n        hasStatics = true;\n      }\n      // If the last value is static, we don't need to push it.\n      if (i !== l) {\n        dynamicValues.push(dynamicValue);\n      }\n      staticStrings.push(s);\n      i++;\n    }\n    // If the last value isn't static (which would have consumed the last\n    // string), then we need to add the last string.\n    if (i === l) {\n      staticStrings.push(strings[l]);\n    }\n\n    if (hasStatics) {\n      const key = staticStrings.join('$$lit$$');\n      strings = stringsCache.get(key)!;\n      if (strings === undefined) {\n        // Beware: in general this pattern is unsafe, and doing so may bypass\n        // lit's security checks and allow an attacker to execute arbitrary\n        // code and inject arbitrary content.\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (staticStrings as any).raw = staticStrings;\n        stringsCache.set(\n          key,\n          (strings = staticStrings as unknown as TemplateStringsArray)\n        );\n      }\n      values = dynamicValues;\n    }\n    return coreTag(strings, ...values);\n  };\n\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n *\n * Includes static value support from `lit-html/static.js`.\n */\nexport const html = withStatic(coreHtml);\n\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n *\n * Includes static value support from `lit-html/static.js`.\n */\nexport const svg = withStatic(coreSvg);\n\n/**\n * Interprets a template literal as MathML fragment that can efficiently render\n * to and update a container.\n *\n * Includes static value support from `lit-html/static.js`.\n */\nexport const mathml = withStatic(coreMathml);\n"],"names":["setProxy","controller","host","key","isReactive","assignedToProp","initialExports","genericHost","controllerValueChanged","exports","hostValueChanged","controllerUpdatedExports","component","manager","W","onUpdate","changes","has","value","O","isReadOnly","constructor","elementProperties","get","readOnly","watchExports","bypassReadOnly","makeController","proxy","makeGenericController","FunctionalController","Controller","super","originalExports","this","setAmbientComponent","constructorChangedExports","isPromise","setProvisionalExports","resolved","then","result","catchUpLifecycle","catch","error","P","reject","console","onLoad","async","queueMicrotask","Class","args","ambientControllers","retrieveParentControllers","instance","setParentController","at","bind","setAmbientChildController","hostCandidates","reverse","trackKey","resolution","useWatchAttributes","attributes","callback","AttributeWatchController","isServer","MutationObserver","mutations","forEach","mutation","includes","attributeName","call","el","getAttribute","oldValue","hostConnected","attribute","hasAttribute","observe","attributeOldValue","attributeFilter","hostDisconnected","disconnect","toFunction","makeT9nController","getAssetPath","options","locale","getElementLocales","pending","lang","t9nLocale","componentWithOverrides","onLifecycle","startLocaleObserver","t9nStrings","withoutOverrides","label","componentLabel","applyOverrides","messageOverrides","name","currentValue","rawMessages","updated","deepMerge","blocking","ready","original","overwrites","merged","Object","entries","constrainHeadingLevel","level","Math","min","max","ceil","Heading","children","props","DynamicHtmlTag","unsafeStatic","literal","keyed","html","safeClassMap","class","loggedDeprecations","Set","logLevels","trace","debug","info","warn","off","forwardToConsole","data","logLevel","willLog","listFormatter","logger","message","deprecated","context","suggested","removalVersion","add","multiSuggestions","Array","isArray","Intl","ListFormat","style","type","format","map","suggestion","createObserver","Observer","ExtendedMutationObserver","window","observedEntry","target","push","unobserve","newObservedEntries","filter","observed","takeRecords","IntersectionObserver","ResizeObserver","getObserver","useT9n","CSS","ICONS","styles","css","TipManager","LitElement","arguments","messages","mutationObserver","setUpTips","closed","calciteTipManagerClose","createEvent","cancelable","properties","direction","state","groupTitle","selectedIndex","tips","total","reflect","Boolean","headingLevel","Number","nextTip","nextIndex","previousTip","previousIndex","connectedCallback","childList","subtree","load","willUpdate","hasUpdated","selectedChangeHandler","updateGroupTitle","loaded","disconnectedCallback","showSelectedTip","from","querySelectorAll","length","selectedTip","querySelector","indexOf","tip","closeDisabled","hideTipManager","emit","index","isSelected","selected","hidden","tipParent","closest","defaultGroupTitle","previousClicked","nextClicked","tipManagerKeyDownHandler","event","container","preventDefault","storeContainerRef","renderPagination","dir","getElementDir","nextLabel","next","previousLabel","previous","paginationLabel","defaultPaginationLabel","render","closeLabel","close","ref","customElement","i","t","e","r","update","s","notifyChildrenConnectedChanged","_$AN","_$AO","o","_$AM","delete","size","c","h","n","_$AH","CHILD","_$AP","_$AQ","f","_$AT","isConnected","_$AU","reconnected","disconnected","setValue","_$Ct","_$AI","_$Ci","createRef","WeakMap","G","rt","lt","ct","ht","element","globalThis","set","a","Symbol","for","_$litStatic$","reduce","Error","l","Map","u","$","join","raw"],"sourceRoot":""}