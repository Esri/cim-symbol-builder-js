{"version":3,"file":"static/js/73889.f324ad18.chunk.js","mappings":"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","sources":["../node_modules/@esri/calcite-components/dist/chunks/array.js","../node_modules/@esri/calcite-components/dist/chunks/component.js","../node_modules/@esri/calcite-components/dist/chunks/key.js","../node_modules/@esri/calcite-components/dist/chunks/logger.js","../node_modules/@esri/calcite-components/dist/chunks/resources2.js","../node_modules/@esri/calcite-components/dist/components/calcite-action-menu/customElement.js","../node_modules/lit-html/src/async-directive.ts","../node_modules/lit-html/src/directives/ref.ts"],"sourcesContent":["/*! All material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\nv3.2.1 */\nfunction getRoundRobinIndex(index, total) {\n  return (index + total) % total;\n}\nexport {\n  getRoundRobinIndex as g\n};\n","/*! All material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\nv3.2.1 */\nimport { l as logger } from \"./logger.js\";\nfunction getIconScale(componentScale) {\n  return componentScale === \"l\" ? \"m\" : \"s\";\n}\nfunction warnIfMissingRequiredProp(component, newProp, deprecatedProp) {\n  if (!component[newProp] && !component[deprecatedProp]) {\n    logger.warn(`[${component.el.localName}] \"${newProp.toString()}\" or \"${deprecatedProp.toString()}\" is required.`);\n  }\n}\nfunction isHidden(el) {\n  return el.hidden || el.itemHidden;\n}\nasync function componentFocusable(component) {\n  await component.componentOnReady();\n  await component.updateComplete;\n}\nexport {\n  componentFocusable as c,\n  getIconScale as g,\n  isHidden as i,\n  warnIfMissingRequiredProp as w\n};\n","/*! All material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\nv3.2.1 */\nfunction isActivationKey(key) {\n  return key === \"Enter\" || key === \" \";\n}\nconst numberKeys = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"];\nexport {\n  isActivationKey as i,\n  numberKeys as n\n};\n","/*! All material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\nv3.2.1 */\nimport { l as logLevel } from \"./runtime.js\";\nconst loggedDeprecations = /* @__PURE__ */ new Set();\nconst logLevels = {\n  trace: 0,\n  debug: 1,\n  info: 2,\n  warn: 4,\n  error: 8,\n  off: 10\n};\nfunction willLog(level) {\n  return logLevels[level] >= logLevels[logLevel];\n}\nfunction forwardToConsole(level, ...data) {\n  if (!willLog(level)) {\n    return;\n  }\n  const badgeTemplate = \"%ccalcite\";\n  const badgeStyle = \"background: #007AC2; color: #fff; border-radius: 4px; padding: 2px 4px;\";\n  console[level].call(this, badgeTemplate, badgeStyle, ...data);\n}\nlet listFormatter;\nconst logger = {\n  debug: (message) => forwardToConsole(\"debug\", message),\n  info: (message) => forwardToConsole(\"info\", message),\n  warn: (message) => forwardToConsole(\"warn\", message),\n  error: (message) => forwardToConsole(\"error\", message),\n  trace: (message) => forwardToConsole(\"trace\", message),\n  deprecated\n};\nfunction deprecated(context, { component, name, suggested, removalVersion }) {\n  const key = `${context}:${context === \"component\" ? \"\" : component}${name}`;\n  if (loggedDeprecations.has(key)) {\n    return;\n  }\n  loggedDeprecations.add(key);\n  const multiSuggestions = Array.isArray(suggested);\n  if (multiSuggestions && !listFormatter) {\n    listFormatter = new Intl.ListFormat(\"en\", { style: \"long\", type: \"disjunction\" });\n  }\n  const message = `[${name}] ${context} is deprecated and will be removed in ${removalVersion === \"future\" ? `a future version` : `v${removalVersion}`}.${suggested ? ` Use ${multiSuggestions ? listFormatter.format(suggested.map((suggestion) => `\"${suggestion}\"`)) : `\"${suggested}\"`} instead.` : \"\"}`;\n  forwardToConsole(\"warn\", message);\n}\nexport {\n  logger as l\n};\n","/*! All material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\nv3.2.1 */\nconst CSS = {\n  menu: \"menu\",\n  defaultTrigger: \"default-trigger\"\n};\nconst SLOTS = {\n  tooltip: \"tooltip\",\n  trigger: \"trigger\"\n};\nconst ICONS = {\n  menu: \"ellipsis\"\n};\nconst activeAttr = \"data-active\";\nexport {\n  CSS as C,\n  ICONS as I,\n  SLOTS as S,\n  activeAttr as a\n};\n","/*! All material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\nv3.2.1 */\nimport { c as customElement } from \"../../chunks/runtime.js\";\nimport { ref } from \"lit-html/directives/ref.js\";\nimport { html, nothing } from \"lit\";\nimport { LitElement, createEvent, safeClassMap } from \"@arcgis/lumina\";\nimport { g as getRoundRobinIndex } from \"../../chunks/array.js\";\nimport { b as focusElement, t as toAriaBoolean } from \"../../chunks/dom.js\";\nimport { g as guid } from \"../../chunks/guid.js\";\nimport { i as isActivationKey } from \"../../chunks/key.js\";\nimport { c as componentFocusable } from \"../../chunks/component.js\";\nimport { a as activeAttr, S as SLOTS, I as ICONS, C as CSS } from \"../../chunks/resources2.js\";\nimport { css } from \"@lit/reactive-element/css-tag.js\";\nconst styles = css`:host{box-sizing:border-box;display:flex;flex-direction:column;font-size:var(--calcite-font-size-1)}::slotted(calcite-action-group:not(:last-of-type)){border-block-end-width:var(--calcite-border-width-sm)}.default-trigger{position:relative;block-size:100%;flex:0 1 auto;align-self:stretch}slot[name=trigger]::slotted(calcite-action),calcite-action::slotted([slot=trigger]){position:relative;block-size:100%;flex:0 1 auto;align-self:stretch}.menu{display:flex;max-block-size:45vh;flex-direction:column;flex-wrap:nowrap;overflow-y:auto;overflow-x:hidden;outline:2px solid transparent;outline-offset:2px;gap:var(--calcite-action-menu-items-space, 0)}:host([hidden]){display:none}[hidden]{display:none}`;\nconst SUPPORTED_MENU_NAV_KEYS = [\"ArrowUp\", \"ArrowDown\", \"End\", \"Home\"];\nclass ActionMenu extends LitElement {\n  constructor() {\n    super(...arguments);\n    this.guid = `calcite-action-menu-${guid()}`;\n    this.actionElements = [];\n    this.menuButtonClick = () => {\n      this.toggleOpen();\n    };\n    this.menuButtonId = `${this.guid}-menu-button`;\n    this.menuButtonKeyDown = (event) => {\n      const { key } = event;\n      const { actionElements, activeMenuItemIndex, open } = this;\n      if (!actionElements.length) {\n        return;\n      }\n      if (isActivationKey(key)) {\n        event.preventDefault();\n        if (!open) {\n          this.toggleOpen();\n          return;\n        }\n        const action = actionElements[activeMenuItemIndex];\n        if (action) {\n          action.click();\n        } else {\n          this.toggleOpen(false);\n        }\n      }\n      if (key === \"Tab\") {\n        this.open = false;\n        return;\n      }\n      if (key === \"Escape\") {\n        this.toggleOpen(false);\n        event.preventDefault();\n        return;\n      }\n      this.handleActionNavigation(event, key, actionElements);\n    };\n    this.menuId = `${this.guid}-menu`;\n    this._open = false;\n    this.updateAction = (action, index) => {\n      const { guid: guid2, activeMenuItemIndex } = this;\n      const id = `${guid2}-action-${index}`;\n      action.tabIndex = -1;\n      action.setAttribute(\"role\", \"menuitem\");\n      if (!action.id) {\n        action.id = id;\n      }\n      action.toggleAttribute(activeAttr, index === activeMenuItemIndex);\n    };\n    this.activeMenuItemIndex = -1;\n    this.appearance = \"solid\";\n    this.expanded = false;\n    this.overlayPositioning = \"absolute\";\n    this.placement = \"auto\";\n    this.scale = \"m\";\n    this.calciteActionMenuOpen = createEvent({ cancelable: false });\n  }\n  static {\n    this.properties = { activeMenuItemIndex: [16, {}, { state: true }], menuButtonEl: [16, {}, { state: true }], appearance: [3, {}, { reflect: true }], expanded: [7, {}, { reflect: true, type: Boolean }], flipPlacements: [0, {}, { attribute: false }], label: 1, open: [7, {}, { reflect: true, type: Boolean }], overlayPositioning: [3, {}, { reflect: true }], placement: [3, {}, { reflect: true }], scale: [3, {}, { reflect: true }] };\n  }\n  static {\n    this.styles = styles;\n  }\n  get open() {\n    return this._open;\n  }\n  set open(open) {\n    const oldOpen = this._open;\n    if (open !== oldOpen) {\n      this._open = open;\n      this.openHandler(open);\n    }\n  }\n  async setFocus() {\n    await componentFocusable(this);\n    return focusElement(this.menuButtonEl);\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    this.connectMenuButtonEl();\n  }\n  willUpdate(changes) {\n    if (changes.has(\"expanded\") && (this.hasUpdated || this.expanded !== false)) {\n      this.expandedHandler();\n    }\n    if (changes.has(\"activeMenuItemIndex\") && (this.hasUpdated || this.activeMenuItemIndex !== -1)) {\n      this.updateActions(this.actionElements);\n    }\n  }\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this.disconnectMenuButtonEl();\n  }\n  expandedHandler() {\n    this.open = false;\n    this.setTooltipReferenceElement();\n  }\n  openHandler(open) {\n    if (this.menuButtonEl) {\n      this.menuButtonEl.active = open;\n    }\n    if (this.popoverEl) {\n      this.popoverEl.open = open;\n    }\n    this.activeMenuItemIndex = this.open ? 0 : -1;\n    this.calciteActionMenuOpen.emit();\n    this.setTooltipReferenceElement();\n  }\n  connectMenuButtonEl() {\n    const { menuButtonId, menuId, open, label } = this;\n    const menuButtonEl = this.slottedMenuButtonEl || this.defaultMenuButtonEl;\n    if (this.menuButtonEl === menuButtonEl) {\n      return;\n    }\n    this.disconnectMenuButtonEl();\n    this.menuButtonEl = menuButtonEl;\n    this.setTooltipReferenceElement();\n    if (!menuButtonEl) {\n      return;\n    }\n    menuButtonEl.active = open;\n    menuButtonEl.setAttribute(\"aria-controls\", menuId);\n    menuButtonEl.setAttribute(\"aria-expanded\", toAriaBoolean(open));\n    menuButtonEl.setAttribute(\"aria-haspopup\", \"true\");\n    if (!menuButtonEl.id) {\n      menuButtonEl.id = menuButtonId;\n    }\n    if (!menuButtonEl.label) {\n      menuButtonEl.label = label;\n    }\n    if (!menuButtonEl.text) {\n      menuButtonEl.text = label;\n    }\n    menuButtonEl.addEventListener(\"click\", this.menuButtonClick);\n    menuButtonEl.addEventListener(\"keydown\", this.menuButtonKeyDown);\n  }\n  disconnectMenuButtonEl() {\n    const { menuButtonEl } = this;\n    if (!menuButtonEl) {\n      return;\n    }\n    menuButtonEl.removeEventListener(\"click\", this.menuButtonClick);\n    menuButtonEl.removeEventListener(\"keydown\", this.menuButtonKeyDown);\n    this.menuButtonEl = null;\n  }\n  setMenuButtonEl(event) {\n    const actions = event.target.assignedElements({\n      flatten: true\n    }).filter((el) => el?.matches(\"calcite-action\"));\n    this.slottedMenuButtonEl = actions[0];\n    this.connectMenuButtonEl();\n  }\n  setDefaultMenuButtonEl(el) {\n    this.defaultMenuButtonEl = el;\n    if (el) {\n      this.connectMenuButtonEl();\n    }\n  }\n  setPopoverEl(el) {\n    if (!el) {\n      return;\n    }\n    this.popoverEl = el;\n    el.open = this.open;\n  }\n  handleCalciteActionClick() {\n    this.open = false;\n    this.setFocus();\n  }\n  updateTooltip(event) {\n    const tooltips = event.target.assignedElements({\n      flatten: true\n    }).filter((el) => el?.matches(\"calcite-tooltip\"));\n    this.tooltipEl = tooltips[0];\n    this.setTooltipReferenceElement();\n  }\n  setTooltipReferenceElement() {\n    const { tooltipEl, expanded, menuButtonEl, open } = this;\n    if (tooltipEl) {\n      tooltipEl.referenceElement = !expanded && !open ? menuButtonEl : null;\n    }\n  }\n  updateActions(actions) {\n    actions?.forEach(this.updateAction);\n  }\n  handleDefaultSlotChange(event) {\n    const actions = event.target.assignedElements({\n      flatten: true\n    }).reduce((previousValue, currentValue) => {\n      if (currentValue?.matches(\"calcite-action\")) {\n        previousValue.push(currentValue);\n        return previousValue;\n      }\n      if (currentValue?.matches(\"calcite-action-group\")) {\n        return previousValue.concat(Array.from(currentValue.querySelectorAll(\"calcite-action\")));\n      }\n      return previousValue;\n    }, []);\n    this.actionElements = actions.filter((action) => !action.disabled && !action.hidden);\n  }\n  isValidKey(key, supportedKeys) {\n    return !!supportedKeys.find((k) => k === key);\n  }\n  handleActionNavigation(event, key, actions) {\n    if (!this.isValidKey(key, SUPPORTED_MENU_NAV_KEYS)) {\n      return;\n    }\n    event.preventDefault();\n    if (!this.open) {\n      this.toggleOpen();\n      if (key === \"Home\" || key === \"ArrowDown\") {\n        this.activeMenuItemIndex = 0;\n      }\n      if (key === \"End\" || key === \"ArrowUp\") {\n        this.activeMenuItemIndex = actions.length - 1;\n      }\n      return;\n    }\n    if (key === \"Home\") {\n      this.activeMenuItemIndex = 0;\n    }\n    if (key === \"End\") {\n      this.activeMenuItemIndex = actions.length - 1;\n    }\n    const currentIndex = this.activeMenuItemIndex;\n    if (key === \"ArrowUp\") {\n      this.activeMenuItemIndex = getRoundRobinIndex(Math.max(currentIndex - 1, -1), actions.length);\n    }\n    if (key === \"ArrowDown\") {\n      this.activeMenuItemIndex = getRoundRobinIndex(currentIndex + 1, actions.length);\n    }\n  }\n  toggleOpen(value = !this.open) {\n    this.open = value;\n  }\n  handlePopoverOpen(event) {\n    event.stopPropagation();\n    this.open = true;\n    this.setFocus();\n  }\n  handlePopoverClose(event) {\n    event.stopPropagation();\n    this.open = false;\n  }\n  renderMenuButton() {\n    const { appearance, label, scale, expanded } = this;\n    const menuButtonSlot = html`<slot name=${SLOTS.trigger} @slotchange=${this.setMenuButtonEl}><calcite-action .appearance=${appearance} class=${safeClassMap(CSS.defaultTrigger)} .icon=${ICONS.menu} .scale=${scale} .text=${label} .textEnabled=${expanded} ${ref(this.setDefaultMenuButtonEl)}></calcite-action></slot>`;\n    return menuButtonSlot;\n  }\n  renderMenuItems() {\n    const { actionElements, activeMenuItemIndex, menuId, menuButtonEl, label, placement, overlayPositioning, flipPlacements } = this;\n    const activeAction = actionElements[activeMenuItemIndex];\n    const activeDescendantId = activeAction?.id || null;\n    return html`<calcite-popover auto-close .flipPlacements=${flipPlacements} focus-trap-disabled .label=${label} offset-distance=0 @calcitePopoverClose=${this.handlePopoverClose} @calcitePopoverOpen=${this.handlePopoverOpen} .overlayPositioning=${overlayPositioning} .placement=${placement} pointer-disabled .referenceElement=${menuButtonEl} trigger-disabled ${ref(this.setPopoverEl)}><div aria-activedescendant=${activeDescendantId ?? nothing} aria-labelledby=${menuButtonEl?.id ?? nothing} class=${safeClassMap(CSS.menu)} id=${menuId ?? nothing} @click=${this.handleCalciteActionClick} role=menu tabindex=-1><slot @slotchange=${this.handleDefaultSlotChange}></slot></div></calcite-popover>`;\n  }\n  render() {\n    return html`${this.renderMenuButton()}${this.renderMenuItems()}<slot name=${SLOTS.tooltip} @slotchange=${this.updateTooltip}></slot>`;\n  }\n}\ncustomElement(\"calcite-action-menu\", ActionMenu);\nexport {\n  ActionMenu\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * Overview:\n *\n * This module is designed to add support for an async `setValue` API and\n * `disconnected` callback to directives with the least impact on the core\n * runtime or payload when that feature is not used.\n *\n * The strategy is to introduce a `AsyncDirective` subclass of\n * `Directive` that climbs the \"parent\" tree in its constructor to note which\n * branches of lit-html's \"logical tree\" of data structures contain such\n * directives and thus need to be crawled when a subtree is being cleared (or\n * manually disconnected) in order to run the `disconnected` callback.\n *\n * The \"nodes\" of the logical tree include Parts, TemplateInstances (for when a\n * TemplateResult is committed to a value of a ChildPart), and Directives; these\n * all implement a common interface called `DisconnectableChild`. Each has a\n * `_$parent` reference which is set during construction in the core code, and a\n * `_$disconnectableChildren` field which is initially undefined.\n *\n * The sparse tree created by means of the `AsyncDirective` constructor\n * crawling up the `_$parent` tree and placing a `_$disconnectableChildren` Set\n * on each parent that includes each child that contains a\n * `AsyncDirective` directly or transitively via its children. In order to\n * notify connection state changes and disconnect (or reconnect) a tree, the\n * `_$notifyConnectionChanged` API is patched onto ChildParts as a directive\n * climbs the parent tree, which is called by the core when clearing a part if\n * it exists. When called, that method iterates over the sparse tree of\n * Set<DisconnectableChildren> built up by AsyncDirectives, and calls\n * `_$notifyDirectiveConnectionChanged` on any directives that are encountered\n * in that tree, running the required callbacks.\n *\n * A given \"logical tree\" of lit-html data-structures might look like this:\n *\n *  ChildPart(N1) _$dC=[D2,T3]\n *   ._directive\n *     AsyncDirective(D2)\n *   ._value // user value was TemplateResult\n *     TemplateInstance(T3) _$dC=[A4,A6,N10,N12]\n *      ._$parts[]\n *        AttributePart(A4) _$dC=[D5]\n *         ._directives[]\n *           AsyncDirective(D5)\n *        AttributePart(A6) _$dC=[D7,D8]\n *         ._directives[]\n *           AsyncDirective(D7)\n *           Directive(D8) _$dC=[D9]\n *            ._directive\n *              AsyncDirective(D9)\n *        ChildPart(N10) _$dC=[D11]\n *         ._directive\n *           AsyncDirective(D11)\n *         ._value\n *           string\n *        ChildPart(N12) _$dC=[D13,N14,N16]\n *         ._directive\n *           AsyncDirective(D13)\n *         ._value // user value was iterable\n *           Array<ChildPart>\n *             ChildPart(N14) _$dC=[D15]\n *              ._value\n *                string\n *             ChildPart(N16) _$dC=[D17,T18]\n *              ._directive\n *                AsyncDirective(D17)\n *              ._value // user value was TemplateResult\n *                TemplateInstance(T18) _$dC=[A19,A21,N25]\n *                 ._$parts[]\n *                   AttributePart(A19) _$dC=[D20]\n *                    ._directives[]\n *                      AsyncDirective(D20)\n *                   AttributePart(A21) _$dC=[22,23]\n *                    ._directives[]\n *                      AsyncDirective(D22)\n *                      Directive(D23) _$dC=[D24]\n *                       ._directive\n *                         AsyncDirective(D24)\n *                   ChildPart(N25) _$dC=[D26]\n *                    ._directive\n *                      AsyncDirective(D26)\n *                    ._value\n *                      string\n *\n * Example 1: The directive in ChildPart(N12) updates and returns `nothing`. The\n * ChildPart will _clear() itself, and so we need to disconnect the \"value\" of\n * the ChildPart (but not its directive). In this case, when `_clear()` calls\n * `_$notifyConnectionChanged()`, we don't iterate all of the\n * _$disconnectableChildren, rather we do a value-specific disconnection: i.e.\n * since the _value was an Array<ChildPart> (because an iterable had been\n * committed), we iterate the array of ChildParts (N14, N16) and run\n * `setConnected` on them (which does recurse down the full tree of\n * `_$disconnectableChildren` below it, and also removes N14 and N16 from N12's\n * `_$disconnectableChildren`). Once the values have been disconnected, we then\n * check whether the ChildPart(N12)'s list of `_$disconnectableChildren` is empty\n * (and would remove it from its parent TemplateInstance(T3) if so), but since\n * it would still contain its directive D13, it stays in the disconnectable\n * tree.\n *\n * Example 2: In the course of Example 1, `setConnected` will reach\n * ChildPart(N16); in this case the entire part is being disconnected, so we\n * simply iterate all of N16's `_$disconnectableChildren` (D17,T18) and\n * recursively run `setConnected` on them. Note that we only remove children\n * from `_$disconnectableChildren` for the top-level values being disconnected\n * on a clear; doing this bookkeeping lower in the tree is wasteful since it's\n * all being thrown away.\n *\n * Example 3: If the LitElement containing the entire tree above becomes\n * disconnected, it will run `childPart.setConnected()` (which calls\n * `childPart._$notifyConnectionChanged()` if it exists); in this case, we\n * recursively run `setConnected()` over the entire tree, without removing any\n * children from `_$disconnectableChildren`, since this tree is required to\n * re-connect the tree, which does the same operation, simply passing\n * `isConnected: true` down the tree, signaling which callback to run.\n */\n\nimport {AttributePart, ChildPart, Disconnectable, Part} from './lit-html.js';\nimport {isSingleExpression} from './directive-helpers.js';\nimport {Directive, PartInfo, PartType} from './directive.js';\nexport * from './directive.js';\n\nconst DEV_MODE = true;\n\n/**\n * Recursively walks down the tree of Parts/TemplateInstances/Directives to set\n * the connected state of directives and run `disconnected`/ `reconnected`\n * callbacks.\n *\n * @return True if there were children to disconnect; false otherwise\n */\nconst notifyChildrenConnectedChanged = (\n  parent: Disconnectable,\n  isConnected: boolean\n): boolean => {\n  const children = parent._$disconnectableChildren;\n  if (children === undefined) {\n    return false;\n  }\n  for (const obj of children) {\n    // The existence of `_$notifyDirectiveConnectionChanged` is used as a \"brand\" to\n    // disambiguate AsyncDirectives from other DisconnectableChildren\n    // (as opposed to using an instanceof check to know when to call it); the\n    // redundancy of \"Directive\" in the API name is to avoid conflicting with\n    // `_$notifyConnectionChanged`, which exists `ChildParts` which are also in\n    // this list\n    // Disconnect Directive (and any nested directives contained within)\n    // This property needs to remain unminified.\n    (obj as AsyncDirective)['_$notifyDirectiveConnectionChanged']?.(\n      isConnected,\n      false\n    );\n    // Disconnect Part/TemplateInstance\n    notifyChildrenConnectedChanged(obj, isConnected);\n  }\n  return true;\n};\n\n/**\n * Removes the given child from its parent list of disconnectable children, and\n * if the parent list becomes empty as a result, removes the parent from its\n * parent, and so forth up the tree when that causes subsequent parent lists to\n * become empty.\n */\nconst removeDisconnectableFromParent = (obj: Disconnectable) => {\n  let parent, children;\n  do {\n    if ((parent = obj._$parent) === undefined) {\n      break;\n    }\n    children = parent._$disconnectableChildren!;\n    children.delete(obj);\n    obj = parent;\n  } while (children?.size === 0);\n};\n\nconst addDisconnectableToParent = (obj: Disconnectable) => {\n  // Climb the parent tree, creating a sparse tree of children needing\n  // disconnection\n  for (let parent; (parent = obj._$parent); obj = parent) {\n    let children = parent._$disconnectableChildren;\n    if (children === undefined) {\n      parent._$disconnectableChildren = children = new Set();\n    } else if (children.has(obj)) {\n      // Once we've reached a parent that already contains this child, we\n      // can short-circuit\n      break;\n    }\n    children.add(obj);\n    installDisconnectAPI(parent);\n  }\n};\n\n/**\n * Changes the parent reference of the ChildPart, and updates the sparse tree of\n * Disconnectable children accordingly.\n *\n * Note, this method will be patched onto ChildPart instances and called from\n * the core code when parts are moved between different parents.\n */\nfunction reparentDisconnectables(this: ChildPart, newParent: Disconnectable) {\n  if (this._$disconnectableChildren !== undefined) {\n    removeDisconnectableFromParent(this);\n    this._$parent = newParent;\n    addDisconnectableToParent(this);\n  } else {\n    this._$parent = newParent;\n  }\n}\n\n/**\n * Sets the connected state on any directives contained within the committed\n * value of this part (i.e. within a TemplateInstance or iterable of\n * ChildParts) and runs their `disconnected`/`reconnected`s, as well as within\n * any directives stored on the ChildPart (when `valueOnly` is false).\n *\n * `isClearingValue` should be passed as `true` on a top-level part that is\n * clearing itself, and not as a result of recursively disconnecting directives\n * as part of a `clear` operation higher up the tree. This both ensures that any\n * directive on this ChildPart that produced a value that caused the clear\n * operation is not disconnected, and also serves as a performance optimization\n * to avoid needless bookkeeping when a subtree is going away; when clearing a\n * subtree, only the top-most part need to remove itself from the parent.\n *\n * `fromPartIndex` is passed only in the case of a partial `_clear` running as a\n * result of truncating an iterable.\n *\n * Note, this method will be patched onto ChildPart instances and called from the\n * core code when parts are cleared or the connection state is changed by the\n * user.\n */\nfunction notifyChildPartConnectedChanged(\n  this: ChildPart,\n  isConnected: boolean,\n  isClearingValue = false,\n  fromPartIndex = 0\n) {\n  const value = this._$committedValue;\n  const children = this._$disconnectableChildren;\n  if (children === undefined || children.size === 0) {\n    return;\n  }\n  if (isClearingValue) {\n    if (Array.isArray(value)) {\n      // Iterable case: Any ChildParts created by the iterable should be\n      // disconnected and removed from this ChildPart's disconnectable\n      // children (starting at `fromPartIndex` in the case of truncation)\n      for (let i = fromPartIndex; i < value.length; i++) {\n        notifyChildrenConnectedChanged(value[i], false);\n        removeDisconnectableFromParent(value[i]);\n      }\n    } else if (value != null) {\n      // TemplateInstance case: If the value has disconnectable children (will\n      // only be in the case that it is a TemplateInstance), we disconnect it\n      // and remove it from this ChildPart's disconnectable children\n      notifyChildrenConnectedChanged(value as Disconnectable, false);\n      removeDisconnectableFromParent(value as Disconnectable);\n    }\n  } else {\n    notifyChildrenConnectedChanged(this, isConnected);\n  }\n}\n\n/**\n * Patches disconnection API onto ChildParts.\n */\nconst installDisconnectAPI = (obj: Disconnectable) => {\n  if ((obj as ChildPart).type == PartType.CHILD) {\n    (obj as ChildPart)._$notifyConnectionChanged ??=\n      notifyChildPartConnectedChanged;\n    (obj as ChildPart)._$reparentDisconnectables ??= reparentDisconnectables;\n  }\n};\n\n/**\n * An abstract `Directive` base class whose `disconnected` method will be\n * called when the part containing the directive is cleared as a result of\n * re-rendering, or when the user calls `part.setConnected(false)` on\n * a part that was previously rendered containing the directive (as happens\n * when e.g. a LitElement disconnects from the DOM).\n *\n * If `part.setConnected(true)` is subsequently called on a\n * containing part, the directive's `reconnected` method will be called prior\n * to its next `update`/`render` callbacks. When implementing `disconnected`,\n * `reconnected` should also be implemented to be compatible with reconnection.\n *\n * Note that updates may occur while the directive is disconnected. As such,\n * directives should generally check the `this.isConnected` flag during\n * render/update to determine whether it is safe to subscribe to resources\n * that may prevent garbage collection.\n */\nexport abstract class AsyncDirective extends Directive {\n  // As opposed to other Disconnectables, AsyncDirectives always get notified\n  // when the RootPart connection changes, so the public `isConnected`\n  // is a locally stored variable initialized via its part's getter and synced\n  // via `_$notifyDirectiveConnectionChanged`. This is cheaper than using\n  // the _$isConnected getter, which has to look back up the tree each time.\n  /**\n   * The connection state for this Directive.\n   */\n  isConnected!: boolean;\n\n  // @internal\n  override _$disconnectableChildren?: Set<Disconnectable> = undefined;\n  /**\n   * Initialize the part with internal fields\n   * @param part\n   * @param parent\n   * @param attributeIndex\n   */\n  override _$initialize(\n    part: Part,\n    parent: Disconnectable,\n    attributeIndex: number | undefined\n  ) {\n    super._$initialize(part, parent, attributeIndex);\n    addDisconnectableToParent(this);\n    this.isConnected = part._$isConnected;\n  }\n  // This property needs to remain unminified.\n  /**\n   * Called from the core code when a directive is going away from a part (in\n   * which case `shouldRemoveFromParent` should be true), and from the\n   * `setChildrenConnected` helper function when recursively changing the\n   * connection state of a tree (in which case `shouldRemoveFromParent` should\n   * be false).\n   *\n   * @param isConnected\n   * @param isClearingDirective - True when the directive itself is being\n   *     removed; false when the tree is being disconnected\n   * @internal\n   */\n  override ['_$notifyDirectiveConnectionChanged'](\n    isConnected: boolean,\n    isClearingDirective = true\n  ) {\n    if (isConnected !== this.isConnected) {\n      this.isConnected = isConnected;\n      if (isConnected) {\n        this.reconnected?.();\n      } else {\n        this.disconnected?.();\n      }\n    }\n    if (isClearingDirective) {\n      notifyChildrenConnectedChanged(this, isConnected);\n      removeDisconnectableFromParent(this);\n    }\n  }\n\n  /**\n   * Sets the value of the directive's Part outside the normal `update`/`render`\n   * lifecycle of a directive.\n   *\n   * This method should not be called synchronously from a directive's `update`\n   * or `render`.\n   *\n   * @param directive The directive to update\n   * @param value The value to set\n   */\n  setValue(value: unknown) {\n    if (isSingleExpression(this.__part as unknown as PartInfo)) {\n      this.__part._$setValue(value, this);\n    } else {\n      // this.__attributeIndex will be defined in this case, but\n      // assert it in dev mode\n      if (DEV_MODE && this.__attributeIndex === undefined) {\n        throw new Error(`Expected this.__attributeIndex to be a number`);\n      }\n      const newValues = [...(this.__part._$committedValue as Array<unknown>)];\n      newValues[this.__attributeIndex!] = value;\n      (this.__part as AttributePart)._$setValue(newValues, this, 0);\n    }\n  }\n\n  /**\n   * User callbacks for implementing logic to release any resources/subscriptions\n   * that may have been retained by this directive. Since directives may also be\n   * re-connected, `reconnected` should also be implemented to restore the\n   * working state of the directive prior to the next render.\n   */\n  protected disconnected() {}\n  protected reconnected() {}\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport {nothing, ElementPart} from '../lit-html.js';\nimport {directive, AsyncDirective} from '../async-directive.js';\n\n/**\n * Creates a new Ref object, which is container for a reference to an element.\n */\nexport const createRef = <T = Element>() => new Ref<T>();\n\n/**\n * An object that holds a ref value.\n */\nclass Ref<T = Element> {\n  /**\n   * The current Element value of the ref, or else `undefined` if the ref is no\n   * longer rendered.\n   */\n  readonly value?: T;\n}\n\nexport type {Ref};\n\ninterface RefInternal {\n  value: Element | undefined;\n}\n\n// When callbacks are used for refs, this map tracks the last value the callback\n// was called with, for ensuring a directive doesn't clear the ref if the ref\n// has already been rendered to a new spot. It is double-keyed on both the\n// context (`options.host`) and the callback, since we auto-bind class methods\n// to `options.host`.\nconst lastElementForContextAndCallback = new WeakMap<\n  object,\n  WeakMap<Function, Element | undefined>\n>();\n\nexport type RefOrCallback<T = Element> = Ref<T> | ((el: T | undefined) => void);\n\nclass RefDirective extends AsyncDirective {\n  private _element?: Element;\n  private _ref?: RefOrCallback;\n  private _context?: object;\n\n  render(_ref?: RefOrCallback) {\n    return nothing;\n  }\n\n  override update(part: ElementPart, [ref]: Parameters<this['render']>) {\n    const refChanged = ref !== this._ref;\n    if (refChanged && this._ref !== undefined) {\n      // The ref passed to the directive has changed;\n      // unset the previous ref's value\n      this._updateRefValue(undefined);\n    }\n    if (refChanged || this._lastElementForRef !== this._element) {\n      // We either got a new ref or this is the first render;\n      // store the ref/element & update the ref value\n      this._ref = ref;\n      this._context = part.options?.host;\n      this._updateRefValue((this._element = part.element));\n    }\n    return nothing;\n  }\n\n  private _updateRefValue(element: Element | undefined) {\n    if (!this.isConnected) {\n      element = undefined;\n    }\n    if (typeof this._ref === 'function') {\n      // If the current ref was called with a previous value, call with\n      // `undefined`; We do this to ensure callbacks are called in a consistent\n      // way regardless of whether a ref might be moving up in the tree (in\n      // which case it would otherwise be called with the new value before the\n      // previous one unsets it) and down in the tree (where it would be unset\n      // before being set). Note that element lookup is keyed by\n      // both the context and the callback, since we allow passing unbound\n      // functions that are called on options.host, and we want to treat\n      // these as unique \"instances\" of a function.\n      const context = this._context ?? globalThis;\n      let lastElementForCallback =\n        lastElementForContextAndCallback.get(context);\n      if (lastElementForCallback === undefined) {\n        lastElementForCallback = new WeakMap();\n        lastElementForContextAndCallback.set(context, lastElementForCallback);\n      }\n      if (lastElementForCallback.get(this._ref) !== undefined) {\n        this._ref.call(this._context, undefined);\n      }\n      lastElementForCallback.set(this._ref, element);\n      // Call the ref with the new element value\n      if (element !== undefined) {\n        this._ref.call(this._context, element);\n      }\n    } else {\n      (this._ref as RefInternal)!.value = element;\n    }\n  }\n\n  private get _lastElementForRef() {\n    return typeof this._ref === 'function'\n      ? lastElementForContextAndCallback\n          .get(this._context ?? globalThis)\n          ?.get(this._ref)\n      : this._ref?.value;\n  }\n\n  override disconnected() {\n    // Only clear the box if our element is still the one in it (i.e. another\n    // directive instance hasn't rendered its element to it before us); that\n    // only happens in the event of the directive being cleared (not via manual\n    // disconnection)\n    if (this._lastElementForRef === this._element) {\n      this._updateRefValue(undefined);\n    }\n  }\n\n  override reconnected() {\n    // If we were manually disconnected, we can safely put our element back in\n    // the box, since no rendering could have occurred to change its state\n    this._updateRefValue(this._element);\n  }\n}\n\n/**\n * Sets the value of a Ref object or calls a ref callback with the element it's\n * bound to.\n *\n * A Ref object acts as a container for a reference to an element. A ref\n * callback is a function that takes an element as its only argument.\n *\n * The ref directive sets the value of the Ref object or calls the ref callback\n * during rendering, if the referenced element changed.\n *\n * Note: If a ref callback is rendered to a different element position or is\n * removed in a subsequent render, it will first be called with `undefined`,\n * followed by another call with the new element it was rendered to (if any).\n *\n * ```js\n * // Using Ref object\n * const inputRef = createRef();\n * render(html`<input ${ref(inputRef)}>`, container);\n * inputRef.value.focus();\n *\n * // Using callback\n * const callback = (inputElement) => inputElement.focus();\n * render(html`<input ${ref(callback)}>`, container);\n * ```\n */\nexport const ref = directive(RefDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {RefDirective};\n"],"names":["getRoundRobinIndex","index","total","getIconScale","componentScale","warnIfMissingRequiredProp","component","newProp","deprecatedProp","logger","warn","el","localName","toString","isHidden","hidden","itemHidden","async","componentFocusable","componentOnReady","updateComplete","isActivationKey","key","numberKeys","loggedDeprecations","Set","logLevels","trace","debug","info","error","off","forwardToConsole","level","data","logLevel","willLog","console","call","this","listFormatter","message","deprecated","context","name","suggested","removalVersion","has","add","multiSuggestions","Array","isArray","Intl","ListFormat","style","type","format","map","suggestion","CSS","menu","defaultTrigger","SLOTS","tooltip","trigger","ICONS","activeAttr","styles","css","SUPPORTED_MENU_NAV_KEYS","ActionMenu","LitElement","constructor","super","arguments","guid","actionElements","menuButtonClick","toggleOpen","menuButtonId","menuButtonKeyDown","event","activeMenuItemIndex","open","length","preventDefault","action","click","handleActionNavigation","menuId","_open","updateAction","guid2","id","tabIndex","setAttribute","toggleAttribute","appearance","expanded","overlayPositioning","placement","scale","calciteActionMenuOpen","createEvent","cancelable","properties","state","menuButtonEl","reflect","Boolean","flipPlacements","attribute","label","openHandler","setFocus","focusElement","connectedCallback","connectMenuButtonEl","willUpdate","changes","hasUpdated","expandedHandler","updateActions","disconnectedCallback","disconnectMenuButtonEl","setTooltipReferenceElement","active","popoverEl","emit","slottedMenuButtonEl","defaultMenuButtonEl","toAriaBoolean","text","addEventListener","removeEventListener","setMenuButtonEl","actions","target","assignedElements","flatten","filter","matches","setDefaultMenuButtonEl","setPopoverEl","handleCalciteActionClick","updateTooltip","tooltips","tooltipEl","referenceElement","forEach","handleDefaultSlotChange","reduce","previousValue","currentValue","push","concat","from","querySelectorAll","disabled","isValidKey","supportedKeys","find","k","currentIndex","Math","max","value","handlePopoverOpen","stopPropagation","handlePopoverClose","renderMenuButton","html","safeClassMap","ref","renderMenuItems","activeAction","activeDescendantId","nothing","render","customElement","s","notifyChildrenConnectedChanged","i","t","e","_$AN","_$AO","o","_$AM","delete","size","r","c","h","n","_$AH","CHILD","_$AP","_$AQ","f","_$AT","isConnected","_$AU","reconnected","disconnected","setValue","_$Ct","_$AI","_$Ci","createRef","WeakMap","update","G","rt","lt","ct","ht","options","host","element","globalThis","get","set"],"sourceRoot":""}