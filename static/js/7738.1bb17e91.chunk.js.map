{"version":3,"file":"static/js/7738.1bb17e91.chunk.js","mappings":"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","sources":["../node_modules/@esri/calcite-components/dist/esm/src/components/action-bar/utils.ts","../node_modules/@esri/calcite-components/dist/esm/src/components/functional/ExpandToggle.tsx","../node_modules/@esri/calcite-components/dist/esm/src/components/action-pad/resources.ts","../node_modules/@esri/calcite-components/dist/esm/src/components/action-pad/action-pad.tsx","../node_modules/@esri/calcite-components/dist/esm/src/components/action-pad/action-pad.scss?tag=calcite-action-pad&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/esm/src/utils/conditionalSlot.ts","../node_modules/@esri/calcite-components/dist/esm/src/utils/loadable.ts","../node_modules/@esri/calcite-components/dist/esm/src/components/action-group/resources.ts","../node_modules/@esri/calcite-components/dist/esm/src/components/action-menu/resources.ts","../node_modules/@esri/calcite-components/dist/esm/src/utils/t9n.ts"],"sourcesContent":["import { forceUpdate } from \"@stencil/core\";\nimport { SLOTS as ACTION_GROUP_SLOTS } from \"../action-group/resources\";\nimport { SLOTS as ACTION_MENU_SLOTS } from \"../action-menu/resources\";\nimport { Layout } from \"../interfaces\";\n\nconst groupBufferPx = 2;\n\nconst getAverage = (arr: number[]) => arr.reduce((p, c) => p + c, 0) / arr.length;\n\nexport const geActionDimensions = (\n  actions: HTMLCalciteActionElement[],\n): { actionWidth: number; actionHeight: number } => {\n  const actionsNotSlotted = actions.filter((action) => action.slot !== ACTION_GROUP_SLOTS.menuActions);\n  const actionLen = actionsNotSlotted?.length;\n  return {\n    actionWidth: actionLen ? getAverage(actionsNotSlotted.map((action) => action.clientWidth || 0)) : 0,\n    actionHeight: actionLen ? getAverage(actionsNotSlotted.map((action) => action.clientHeight || 0)) : 0,\n  };\n};\n\nconst getMaxActionCount = ({\n  width,\n  actionWidth,\n  layout,\n  height,\n  actionHeight,\n  groupCount,\n}: {\n  layout: Extract<\"horizontal\" | \"vertical\", Layout>;\n  height: number;\n  actionWidth: number;\n  width: number;\n  actionHeight: number;\n  groupCount: number;\n}): number => {\n  const maxContainerPx = layout === \"horizontal\" ? width : height;\n  const avgItemPx = layout === \"horizontal\" ? actionWidth : actionHeight;\n  return Math.floor((maxContainerPx - groupCount * groupBufferPx) / avgItemPx);\n};\n\nexport const getOverflowCount = ({\n  layout,\n  actionCount,\n  actionWidth,\n  width,\n  actionHeight,\n  height,\n  groupCount,\n}: {\n  layout: Extract<\"horizontal\" | \"vertical\", Layout>;\n  actionCount: number;\n  actionWidth: number;\n  width: number;\n  actionHeight: number;\n  height: number;\n  groupCount: number;\n}): number => {\n  return Math.max(actionCount - getMaxActionCount({ width, actionWidth, layout, height, actionHeight, groupCount }), 0);\n};\n\nexport const queryActions = (el: HTMLElement): HTMLCalciteActionElement[] => {\n  return Array.from(el.querySelectorAll(\"calcite-action\")).filter((action) =>\n    action.closest(\"calcite-action-menu\") ? action.slot === ACTION_MENU_SLOTS.trigger : true,\n  );\n};\n\nexport const overflowActions = ({\n  actionGroups,\n  expanded,\n  overflowCount,\n}: {\n  actionGroups: HTMLCalciteActionGroupElement[];\n  expanded: boolean;\n  overflowCount: number;\n}): void => {\n  let needToSlotCount = overflowCount;\n  actionGroups.reverse().forEach((group) => {\n    let slottedWithinGroupCount = 0;\n\n    const groupActions = queryActions(group).reverse();\n\n    groupActions.forEach((groupAction) => {\n      if (groupAction.slot === ACTION_GROUP_SLOTS.menuActions) {\n        groupAction.removeAttribute(\"slot\");\n        groupAction.textEnabled = expanded;\n      }\n    });\n\n    if (needToSlotCount > 0) {\n      groupActions.some((groupAction) => {\n        const unslottedActions = groupActions.filter((action) => !action.slot);\n\n        if (unslottedActions.length > 1 && groupActions.length > 2 && !groupAction.closest(\"calcite-action-menu\")) {\n          groupAction.textEnabled = true;\n          groupAction.setAttribute(\"slot\", ACTION_GROUP_SLOTS.menuActions);\n          slottedWithinGroupCount++;\n\n          if (slottedWithinGroupCount > 1) {\n            needToSlotCount--;\n          }\n        }\n\n        return needToSlotCount < 1;\n      });\n    }\n\n    forceUpdate(group);\n  });\n};\n","import { FunctionalComponent, h, VNode } from \"@stencil/core\";\nimport { getElementDir } from \"../../utils/dom\";\nimport { queryActions } from \"../action-bar/utils\";\nimport { SLOTS as ACTION_GROUP_SLOTS } from \"../action-group/resources\";\nimport { Position, Scale } from \"../interfaces\";\n\ninterface ExpandToggleProps {\n  expanded: boolean;\n  expandText: string;\n  collapseText: string;\n  expandLabel: string;\n  collapseLabel: string;\n  el: HTMLElement;\n  position: Position;\n  tooltip?: HTMLCalciteTooltipElement;\n  toggle: () => void;\n  ref?: (el: HTMLElement) => void;\n  scale?: Scale;\n}\n\nconst ICONS = {\n  chevronsLeft: \"chevrons-left\",\n  chevronsRight: \"chevrons-right\",\n} as const;\n\nfunction getCalcitePosition(position: Position, el: HTMLElement): Position {\n  return position || el.closest(\"calcite-shell-panel\")?.position || \"start\";\n}\n\nexport function toggleChildActionText({\n  el,\n  expanded,\n}: {\n  el: HTMLElement;\n  expanded: boolean;\n}): void {\n  queryActions(el)\n    .filter((el) => el.slot !== ACTION_GROUP_SLOTS.menuActions)\n    .forEach((action) => (action.textEnabled = expanded));\n  el.querySelectorAll(\"calcite-action-group, calcite-action-menu\").forEach(\n    (el: HTMLCalciteActionMenuElement | HTMLCalciteActionGroupElement) => (el.expanded = expanded),\n  );\n}\n\nconst setTooltipReference = ({\n  tooltip,\n  referenceElement,\n  expanded,\n  ref,\n}: {\n  tooltip: HTMLCalciteTooltipElement;\n  referenceElement: HTMLCalciteActionElement;\n  expanded: boolean;\n  ref?: (el: HTMLElement) => void;\n}): HTMLCalciteActionElement => {\n  if (tooltip) {\n    tooltip.referenceElement = !expanded && referenceElement ? referenceElement : null;\n  }\n\n  if (ref) {\n    ref(referenceElement);\n  }\n\n  return referenceElement;\n};\n\nexport const ExpandToggle: FunctionalComponent<ExpandToggleProps> = ({\n  expanded,\n  expandText,\n  collapseText,\n  expandLabel,\n  collapseLabel,\n  toggle,\n  el,\n  position,\n  tooltip,\n  ref,\n  scale,\n}): VNode => {\n  const rtl = getElementDir(el) === \"rtl\";\n\n  const text = expanded ? collapseText : expandText;\n  const label = expanded ? collapseLabel : expandLabel;\n  const icons = [ICONS.chevronsLeft, ICONS.chevronsRight];\n\n  if (rtl) {\n    icons.reverse();\n  }\n\n  const end = getCalcitePosition(position, el) === \"end\";\n  const expandIcon = end ? icons[1] : icons[0];\n  const collapseIcon = end ? icons[0] : icons[1];\n\n  const actionNode = (\n    <calcite-action\n      icon={expanded ? expandIcon : collapseIcon}\n      id=\"expand-toggle\"\n      label={label}\n      onClick={toggle}\n      ref={(referenceElement): HTMLCalciteActionElement =>\n        setTooltipReference({ tooltip, referenceElement, expanded, ref })\n      }\n      scale={scale}\n      text={text}\n      textEnabled={expanded}\n      title={!expanded && !tooltip ? text : null}\n    />\n  );\n\n  return actionNode;\n};\n","export const CSS = {\n  actionGroupEnd: \"action-group--end\",\n  container: \"container\",\n};\n\nexport const SLOTS = {\n  expandTooltip: \"expand-tooltip\",\n};\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport {\n  ConditionalSlotComponent,\n  connectConditionalSlotComponent,\n  disconnectConditionalSlotComponent,\n} from \"../../utils/conditionalSlot\";\nimport { slotChangeGetAssignedElements } from \"../../utils/dom\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport { connectLocalized, disconnectLocalized, LocalizedComponent } from \"../../utils/locale\";\nimport {\n  connectMessages,\n  disconnectMessages,\n  setUpMessages,\n  T9nComponent,\n  updateMessages,\n} from \"../../utils/t9n\";\nimport { ExpandToggle, toggleChildActionText } from \"../functional/ExpandToggle\";\nimport { Layout, Position, Scale } from \"../interfaces\";\nimport { createObserver } from \"../../utils/observers\";\nimport { OverlayPositioning } from \"../../utils/floating-ui\";\nimport { ActionPadMessages } from \"./assets/action-pad/t9n\";\nimport { CSS, SLOTS } from \"./resources\";\n\n/**\n * @slot - A slot for adding `calcite-action`s to the component.\n * @slot expand-tooltip - A slot to set the `calcite-tooltip` for the expand toggle.\n */\n@Component({\n  tag: \"calcite-action-pad\",\n  styleUrl: \"action-pad.scss\",\n  shadow: {\n    delegatesFocus: true,\n  },\n  assetsDirs: [\"assets\"],\n})\nexport class ActionPad\n  implements ConditionalSlotComponent, LoadableComponent, LocalizedComponent, T9nComponent\n{\n  // --------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * Specifies the accessible label for the last `calcite-action-group`.\n   */\n  @Prop() actionsEndGroupLabel: string;\n\n  /**\n   * When `true`, the expand-toggling behavior is disabled.\n   */\n  @Prop({ reflect: true }) expandDisabled = false;\n\n  /**\n   * When `true`, the component is expanded.\n   */\n  @Prop({ reflect: true, mutable: true }) expanded = false;\n\n  @Watch(\"expanded\")\n  expandedHandler(expanded: boolean): void {\n    toggleChildActionText({ el: this.el, expanded });\n  }\n\n  /**\n   * Indicates the layout of the component.\n   */\n  @Prop({ reflect: true }) layout: Extract<\"horizontal\" | \"vertical\" | \"grid\", Layout> = \"vertical\";\n\n  @Watch(\"layout\")\n  layoutHandler(): void {\n    this.updateGroups();\n  }\n\n  /**\n   * Arranges the component depending on the element's `dir` property.\n   */\n  @Prop({ reflect: true }) position: Extract<\"start\" | \"end\", Position>;\n\n  /**\n   * Specifies the size of the expand `calcite-action`.\n   */\n  @Prop({ reflect: true }) scale: Scale;\n\n  /**\n   * Made into a prop for testing purposes only\n   *\n   * @internal\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messages: ActionPadMessages;\n\n  /**\n   * Use this property to override individual strings used by the component.\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messageOverrides: Partial<ActionPadMessages>;\n\n  @Watch(\"messageOverrides\")\n  onMessagesChange(): void {\n    /* wired up by t9n util */\n  }\n\n  /**\n   * Determines the type of positioning to use for the overlaid content.\n   *\n   * Using `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n   *\n   * `\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.\n   *\n   */\n  @Prop({ reflect: true }) overlayPositioning: OverlayPositioning = \"absolute\";\n\n  // --------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * Fires when the `expanded` property is toggled.\n   */\n  @Event({ cancelable: false }) calciteActionPadToggle: EventEmitter<void>;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteActionPadElement;\n\n  @State() expandTooltip: HTMLCalciteTooltipElement;\n\n  mutationObserver = createObserver(\"mutation\", () =>\n    this.setGroupLayout(Array.from(this.el.querySelectorAll(\"calcite-action-group\"))),\n  );\n\n  @State() effectiveLocale = \"\";\n\n  @Watch(\"effectiveLocale\")\n  effectiveLocaleChange(): void {\n    updateMessages(this, this.effectiveLocale);\n  }\n\n  @State() defaultMessages: ActionPadMessages;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  // --------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    connectConditionalSlotComponent(this);\n    connectLocalized(this);\n    connectMessages(this);\n    this.mutationObserver?.observe(this.el, { childList: true, subtree: true });\n  }\n\n  disconnectedCallback(): void {\n    disconnectLocalized(this);\n    disconnectMessages(this);\n    disconnectConditionalSlotComponent(this);\n    this.mutationObserver?.disconnect();\n  }\n\n  async componentWillLoad(): Promise<void> {\n    setUpLoadableComponent(this);\n    const { el, expanded } = this;\n    toggleChildActionText({ el, expanded });\n    await setUpMessages(this);\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Methods\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * Sets focus on the component's first focusable element.\n   */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n\n    this.el?.focus();\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  // --------------------------------------------------------------------------\n\n  actionMenuOpenHandler = (event: CustomEvent<void>): void => {\n    if ((event.target as HTMLCalciteActionGroupElement).menuOpen) {\n      const composedPath = event.composedPath();\n      Array.from(this.el.querySelectorAll(\"calcite-action-group\")).forEach((group) => {\n        if (!composedPath.includes(group)) {\n          group.menuOpen = false;\n        }\n      });\n    }\n  };\n\n  toggleExpand = (): void => {\n    this.expanded = !this.expanded;\n    this.calciteActionPadToggle.emit();\n  };\n\n  updateGroups(): void {\n    this.setGroupLayout(Array.from(this.el.querySelectorAll(\"calcite-action-group\")));\n  }\n\n  setGroupLayout(groups: HTMLCalciteActionGroupElement[]): void {\n    groups.forEach((group) => (group.layout = this.layout));\n  }\n\n  handleDefaultSlotChange = (event: Event): void => {\n    const groups = slotChangeGetAssignedElements(event).filter(\n      (el): el is HTMLCalciteActionGroupElement => el?.matches(\"calcite-action-group\"),\n    );\n\n    this.setGroupLayout(groups);\n  };\n\n  handleTooltipSlotChange = (event: Event): void => {\n    const tooltips = slotChangeGetAssignedElements(event).filter(\n      (el): el is HTMLCalciteTooltipElement => el?.matches(\"calcite-tooltip\"),\n    );\n\n    this.expandTooltip = tooltips[0];\n  };\n\n  // --------------------------------------------------------------------------\n  //\n  //  Component Methods\n  //\n  // --------------------------------------------------------------------------\n\n  renderBottomActionGroup(): VNode {\n    const {\n      expanded,\n      expandDisabled,\n      messages,\n      el,\n      position,\n      toggleExpand,\n      scale,\n      layout,\n      actionsEndGroupLabel,\n      overlayPositioning,\n    } = this;\n\n    const expandToggleNode = !expandDisabled ? (\n      <ExpandToggle\n        collapseLabel={messages.collapseLabel}\n        collapseText={messages.collapse}\n        el={el}\n        expandLabel={messages.expandLabel}\n        expandText={messages.expand}\n        expanded={expanded}\n        position={position}\n        scale={scale}\n        toggle={toggleExpand}\n        tooltip={this.expandTooltip}\n      />\n    ) : null;\n\n    return expandToggleNode ? (\n      <calcite-action-group\n        class={CSS.actionGroupEnd}\n        label={actionsEndGroupLabel}\n        layout={layout}\n        overlayPositioning={overlayPositioning}\n        scale={scale}\n      >\n        <slot name={SLOTS.expandTooltip} onSlotchange={this.handleTooltipSlotChange} />\n        {expandToggleNode}\n      </calcite-action-group>\n    ) : null;\n  }\n\n  render(): VNode {\n    return (\n      <Host onCalciteActionMenuOpen={this.actionMenuOpenHandler}>\n        <div class={CSS.container}>\n          <slot onSlotchange={this.handleDefaultSlotChange} />\n          {this.renderBottomActionGroup()}\n        </div>\n      </Host>\n    );\n  }\n}\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-action-pad-corner-radius: Specifies the component's border radius.\n * @prop --calcite-action-pad-expanded-max-width: When `layout` is `\"vertical\"`, specifies the component's maximum width when `expanded`.\n * @prop --calcite-action-pad-items-space: Specifies the component's space between slotted components.\n */\n\n:host {\n  @extend %component-host;\n  @apply animate-in block;\n\n  border-radius: var(--calcite-action-pad-corner-radius, 0.125rem /* 2px */);\n  background: transparent;\n}\n\n:host([expanded][layout=\"vertical\"]) .container {\n  max-inline-size: var(--calcite-action-pad-expanded-max-width, auto);\n}\n\n:host([layout=\"vertical\"]) {\n  ::slotted(calcite-action-group:not(:last-of-type)) {\n    @apply border-b;\n  }\n}\n\n.container {\n  @apply shadow-2\n  inline-flex\n  flex-col\n  overflow-y-auto;\n\n  gap: var(--calcite-action-pad-items-space, 0);\n  border-radius: calc(var(--calcite-action-pad-corner-radius, 0.125rem) * 2) /* 4px */;\n  background-color: var(--calcite-action-background-color, var(--calcite-color-foreground-1));\n}\n\n.action-group--bottom {\n  @apply flex-grow justify-end pb-0;\n}\n\n:host([layout=\"horizontal\"]) {\n  .container {\n    @apply flex-row;\n    .action-group--bottom {\n      @apply p-0;\n    }\n    ::slotted(calcite-action-group:not(:last-of-type)) {\n      border-inline-end-width: theme(\"borderWidth.DEFAULT\");\n    }\n  }\n}\n\n@include base-component();\n","import { forceUpdate } from \"@stencil/core\";\nimport { createObserver, ExtendedMutationObserver } from \"./observers\";\n\n/**\n * Defines interface for components with a dynamically changing slot.\n *\n * @deprecated Use `onSlotchange` event with `slotChangeHasAssignedElement` DOM utility instead.\n *\n * ```\n * <slot onSlotchange={(event) => this.mySlotHasElement = slotChangeHasAssignedElement(event)} />}\n * ```\n */\nexport interface ConditionalSlotComponent {\n  /**\n   * The host element.\n   */\n  readonly el: HTMLElement;\n}\n\nlet mutationObserver: ExtendedMutationObserver;\nconst observerOptions: Pick<Parameters<MutationObserver[\"observe\"]>[1], \"childList\"> = { childList: true };\n\n/**\n * Helper to set up a conditional slot component on connectedCallback.\n *\n * @param component\n * @deprecated Use `onSlotchange` event with `slotChangeHasAssignedElement` DOM utility instead.\n *\n * ```\n * <slot onSlotchange={(event) => this.mySlotHasElement = slotChangeHasAssignedElement(event)} />}\n * ```\n */\nexport function connectConditionalSlotComponent(component: ConditionalSlotComponent): void {\n  if (!mutationObserver) {\n    mutationObserver = createObserver(\"mutation\", processMutations);\n  }\n\n  mutationObserver.observe(component.el, observerOptions);\n}\n\n/**\n * Helper to tear down a conditional slot component on disconnectedCallback.\n *\n * @param component\n * @deprecated Use `onSlotchange` event with `slotChangeHasAssignedElement` DOM utility instead.\n *\n * ```\n * <slot onSlotchange={(event) => this.mySlotHasElement = slotChangeHasAssignedElement(event)} />}\n * ```\n */\nexport function disconnectConditionalSlotComponent(component: ConditionalSlotComponent): void {\n  mutationObserver.unobserve(component.el);\n}\n\nfunction processMutations(mutations: MutationRecord[]): void {\n  mutations.forEach(({ target }) => {\n    forceUpdate(target);\n  });\n}\n","import { forceUpdate } from \"@stencil/core\";\nimport { isBrowser } from \"./browser\";\n\n/**\n * This helper adds support for knowing when a component has been loaded.\n *\n * Related issue: https://github.com/Esri/calcite-design-system/issues/5369\n * Could be related to Stencil.js issue: https://github.com/ionic-team/stencil/issues/3580\n *\n * Implementing\n *\n * ```\n * export class MyComponent implements LoadableComponent { }\n * ```\n *\n * ```\n *  //--------------------------------------------------------------------------\n *  //\n *  //  Lifecycle\n *  //\n *  //--------------------------------------------------------------------------\n *\n *  componentWillLoad(): void {\n *    setUpLoadableComponent(this);\n *  }\n *\n *  componentDidLoad(): void {\n *    setComponentLoaded(this);\n *  }\n *\n *  // --------------------------------------------------------------------------\n *  //\n *  //  Methods\n *  //\n *  // --------------------------------------------------------------------------\n *\n *  async myMethod(): Promise<void> {\n *    await componentLoaded(this);\n *  }\n * ```\n */\nexport interface LoadableComponent {\n  /**\n   * Stencil lifecycle method.\n   * https://stenciljs.com/docs/component-lifecycle#componentwillload\n   *\n   * Called once just after the component is first connected to the DOM. Since this method is only called once, it's a good place to load data asynchronously and to setup the state without triggering extra re-renders.\n   */\n  componentWillLoad: () => Promise<void> | void;\n\n  /**\n   * Stencil lifecycle method.\n   * https://stenciljs.com/docs/component-lifecycle#componentdidload\n   *\n   * Called once just after the component is fully loaded and the first render() occurs.\n   */\n  componentDidLoad: () => Promise<void> | void;\n}\n\nconst resolveMap = new WeakMap<LoadableComponent, (value: void | PromiseLike<void>) => void>();\n\nconst promiseMap = new WeakMap<LoadableComponent, Promise<void>>();\n\n/**\n * This helper util sets up the component for the ability to know when the component has been loaded.\n *\n * This should be used in the `componentWillLoad` lifecycle hook.\n *\n * ```\n * componentWillLoad(): void {\n *   setUpLoadableComponent(this);\n * }\n * ```\n *\n * @param component\n */\nexport function setUpLoadableComponent(component: LoadableComponent): void {\n  promiseMap.set(component, new Promise((resolve) => resolveMap.set(component, resolve)));\n}\n\n/**\n * This helper util lets the loadable component know that it is now loaded.\n *\n * This should be used in the `componentDidLoad` lifecycle hook.\n *\n * ```\n * componentDidLoad(): void {\n *   setComponentLoaded(this);\n * }\n * ```\n *\n * @param component\n */\nexport function setComponentLoaded(component: LoadableComponent): void {\n  resolveMap.get(component)();\n}\n\n/**\n * This helper util can be used to ensure a component has been loaded (The \"componentDidLoad\" Stencil lifecycle method has been called).\n *\n * Requires requires `LoadableComponent` to be implemented.\n *\n * A component developer can await this method before proceeding with any logic that requires a component to be loaded first.\n *\n * ```\n * async myMethod(): Promise<void> {\n *   await componentLoaded(this);\n * }\n * ```\n *\n * @param component\n * @returns Promise<void>\n */\nexport function componentLoaded(component: LoadableComponent): Promise<void> {\n  return promiseMap.get(component);\n}\n\n/**\n * This helper util can be used to ensuring the component is loaded and rendered by the browser (The \"componentDidLoad\" Stencil lifecycle method has been called and any internal elements are focusable).\n *\n * Requires `LoadableComponent` to be implemented.\n *\n * A component developer can await this method before proceeding with any logic that requires a component to be loaded first and then an internal element be focused.\n *\n * ```\n * async setFocus(): Promise<void> {\n *   await componentFocusable(this);\n *   this.internalElement?.focus();\n * }\n * ```\n *\n * @param component\n * @returns Promise<void>\n */\nexport async function componentFocusable(component: LoadableComponent): Promise<void> {\n  await componentLoaded(component);\n\n  if (!isBrowser()) {\n    return;\n  }\n\n  forceUpdate(component);\n  return new Promise((resolve) => requestAnimationFrame(() => resolve()));\n}\n","export const SLOTS = {\n  menuActions: \"menu-actions\",\n  menuTooltip: \"menu-tooltip\",\n};\n\nexport const ICONS = {\n  menu: \"ellipsis\",\n} as const;\n\nexport const CSS = {\n  container: \"container\",\n};\n","export const CSS = {\n  menu: \"menu\",\n  defaultTrigger: \"default-trigger\",\n};\n\nexport const SLOTS = {\n  tooltip: \"tooltip\",\n  trigger: \"trigger\",\n};\n\nexport const ICONS = {\n  menu: \"ellipsis\",\n} as const;\n\nexport const activeAttr = \"data-active\";\n","import { getAssetPath } from \"@stencil/core\";\nimport { getSupportedLocale, LocalizedComponent } from \"./locale\";\nimport { isBrowser } from \"./browser\";\n\nexport type MessageBundle = Record<string, string>;\n\nexport const componentLangToMessageBundleCache: Record<string, Promise<MessageBundle>> = {};\n\nasync function getMessageBundle(lang: string, component: string): Promise<MessageBundle> {\n  const key = `${component}_${lang}`;\n\n  if (componentLangToMessageBundleCache[key]) {\n    return componentLangToMessageBundleCache[key];\n  }\n\n  componentLangToMessageBundleCache[key] = fetch(getAssetPath(`./assets/${component}/t9n/messages_${lang}.json`))\n    .then((resp) => {\n      if (!resp.ok) {\n        throwMessageFetchError();\n      }\n      return resp.json();\n    })\n    .catch(() => throwMessageFetchError());\n\n  return componentLangToMessageBundleCache[key];\n}\n\nfunction throwMessageFetchError(): never {\n  throw new Error(\"could not fetch component message bundle\");\n}\n\nfunction mergeMessages(component: T9nComponent): void {\n  component.messages = {\n    ...component.defaultMessages,\n    ...component.messageOverrides,\n  };\n}\n\nfunction noop(): void {\n  // intentionally empty\n}\n\n/**\n * This utility sets up the messages used by the component. It should be awaited in the `componentWillLoad` lifecycle hook.\n *\n * @param component\n */\nexport async function setUpMessages(component: T9nComponent): Promise<void> {\n  component.defaultMessages = await fetchMessages(component, component.effectiveLocale);\n  mergeMessages(component);\n}\n\nasync function fetchMessages(component: T9nComponent, lang: string): Promise<MessageBundle> {\n  if (!isBrowser()) {\n    return {};\n  }\n\n  const { el } = component;\n  const tag = el.tagName.toLowerCase();\n  const componentName = tag.replace(\"calcite-\", \"\");\n\n  return getMessageBundle(getSupportedLocale(lang, \"t9n\"), componentName);\n}\n\n/**\n * This utility must be set up for the component to update its default message bundle if the locale changes.\n *\n * It can be set up in **either** of the following ways:\n *\n * 1. called from `LocalizedComponent`'s `onLocaleChange` method or\n * 2. called from a watcher configured to watch `LocalizedComponent`'s `effectiveLocale` prop\n *\n * @param component\n * @param lang\n */\nexport async function updateMessages(component: T9nComponent, lang: string): Promise<void> {\n  component.defaultMessages = await fetchMessages(component, lang);\n  mergeMessages(component);\n}\n\n/**\n * This utility sets up internals for messages support.\n *\n * It needs to be called in `connectedCallback`\n *\n * **Note**: this must be called after `LocalizedComponent`'s `connectLocalized` method.\n *\n * @param component\n */\nexport function connectMessages(component: T9nComponent): void {\n  component.onMessagesChange = defaultOnMessagesChange;\n}\n\n/**\n * This utility tears down internals for messages support.\n *\n * It needs to be called in `disconnectedCallback`\n *\n * @param component\n */\nexport function disconnectMessages(component: T9nComponent): void {\n  // we set this to noop to for watchers triggered when components are disconnected\n  component.onMessagesChange = noop;\n}\n\n/**\n * This interface enables components to support built-in translation strings.\n *\n * **Notes**:\n *\n * This requires `LocalizedComponent` to be implemented.\n * To avoid unnecessary lookups, composite components should set `lang` on internal t9n components.\n */\nexport interface T9nComponent extends LocalizedComponent {\n  el: HTMLElement;\n\n  /**\n   * This property holds all messages used by the component's rendering.\n   *\n   * This prop should use the `@Prop` decorator. It uses `@Prop` decorator for testing purpose only.\n   */\n  messages: MessageBundle;\n\n  /**\n   * This property holds the component's default messages.\n   */\n  defaultMessages: MessageBundle;\n\n  /**\n   * This property holds all user message overrides.\n   *\n   * This prop should use the `@Prop` decorator.\n   */\n  messageOverrides: Partial<MessageBundle>;\n\n  /**\n   * This private method ensures messages are kept in sync.\n   *\n   * This method should be empty and configured to watch for changes on  `messageOverrides` property.\n   *\n   * @Watch(\"messageOverrides\")\n   * onMessagesChange(): void {\n   *  \\/* wired up by t9n util *\\/\n   * }\n   */\n  onMessagesChange: () => void;\n}\n\nfunction defaultOnMessagesChange(this: T9nComponent): void {\n  mergeMessages(this);\n}\n"],"names":["getAverage","arr","reduce","p","c","length","geActionDimensions","actions","actionsNotSlotted","filter","action","slot","SLOTS$1","menuActions","actionLen","actionWidth","map","clientWidth","actionHeight","clientHeight","getOverflowCount","layout","actionCount","width","height","groupCount","Math","max","getMaxActionCount","maxContainerPx","avgItemPx","floor","queryActions","el","Array","from","querySelectorAll","closest","SLOTS","trigger","overflowActions","actionGroups","expanded","overflowCount","needToSlotCount","reverse","forEach","group","slottedWithinGroupCount","groupActions","groupAction","removeAttribute","textEnabled","some","setAttribute","forceUpdate","ICONS","toggleChildActionText","ExpandToggle","expandText","collapseText","expandLabel","collapseLabel","toggle","position","tooltip","ref","scale","rtl","getElementDir","text","label","icons","end","getCalcitePosition","expandIcon","collapseIcon","actionNode","h","icon","id","onClick","referenceElement","setTooltipReference","title","CSS","ActionPad","mutationObserver","createObserver","this","setGroupLayout","actionMenuOpenHandler","event","target","menuOpen","composedPath","includes","toggleExpand","calciteActionPadToggle","emit","handleDefaultSlotChange","groups","slotChangeGetAssignedElements","matches","handleTooltipSlotChange","tooltips","expandTooltip","expandedHandler","layoutHandler","updateGroups","onMessagesChange","effectiveLocaleChange","updateMessages","effectiveLocale","connectedCallback","connectConditionalSlotComponent","connectLocalized","connectMessages","observe","childList","subtree","disconnectedCallback","disconnectLocalized","disconnectMessages","disconnectConditionalSlotComponent","disconnect","componentWillLoad","setUpLoadableComponent","setUpMessages","componentDidLoad","setComponentLoaded","setFocus","componentFocusable","focus","renderBottomActionGroup","expandDisabled","messages","actionsEndGroupLabel","overlayPositioning","expandToggleNode","collapse","expand","class","name","onSlotchange","render","Host","key","onCalciteActionMenuOpen","observerOptions","component","processMutations","unobserve","mutations","resolveMap","WeakMap","promiseMap","set","Promise","resolve","get","componentLoaded","async","isBrowser","requestAnimationFrame","menuTooltip","menu","container","defaultTrigger","activeAttr","componentLangToMessageBundleCache","throwMessageFetchError","Error","mergeMessages","defaultMessages","messageOverrides","noop","fetchMessages","lang","componentName","tagName","toLowerCase","replace","fetch","getAssetPath","then","resp","ok","json","catch","getMessageBundle","getSupportedLocale","defaultOnMessagesChange"],"sourceRoot":""}