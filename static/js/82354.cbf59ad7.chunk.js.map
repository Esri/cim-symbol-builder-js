{"version":3,"file":"static/js/82354.cbf59ad7.chunk.js","mappings":"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","sources":["../node_modules/@esri/calcite-components/dist/chunks/loadable.js","../node_modules/@esri/calcite-components/dist/components/calcite-color-picker-hex-input/customElement.js","../node_modules/lit-html/src/directives/keyed.ts","../node_modules/lit-html/src/async-directive.ts","../node_modules/lit-html/src/directives/ref.ts"],"sourcesContent":["import { i as a } from \"./runtime.js\";\n/*! All material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\nv3.0.3 */\nasync function t(e) {\n  await e.componentOnReady();\n}\nasync function r(e) {\n  if (await e.componentOnReady(), !!a())\n    return e.requestUpdate(), new Promise((n) => requestAnimationFrame(() => n()));\n}\nexport {\n  t as a,\n  r as c\n};\n","import { c as T } from \"../../chunks/runtime.js\";\nimport { ref as v } from \"lit-html/directives/ref.js\";\nimport { keyed as k } from \"lit-html/directives/keyed.js\";\nimport { C, n as r, h as c, i as p, a as d, b as I, r as D, o as b, c as $, O as H, d as L } from \"../../chunks/utils4.js\";\nimport { html as V } from \"lit\";\nimport { LitElement as B, createEvent as A, safeClassMap as x } from \"@arcgis/lumina\";\nimport { b as P } from \"../../chunks/dom.js\";\nimport { c as R } from \"../../chunks/loadable.js\";\nimport { css as K } from \"@lit/reactive-element/css-tag.js\";\n/*! All material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\nv3.0.3 */\nconst f = {\n  container: \"container\",\n  hexInput: \"hex-input\",\n  opacityInput: \"opacity-input\"\n}, z = K`:host{display:block}.container{display:flex;inline-size:100%;flex-wrap:nowrap;align-items:center}.hex-input{flex-grow:1;text-transform:uppercase}.opacity-input{inline-size:100px;margin-inline-start:-1px}:host([hidden]){display:none}[hidden]{display:none}`, m = C();\nclass U extends B {\n  constructor() {\n    super(...arguments), this.internalColor = m, this.alphaChannel = !1, this.allowEmpty = !1, this.hexLabel = \"Hex\", this.scale = \"m\", this.value = r(c(m, this.alphaChannel), this.alphaChannel, !0), this.calciteColorPickerHexInputChange = A({ cancelable: !1 });\n  }\n  static {\n    this.properties = { internalColor: 16, alphaChannel: 5, allowEmpty: 5, hexLabel: 1, messages: 0, numberingSystem: 1, scale: 3, value: 3 };\n  }\n  static {\n    this.styles = z;\n  }\n  // #endregion\n  // #region Public Methods\n  /** Sets focus on the component. */\n  async setFocus() {\n    return await R(this), P(this.hexInputNode);\n  }\n  // #endregion\n  // #region Lifecycle\n  connectedCallback() {\n    super.connectedCallback(), this.previousNonNullValue = this.value;\n    const { allowEmpty: t, alphaChannel: e, value: a } = this;\n    if (a) {\n      const n = r(a, e);\n      p(n, e) && this.internalSetValue(n, n, !1);\n      return;\n    }\n    t && this.internalSetValue(void 0, void 0, !1);\n  }\n  load() {\n  }\n  willUpdate(t) {\n    t.has(\"value\") && (this.hasUpdated || this.value !== r(c(m, this.alphaChannel), this.alphaChannel, !0)) && this.internalSetValue(this.value, t.get(\"value\"), !1);\n  }\n  loaded() {\n  }\n  // #endregion\n  // #region Private Methods\n  onHexInputBlur() {\n    const t = this.hexInputNode, e = t.value, a = `#${e}`, { allowEmpty: n, internalColor: l } = this, s = n && !e, i = d(a);\n    (I(a, !0) || I(a, !1)) && this.onHexInputChange(), !(s || p(a) && i) && (t.value = n && !l ? \"\" : this.formatHexForInternalInput(D(\n      // always display hex input in RRGGBB format\n      l.object()\n    )));\n  }\n  onOpacityInputBlur() {\n    const t = this.opacityInputNode, e = t.value, { allowEmpty: a, internalColor: n } = this;\n    a && !e || (t.value = a && !n ? \"\" : this.formatOpacityForInternalInput(n));\n  }\n  onOpacityInputInput() {\n    this.onOpacityInputChange();\n  }\n  onHexInputChange() {\n    let e = this.hexInputNode.value;\n    if (e) {\n      const a = r(e, !1);\n      if (p(a) && this.alphaChannel && this.internalColor) {\n        const l = r(this.internalColor.hexa(), !0).slice(-2);\n        e = `${a + l}`;\n      }\n    }\n    this.internalSetValue(e, this.value);\n  }\n  onOpacityInputChange() {\n    const t = this.opacityInputNode;\n    let e;\n    if (!t.value)\n      e = t.value;\n    else {\n      const a = b(Number(t.value));\n      e = this.internalColor?.alpha(a).hexa();\n    }\n    this.internalSetValue(e, this.value);\n  }\n  onInputFocus(t) {\n    t.type === \"calciteInternalInputTextFocus\" ? this.hexInputNode.selectText() : this.opacityInputNode.selectText();\n  }\n  onHexInputInput() {\n    const t = `#${this.hexInputNode.value}`, e = this.value;\n    p(t, this.alphaChannel) && d(t, this.alphaChannel) && this.internalSetValue(t, e);\n  }\n  onInputKeyDown(t) {\n    const { altKey: e, ctrlKey: a, metaKey: n, shiftKey: l } = t, { alphaChannel: s, hexInputNode: i, internalColor: o, value: h } = this, { key: u } = t, y = t.composedPath();\n    if (u === \"Tab\" && I(h, this.alphaChannel) || u === \"Enter\") {\n      y.includes(i) ? this.onHexInputChange() : this.onOpacityInputChange(), u === \"Enter\" && t.preventDefault();\n      return;\n    }\n    const w = u === \"ArrowDown\" || u === \"ArrowUp\", g = this.value;\n    if (w) {\n      if (!h) {\n        this.internalSetValue(this.previousNonNullValue, g), t.preventDefault();\n        return;\n      }\n      const E = u === \"ArrowUp\" ? 1 : -1, F = l ? 10 : 1;\n      this.internalSetValue(c(this.nudgeRGBChannels(o, F * E, y.includes(i) ? \"rgb\" : \"a\"), s), g), t.preventDefault();\n      return;\n    }\n    const N = e || a || n, S = u.length === 1, O = L.test(u);\n    S && !N && !O && t.preventDefault();\n  }\n  onHexInputPaste(t) {\n    const e = t.clipboardData.getData(\"text\");\n    p(e, this.alphaChannel) && d(e, this.alphaChannel) && (t.preventDefault(), this.hexInputNode.value = e.slice(1), this.internalSetValue(e, this.value));\n  }\n  internalSetValue(t, e, a = !0) {\n    if (t) {\n      const { alphaChannel: n } = this, l = r(t, n, n);\n      if (p(l, n)) {\n        const { internalColor: s } = this, i = C(l), o = r(c(i, n), n), h = !s || o !== r(c(s, n), n);\n        this.internalColor = i, this.previousNonNullValue = o, this.value = o, h && a && this.calciteColorPickerHexInputChange.emit();\n        return;\n      }\n    } else if (this.allowEmpty) {\n      this.internalColor = void 0, this.value = void 0, a && this.calciteColorPickerHexInputChange.emit();\n      return;\n    }\n    this.value = e;\n  }\n  storeHexInputRef(t) {\n    this.hexInputNode = t;\n  }\n  storeOpacityInputRef(t) {\n    this.opacityInputNode = t;\n  }\n  formatHexForInternalInput(t) {\n    return t ? t.replace(\"#\", \"\").slice(0, 6) : \"\";\n  }\n  formatOpacityForInternalInput(t) {\n    return t ? `${$(t.alpha())}` : \"\";\n  }\n  nudgeRGBChannels(t, e, a) {\n    let n;\n    const l = t.array(), s = l.slice(0, 3);\n    if (a === \"rgb\")\n      n = [\n        ...s.map((o) => o + e),\n        this.alphaChannel ? l[3] : void 0\n      ];\n    else {\n      const i = b($(t.alpha()) + e);\n      n = [...s, i];\n    }\n    return C(n);\n  }\n  // #endregion\n  // #region Rendering\n  render() {\n    const { alphaChannel: t, hexLabel: e, internalColor: a, messages: n, scale: l, value: s } = this, i = this.formatHexForInternalInput(s), o = this.formatOpacityForInternalInput(a), h = l === \"l\" ? \"m\" : \"s\";\n    return V`<div class=${x(f.container)}><calcite-input-text class=${x(f.hexInput)} .label=${n?.hex || e} .maxLength=${this.alphaChannel ? 8 : 6} @keydown=${this.onInputKeyDown} @paste=${this.onHexInputPaste} @calciteInputTextChange=${this.onHexInputChange} @calciteInputTextInput=${this.onHexInputInput} @calciteInternalInputTextBlur=${this.onHexInputBlur} @calciteInternalInputTextFocus=${this.onInputFocus} prefix-text=# .scale=${h} .value=${i} ${v(this.storeHexInputRef)}></calcite-input-text>${t ? k(\"opacity-input\", V`<calcite-input-number class=${x(f.opacityInput)} .label=${n?.opacity} .max=${H.max} max-length=3 .min=${H.min} number-button-type=none .numberingSystem=${this.numberingSystem} @keydown=${this.onInputKeyDown} @calciteInputNumberInput=${this.onOpacityInputInput} @calciteInternalInputNumberBlur=${this.onOpacityInputBlur} @calciteInternalInputNumberFocus=${this.onInputFocus} .scale=${h} suffix-text=% .value=${o} ${v(this.storeOpacityInputRef)}></calcite-input-number>`) : null}</div>`;\n  }\n}\nT(\"calcite-color-picker-hex-input\", U);\nexport {\n  U as ColorPickerHexInput\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {nothing} from '../lit-html.js';\nimport {\n  directive,\n  Directive,\n  ChildPart,\n  DirectiveParameters,\n} from '../directive.js';\nimport {setCommittedValue} from '../directive-helpers.js';\n\nclass Keyed extends Directive {\n  key: unknown = nothing;\n\n  render(k: unknown, v: unknown) {\n    this.key = k;\n    return v;\n  }\n\n  override update(part: ChildPart, [k, v]: DirectiveParameters<this>) {\n    if (k !== this.key) {\n      // Clear the part before returning a value. The one-arg form of\n      // setCommittedValue sets the value to a sentinel which forces a\n      // commit the next render.\n      setCommittedValue(part);\n      this.key = k;\n    }\n    return v;\n  }\n}\n\n/**\n * Associates a renderable value with a unique key. When the key changes, the\n * previous DOM is removed and disposed before rendering the next value, even\n * if the value - such as a template - is the same.\n *\n * This is useful for forcing re-renders of stateful components, or working\n * with code that expects new data to generate new HTML elements, such as some\n * animation techniques.\n */\nexport const keyed = directive(Keyed);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {Keyed};\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * Overview:\n *\n * This module is designed to add support for an async `setValue` API and\n * `disconnected` callback to directives with the least impact on the core\n * runtime or payload when that feature is not used.\n *\n * The strategy is to introduce a `AsyncDirective` subclass of\n * `Directive` that climbs the \"parent\" tree in its constructor to note which\n * branches of lit-html's \"logical tree\" of data structures contain such\n * directives and thus need to be crawled when a subtree is being cleared (or\n * manually disconnected) in order to run the `disconnected` callback.\n *\n * The \"nodes\" of the logical tree include Parts, TemplateInstances (for when a\n * TemplateResult is committed to a value of a ChildPart), and Directives; these\n * all implement a common interface called `DisconnectableChild`. Each has a\n * `_$parent` reference which is set during construction in the core code, and a\n * `_$disconnectableChildren` field which is initially undefined.\n *\n * The sparse tree created by means of the `AsyncDirective` constructor\n * crawling up the `_$parent` tree and placing a `_$disconnectableChildren` Set\n * on each parent that includes each child that contains a\n * `AsyncDirective` directly or transitively via its children. In order to\n * notify connection state changes and disconnect (or reconnect) a tree, the\n * `_$notifyConnectionChanged` API is patched onto ChildParts as a directive\n * climbs the parent tree, which is called by the core when clearing a part if\n * it exists. When called, that method iterates over the sparse tree of\n * Set<DisconnectableChildren> built up by AsyncDirectives, and calls\n * `_$notifyDirectiveConnectionChanged` on any directives that are encountered\n * in that tree, running the required callbacks.\n *\n * A given \"logical tree\" of lit-html data-structures might look like this:\n *\n *  ChildPart(N1) _$dC=[D2,T3]\n *   ._directive\n *     AsyncDirective(D2)\n *   ._value // user value was TemplateResult\n *     TemplateInstance(T3) _$dC=[A4,A6,N10,N12]\n *      ._$parts[]\n *        AttributePart(A4) _$dC=[D5]\n *         ._directives[]\n *           AsyncDirective(D5)\n *        AttributePart(A6) _$dC=[D7,D8]\n *         ._directives[]\n *           AsyncDirective(D7)\n *           Directive(D8) _$dC=[D9]\n *            ._directive\n *              AsyncDirective(D9)\n *        ChildPart(N10) _$dC=[D11]\n *         ._directive\n *           AsyncDirective(D11)\n *         ._value\n *           string\n *        ChildPart(N12) _$dC=[D13,N14,N16]\n *         ._directive\n *           AsyncDirective(D13)\n *         ._value // user value was iterable\n *           Array<ChildPart>\n *             ChildPart(N14) _$dC=[D15]\n *              ._value\n *                string\n *             ChildPart(N16) _$dC=[D17,T18]\n *              ._directive\n *                AsyncDirective(D17)\n *              ._value // user value was TemplateResult\n *                TemplateInstance(T18) _$dC=[A19,A21,N25]\n *                 ._$parts[]\n *                   AttributePart(A19) _$dC=[D20]\n *                    ._directives[]\n *                      AsyncDirective(D20)\n *                   AttributePart(A21) _$dC=[22,23]\n *                    ._directives[]\n *                      AsyncDirective(D22)\n *                      Directive(D23) _$dC=[D24]\n *                       ._directive\n *                         AsyncDirective(D24)\n *                   ChildPart(N25) _$dC=[D26]\n *                    ._directive\n *                      AsyncDirective(D26)\n *                    ._value\n *                      string\n *\n * Example 1: The directive in ChildPart(N12) updates and returns `nothing`. The\n * ChildPart will _clear() itself, and so we need to disconnect the \"value\" of\n * the ChildPart (but not its directive). In this case, when `_clear()` calls\n * `_$notifyConnectionChanged()`, we don't iterate all of the\n * _$disconnectableChildren, rather we do a value-specific disconnection: i.e.\n * since the _value was an Array<ChildPart> (because an iterable had been\n * committed), we iterate the array of ChildParts (N14, N16) and run\n * `setConnected` on them (which does recurse down the full tree of\n * `_$disconnectableChildren` below it, and also removes N14 and N16 from N12's\n * `_$disconnectableChildren`). Once the values have been disconnected, we then\n * check whether the ChildPart(N12)'s list of `_$disconnectableChildren` is empty\n * (and would remove it from its parent TemplateInstance(T3) if so), but since\n * it would still contain its directive D13, it stays in the disconnectable\n * tree.\n *\n * Example 2: In the course of Example 1, `setConnected` will reach\n * ChildPart(N16); in this case the entire part is being disconnected, so we\n * simply iterate all of N16's `_$disconnectableChildren` (D17,T18) and\n * recursively run `setConnected` on them. Note that we only remove children\n * from `_$disconnectableChildren` for the top-level values being disconnected\n * on a clear; doing this bookkeeping lower in the tree is wasteful since it's\n * all being thrown away.\n *\n * Example 3: If the LitElement containing the entire tree above becomes\n * disconnected, it will run `childPart.setConnected()` (which calls\n * `childPart._$notifyConnectionChanged()` if it exists); in this case, we\n * recursively run `setConnected()` over the entire tree, without removing any\n * children from `_$disconnectableChildren`, since this tree is required to\n * re-connect the tree, which does the same operation, simply passing\n * `isConnected: true` down the tree, signaling which callback to run.\n */\n\nimport {AttributePart, ChildPart, Disconnectable, Part} from './lit-html.js';\nimport {isSingleExpression} from './directive-helpers.js';\nimport {Directive, PartInfo, PartType} from './directive.js';\nexport * from './directive.js';\n\nconst DEV_MODE = true;\n\n/**\n * Recursively walks down the tree of Parts/TemplateInstances/Directives to set\n * the connected state of directives and run `disconnected`/ `reconnected`\n * callbacks.\n *\n * @return True if there were children to disconnect; false otherwise\n */\nconst notifyChildrenConnectedChanged = (\n  parent: Disconnectable,\n  isConnected: boolean\n): boolean => {\n  const children = parent._$disconnectableChildren;\n  if (children === undefined) {\n    return false;\n  }\n  for (const obj of children) {\n    // The existence of `_$notifyDirectiveConnectionChanged` is used as a \"brand\" to\n    // disambiguate AsyncDirectives from other DisconnectableChildren\n    // (as opposed to using an instanceof check to know when to call it); the\n    // redundancy of \"Directive\" in the API name is to avoid conflicting with\n    // `_$notifyConnectionChanged`, which exists `ChildParts` which are also in\n    // this list\n    // Disconnect Directive (and any nested directives contained within)\n    // This property needs to remain unminified.\n    (obj as AsyncDirective)['_$notifyDirectiveConnectionChanged']?.(\n      isConnected,\n      false\n    );\n    // Disconnect Part/TemplateInstance\n    notifyChildrenConnectedChanged(obj, isConnected);\n  }\n  return true;\n};\n\n/**\n * Removes the given child from its parent list of disconnectable children, and\n * if the parent list becomes empty as a result, removes the parent from its\n * parent, and so forth up the tree when that causes subsequent parent lists to\n * become empty.\n */\nconst removeDisconnectableFromParent = (obj: Disconnectable) => {\n  let parent, children;\n  do {\n    if ((parent = obj._$parent) === undefined) {\n      break;\n    }\n    children = parent._$disconnectableChildren!;\n    children.delete(obj);\n    obj = parent;\n  } while (children?.size === 0);\n};\n\nconst addDisconnectableToParent = (obj: Disconnectable) => {\n  // Climb the parent tree, creating a sparse tree of children needing\n  // disconnection\n  for (let parent; (parent = obj._$parent); obj = parent) {\n    let children = parent._$disconnectableChildren;\n    if (children === undefined) {\n      parent._$disconnectableChildren = children = new Set();\n    } else if (children.has(obj)) {\n      // Once we've reached a parent that already contains this child, we\n      // can short-circuit\n      break;\n    }\n    children.add(obj);\n    installDisconnectAPI(parent);\n  }\n};\n\n/**\n * Changes the parent reference of the ChildPart, and updates the sparse tree of\n * Disconnectable children accordingly.\n *\n * Note, this method will be patched onto ChildPart instances and called from\n * the core code when parts are moved between different parents.\n */\nfunction reparentDisconnectables(this: ChildPart, newParent: Disconnectable) {\n  if (this._$disconnectableChildren !== undefined) {\n    removeDisconnectableFromParent(this);\n    this._$parent = newParent;\n    addDisconnectableToParent(this);\n  } else {\n    this._$parent = newParent;\n  }\n}\n\n/**\n * Sets the connected state on any directives contained within the committed\n * value of this part (i.e. within a TemplateInstance or iterable of\n * ChildParts) and runs their `disconnected`/`reconnected`s, as well as within\n * any directives stored on the ChildPart (when `valueOnly` is false).\n *\n * `isClearingValue` should be passed as `true` on a top-level part that is\n * clearing itself, and not as a result of recursively disconnecting directives\n * as part of a `clear` operation higher up the tree. This both ensures that any\n * directive on this ChildPart that produced a value that caused the clear\n * operation is not disconnected, and also serves as a performance optimization\n * to avoid needless bookkeeping when a subtree is going away; when clearing a\n * subtree, only the top-most part need to remove itself from the parent.\n *\n * `fromPartIndex` is passed only in the case of a partial `_clear` running as a\n * result of truncating an iterable.\n *\n * Note, this method will be patched onto ChildPart instances and called from the\n * core code when parts are cleared or the connection state is changed by the\n * user.\n */\nfunction notifyChildPartConnectedChanged(\n  this: ChildPart,\n  isConnected: boolean,\n  isClearingValue = false,\n  fromPartIndex = 0\n) {\n  const value = this._$committedValue;\n  const children = this._$disconnectableChildren;\n  if (children === undefined || children.size === 0) {\n    return;\n  }\n  if (isClearingValue) {\n    if (Array.isArray(value)) {\n      // Iterable case: Any ChildParts created by the iterable should be\n      // disconnected and removed from this ChildPart's disconnectable\n      // children (starting at `fromPartIndex` in the case of truncation)\n      for (let i = fromPartIndex; i < value.length; i++) {\n        notifyChildrenConnectedChanged(value[i], false);\n        removeDisconnectableFromParent(value[i]);\n      }\n    } else if (value != null) {\n      // TemplateInstance case: If the value has disconnectable children (will\n      // only be in the case that it is a TemplateInstance), we disconnect it\n      // and remove it from this ChildPart's disconnectable children\n      notifyChildrenConnectedChanged(value as Disconnectable, false);\n      removeDisconnectableFromParent(value as Disconnectable);\n    }\n  } else {\n    notifyChildrenConnectedChanged(this, isConnected);\n  }\n}\n\n/**\n * Patches disconnection API onto ChildParts.\n */\nconst installDisconnectAPI = (obj: Disconnectable) => {\n  if ((obj as ChildPart).type == PartType.CHILD) {\n    (obj as ChildPart)._$notifyConnectionChanged ??=\n      notifyChildPartConnectedChanged;\n    (obj as ChildPart)._$reparentDisconnectables ??= reparentDisconnectables;\n  }\n};\n\n/**\n * An abstract `Directive` base class whose `disconnected` method will be\n * called when the part containing the directive is cleared as a result of\n * re-rendering, or when the user calls `part.setConnected(false)` on\n * a part that was previously rendered containing the directive (as happens\n * when e.g. a LitElement disconnects from the DOM).\n *\n * If `part.setConnected(true)` is subsequently called on a\n * containing part, the directive's `reconnected` method will be called prior\n * to its next `update`/`render` callbacks. When implementing `disconnected`,\n * `reconnected` should also be implemented to be compatible with reconnection.\n *\n * Note that updates may occur while the directive is disconnected. As such,\n * directives should generally check the `this.isConnected` flag during\n * render/update to determine whether it is safe to subscribe to resources\n * that may prevent garbage collection.\n */\nexport abstract class AsyncDirective extends Directive {\n  // As opposed to other Disconnectables, AsyncDirectives always get notified\n  // when the RootPart connection changes, so the public `isConnected`\n  // is a locally stored variable initialized via its part's getter and synced\n  // via `_$notifyDirectiveConnectionChanged`. This is cheaper than using\n  // the _$isConnected getter, which has to look back up the tree each time.\n  /**\n   * The connection state for this Directive.\n   */\n  isConnected!: boolean;\n\n  // @internal\n  override _$disconnectableChildren?: Set<Disconnectable> = undefined;\n  /**\n   * Initialize the part with internal fields\n   * @param part\n   * @param parent\n   * @param attributeIndex\n   */\n  override _$initialize(\n    part: Part,\n    parent: Disconnectable,\n    attributeIndex: number | undefined\n  ) {\n    super._$initialize(part, parent, attributeIndex);\n    addDisconnectableToParent(this);\n    this.isConnected = part._$isConnected;\n  }\n  // This property needs to remain unminified.\n  /**\n   * Called from the core code when a directive is going away from a part (in\n   * which case `shouldRemoveFromParent` should be true), and from the\n   * `setChildrenConnected` helper function when recursively changing the\n   * connection state of a tree (in which case `shouldRemoveFromParent` should\n   * be false).\n   *\n   * @param isConnected\n   * @param isClearingDirective - True when the directive itself is being\n   *     removed; false when the tree is being disconnected\n   * @internal\n   */\n  override ['_$notifyDirectiveConnectionChanged'](\n    isConnected: boolean,\n    isClearingDirective = true\n  ) {\n    if (isConnected !== this.isConnected) {\n      this.isConnected = isConnected;\n      if (isConnected) {\n        this.reconnected?.();\n      } else {\n        this.disconnected?.();\n      }\n    }\n    if (isClearingDirective) {\n      notifyChildrenConnectedChanged(this, isConnected);\n      removeDisconnectableFromParent(this);\n    }\n  }\n\n  /**\n   * Sets the value of the directive's Part outside the normal `update`/`render`\n   * lifecycle of a directive.\n   *\n   * This method should not be called synchronously from a directive's `update`\n   * or `render`.\n   *\n   * @param directive The directive to update\n   * @param value The value to set\n   */\n  setValue(value: unknown) {\n    if (isSingleExpression(this.__part as unknown as PartInfo)) {\n      this.__part._$setValue(value, this);\n    } else {\n      // this.__attributeIndex will be defined in this case, but\n      // assert it in dev mode\n      if (DEV_MODE && this.__attributeIndex === undefined) {\n        throw new Error(`Expected this.__attributeIndex to be a number`);\n      }\n      const newValues = [...(this.__part._$committedValue as Array<unknown>)];\n      newValues[this.__attributeIndex!] = value;\n      (this.__part as AttributePart)._$setValue(newValues, this, 0);\n    }\n  }\n\n  /**\n   * User callbacks for implementing logic to release any resources/subscriptions\n   * that may have been retained by this directive. Since directives may also be\n   * re-connected, `reconnected` should also be implemented to restore the\n   * working state of the directive prior to the next render.\n   */\n  protected disconnected() {}\n  protected reconnected() {}\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport {nothing, ElementPart} from '../lit-html.js';\nimport {directive, AsyncDirective} from '../async-directive.js';\n\n/**\n * Creates a new Ref object, which is container for a reference to an element.\n */\nexport const createRef = <T = Element>() => new Ref<T>();\n\n/**\n * An object that holds a ref value.\n */\nclass Ref<T = Element> {\n  /**\n   * The current Element value of the ref, or else `undefined` if the ref is no\n   * longer rendered.\n   */\n  readonly value?: T;\n}\n\nexport type {Ref};\n\ninterface RefInternal {\n  value: Element | undefined;\n}\n\n// When callbacks are used for refs, this map tracks the last value the callback\n// was called with, for ensuring a directive doesn't clear the ref if the ref\n// has already been rendered to a new spot. It is double-keyed on both the\n// context (`options.host`) and the callback, since we auto-bind class methods\n// to `options.host`.\nconst lastElementForContextAndCallback = new WeakMap<\n  object,\n  WeakMap<Function, Element | undefined>\n>();\n\nexport type RefOrCallback<T = Element> = Ref<T> | ((el: T | undefined) => void);\n\nclass RefDirective extends AsyncDirective {\n  private _element?: Element;\n  private _ref?: RefOrCallback;\n  private _context?: object;\n\n  render(_ref?: RefOrCallback) {\n    return nothing;\n  }\n\n  override update(part: ElementPart, [ref]: Parameters<this['render']>) {\n    const refChanged = ref !== this._ref;\n    if (refChanged && this._ref !== undefined) {\n      // The ref passed to the directive has changed;\n      // unset the previous ref's value\n      this._updateRefValue(undefined);\n    }\n    if (refChanged || this._lastElementForRef !== this._element) {\n      // We either got a new ref or this is the first render;\n      // store the ref/element & update the ref value\n      this._ref = ref;\n      this._context = part.options?.host;\n      this._updateRefValue((this._element = part.element));\n    }\n    return nothing;\n  }\n\n  private _updateRefValue(element: Element | undefined) {\n    if (!this.isConnected) {\n      element = undefined;\n    }\n    if (typeof this._ref === 'function') {\n      // If the current ref was called with a previous value, call with\n      // `undefined`; We do this to ensure callbacks are called in a consistent\n      // way regardless of whether a ref might be moving up in the tree (in\n      // which case it would otherwise be called with the new value before the\n      // previous one unsets it) and down in the tree (where it would be unset\n      // before being set). Note that element lookup is keyed by\n      // both the context and the callback, since we allow passing unbound\n      // functions that are called on options.host, and we want to treat\n      // these as unique \"instances\" of a function.\n      const context = this._context ?? globalThis;\n      let lastElementForCallback =\n        lastElementForContextAndCallback.get(context);\n      if (lastElementForCallback === undefined) {\n        lastElementForCallback = new WeakMap();\n        lastElementForContextAndCallback.set(context, lastElementForCallback);\n      }\n      if (lastElementForCallback.get(this._ref) !== undefined) {\n        this._ref.call(this._context, undefined);\n      }\n      lastElementForCallback.set(this._ref, element);\n      // Call the ref with the new element value\n      if (element !== undefined) {\n        this._ref.call(this._context, element);\n      }\n    } else {\n      (this._ref as RefInternal)!.value = element;\n    }\n  }\n\n  private get _lastElementForRef() {\n    return typeof this._ref === 'function'\n      ? lastElementForContextAndCallback\n          .get(this._context ?? globalThis)\n          ?.get(this._ref)\n      : this._ref?.value;\n  }\n\n  override disconnected() {\n    // Only clear the box if our element is still the one in it (i.e. another\n    // directive instance hasn't rendered its element to it before us); that\n    // only happens in the event of the directive being cleared (not via manual\n    // disconnection)\n    if (this._lastElementForRef === this._element) {\n      this._updateRefValue(undefined);\n    }\n  }\n\n  override reconnected() {\n    // If we were manually disconnected, we can safely put our element back in\n    // the box, since no rendering could have occurred to change its state\n    this._updateRefValue(this._element);\n  }\n}\n\n/**\n * Sets the value of a Ref object or calls a ref callback with the element it's\n * bound to.\n *\n * A Ref object acts as a container for a reference to an element. A ref\n * callback is a function that takes an element as its only argument.\n *\n * The ref directive sets the value of the Ref object or calls the ref callback\n * during rendering, if the referenced element changed.\n *\n * Note: If a ref callback is rendered to a different element position or is\n * removed in a subsequent render, it will first be called with `undefined`,\n * followed by another call with the new element it was rendered to (if any).\n *\n * ```js\n * // Using Ref object\n * const inputRef = createRef();\n * render(html`<input ${ref(inputRef)}>`, container);\n * inputRef.value.focus();\n *\n * // Using callback\n * const callback = (inputElement) => inputElement.focus();\n * render(html`<input ${ref(callback)}>`, container);\n * ```\n */\nexport const ref = directive(RefDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {RefDirective};\n"],"names":["async","t","e","componentOnReady","r","a","requestUpdate","Promise","n","requestAnimationFrame","f","z","K","m","C","U","B","constructor","super","arguments","this","internalColor","alphaChannel","allowEmpty","hexLabel","scale","value","c","calciteColorPickerHexInputChange","A","cancelable","properties","messages","numberingSystem","styles","setFocus","R","P","hexInputNode","connectedCallback","previousNonNullValue","p","internalSetValue","load","willUpdate","has","hasUpdated","get","loaded","onHexInputBlur","l","s","i","d","I","onHexInputChange","formatHexForInternalInput","D","object","onOpacityInputBlur","opacityInputNode","formatOpacityForInternalInput","onOpacityInputInput","onOpacityInputChange","hexa","slice","b","Number","alpha","onInputFocus","type","selectText","onHexInputInput","onInputKeyDown","altKey","ctrlKey","metaKey","shiftKey","o","h","key","u","y","composedPath","includes","preventDefault","w","g","E","F","nudgeRGBChannels","N","S","length","O","L","test","onHexInputPaste","clipboardData","getData","emit","storeHexInputRef","storeOpacityInputRef","replace","$","array","map","render","V","x","hex","v","k","opacity","H","max","min","T","update","notifyChildrenConnectedChanged","_$AN","_$AO","_$AM","delete","size","Set","add","_$AH","Array","isArray","CHILD","_$AP","_$AQ","_$AT","isConnected","_$AU","reconnected","disconnected","setValue","_$Ct","_$AI","_$Ci","createRef","WeakMap","Y","rt","lt","ct","ht","options","host","element","globalThis","set","call"],"sourceRoot":""}