{"version":3,"file":"static/js/4179.26c73831.chunk.js","mappings":"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","sources":["../node_modules/@esri/calcite-components/dist/esm/src/components/functional/FloatingArrow.tsx","../node_modules/@esri/calcite-components/dist/esm/src/components/functional/Heading.tsx","../node_modules/@esri/calcite-components/dist/esm/src/components/popover/resources.ts","../node_modules/@esri/calcite-components/dist/esm/src/components/popover/popover.tsx","../node_modules/@esri/calcite-components/dist/esm/src/components/popover/PopoverManager.ts","../node_modules/@esri/calcite-components/dist/esm/src/components/popover/popover.scss?tag=calcite-popover&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/esm/src/utils/component.ts","../node_modules/@esri/calcite-components/dist/esm/src/utils/openCloseComponent.ts","../node_modules/@esri/calcite-components/dist/esm/src/utils/t9n.ts"],"sourcesContent":["import { FunctionalComponent, h, VNode } from \"@stencil/core\";\nimport { JSXAttributes } from \"@stencil/core/internal\";\nimport { FloatingLayout } from \"../../utils/floating-ui\";\n\ninterface FloatingArrowProps extends JSXAttributes<SVGSVGElement> {\n  floatingLayout: FloatingLayout;\n}\n\nconst CSS = {\n  arrow: \"calcite-floating-ui-arrow\",\n  arrowStroke: \"calcite-floating-ui-arrow__stroke\",\n};\n\nconst DEFAULTS = {\n  width: 12,\n  height: 6,\n  strokeWidth: 1,\n};\n\n/**\n * Renders a SVG element to be used as a floating-ui arrow.\n *\n * This functional component should be rendered inside a `FloatingUIComponent` when it needs an arrow element.\n *\n * @param floatingLayout.floatingLayout\n * @param floatingLayout â€“ The effective floating layout to render the arrow vertically or horizontally. Possible values: `vertical` or `horizontal`.\n *\n * See [floating-ui](https://github.com/Esri/calcite-design-system/blob/dev/src/utils/floating-ui.ts)\n * @param floatingLayout.key\n * @param floatingLayout.ref\n */\nexport const FloatingArrow: FunctionalComponent<FloatingArrowProps> = ({\n  floatingLayout,\n  key,\n  ref,\n}): VNode => {\n  const { width, height, strokeWidth } = DEFAULTS;\n  const svgX = width / 2;\n  const isVertical = floatingLayout === \"vertical\";\n\n  const dValue =\n    \"M0,0\" +\n    ` H${width}` +\n    ` L${width - svgX},${height}` +\n    ` Q${svgX},${height} ${svgX},${height}` +\n    \" Z\";\n\n  return (\n    <svg\n      aria-hidden=\"true\"\n      class={CSS.arrow}\n      height={width}\n      key={key}\n      ref={ref}\n      viewBox={`0 0 ${width} ${width + (!isVertical ? strokeWidth : 0)}`}\n      width={width + (isVertical ? strokeWidth : 0)}\n    >\n      {strokeWidth > 0 && (\n        <path\n          class={CSS.arrowStroke}\n          d={dValue}\n          fill=\"none\"\n          // Account for the stroke on the fill path rendered below.\n          stroke-width={strokeWidth + 1}\n        />\n      )}\n      {/* In Firefox, for left/right placements there's a ~0.5px gap where the\n  border can show through. Adding a stroke on the fill removes it. */}\n      <path d={dValue} stroke=\"none\" />\n    </svg>\n  );\n};\n","import { FunctionalComponent, h, VNode } from \"@stencil/core\";\nimport { JSXBase } from \"@stencil/core/internal\";\n\nexport type HeadingLevel = 1 | 2 | 3 | 4 | 5 | 6;\n\ninterface HeadingProps extends Pick<JSXBase.HTMLAttributes, \"class\" | \"key\"> {\n  level?: HeadingLevel;\n}\n\nexport function constrainHeadingLevel(level: number): HeadingLevel {\n  return Math.min(Math.max(Math.ceil(level), 1), 6) as HeadingLevel;\n}\n\nexport const Heading: FunctionalComponent<HeadingProps> = (props, children): VNode => {\n  const HeadingTag = props.level ? `h${props.level}` : \"div\";\n\n  delete props.level;\n\n  return (\n    <HeadingTag class={props.class} key={props.key}>\n      {children}\n    </HeadingTag>\n  );\n};\n","export const CSS = {\n  container: \"container\",\n  imageContainer: \"image-container\",\n  closeButtonContainer: \"close-button-container\",\n  closeButton: \"close-button\",\n  content: \"content\",\n  hasHeader: \"has-header\",\n  header: \"header\",\n  headerContainer: \"headerContainer\",\n  headerContent: \"header-content\",\n  heading: \"heading\",\n};\n\nexport const defaultPopoverPlacement = \"auto\";\nexport const ARIA_CONTROLS = \"aria-controls\";\nexport const ARIA_EXPANDED = \"aria-expanded\";\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  forceUpdate,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport {\n  connectFloatingUI,\n  defaultOffsetDistance,\n  disconnectFloatingUI,\n  filterValidFlipPlacements,\n  FlipPlacement,\n  FloatingCSS,\n  FloatingLayout,\n  FloatingUIComponent,\n  LogicalPlacement,\n  OverlayPositioning,\n  ReferenceElement,\n  reposition,\n} from \"../../utils/floating-ui\";\nimport {\n  activateFocusTrap,\n  connectFocusTrap,\n  deactivateFocusTrap,\n  FocusTrap,\n  FocusTrapComponent,\n  updateFocusTrapElements,\n} from \"../../utils/focusTrapComponent\";\nimport { focusFirstTabbable, queryElementRoots, toAriaBoolean } from \"../../utils/dom\";\nimport { guid } from \"../../utils/guid\";\nimport { onToggleOpenCloseComponent, OpenCloseComponent } from \"../../utils/openCloseComponent\";\nimport { Heading, HeadingLevel } from \"../functional/Heading\";\nimport { Scale } from \"../interfaces\";\nimport { connectLocalized, disconnectLocalized, LocalizedComponent } from \"../../utils/locale\";\nimport {\n  connectMessages,\n  disconnectMessages,\n  setUpMessages,\n  T9nComponent,\n  updateMessages,\n} from \"../../utils/t9n\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport { createObserver } from \"../../utils/observers\";\nimport { FloatingArrow } from \"../functional/FloatingArrow\";\nimport { getIconScale } from \"../../utils/component\";\nimport PopoverManager from \"./PopoverManager\";\nimport { PopoverMessages } from \"./assets/popover/t9n\";\nimport { ARIA_CONTROLS, ARIA_EXPANDED, CSS, defaultPopoverPlacement } from \"./resources\";\n\nconst manager = new PopoverManager();\n\n/**\n * @slot - A slot for adding custom content.\n */\n@Component({\n  tag: \"calcite-popover\",\n  styleUrl: \"popover.scss\",\n  shadow: true,\n  assetsDirs: [\"assets\"],\n})\nexport class Popover\n  implements\n    FloatingUIComponent,\n    OpenCloseComponent,\n    FocusTrapComponent,\n    LoadableComponent,\n    LocalizedComponent,\n    T9nComponent\n{\n  // --------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * When `true`, clicking outside of the component automatically closes open `calcite-popover`s.\n   */\n  @Prop({ reflect: true }) autoClose = false;\n\n  /** When `true`, displays a close button within the component. */\n  @Prop({ reflect: true }) closable = false;\n\n  /**\n   * When `true`, prevents flipping the component's placement when overlapping its `referenceElement`.\n   */\n  @Prop({ reflect: true }) flipDisabled = false;\n\n  /**\n   * When `true`, prevents focus trapping.\n   */\n  @Prop({ reflect: true }) focusTrapDisabled = false;\n\n  @Watch(\"focusTrapDisabled\")\n  handleFocusTrapDisabled(focusTrapDisabled: boolean): void {\n    if (!this.open) {\n      return;\n    }\n\n    focusTrapDisabled ? deactivateFocusTrap(this) : activateFocusTrap(this);\n  }\n\n  /**\n   * When `true`, removes the caret pointer.\n   */\n  @Prop({ reflect: true }) pointerDisabled = false;\n\n  /**\n   * Specifies the component's fallback `placement` when it's initial or specified `placement` has insufficient space available.\n   */\n  @Prop() flipPlacements: FlipPlacement[];\n\n  @Watch(\"flipPlacements\")\n  flipPlacementsHandler(): void {\n    this.setFilteredPlacements();\n    this.reposition(true);\n  }\n\n  /**\n   * The component header text.\n   */\n  @Prop() heading: string;\n\n  /**\n   * Specifies the heading level of the component's `heading` for proper document structure, without affecting visual styling.\n   */\n  @Prop({ reflect: true }) headingLevel: HeadingLevel;\n\n  /** Accessible name for the component. */\n  @Prop() label!: string;\n\n  /**\n   * Use this property to override individual strings used by the component.\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messageOverrides: Partial<PopoverMessages>;\n\n  @Watch(\"messageOverrides\")\n  onMessagesChange(): void {\n    /* wired up by t9n util */\n  }\n\n  /**\n   * Made into a prop for testing purposes only\n   *\n   * @internal\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messages: PopoverMessages;\n\n  /**\n   * Offsets the position of the popover away from the `referenceElement`.\n   *\n   * @default 6\n   */\n  @Prop({ reflect: true }) offsetDistance = defaultOffsetDistance;\n\n  @Watch(\"offsetDistance\")\n  offsetDistanceOffsetHandler(): void {\n    this.reposition(true);\n  }\n\n  /**\n   * Offsets the position of the component along the `referenceElement`.\n   */\n  @Prop({ reflect: true }) offsetSkidding = 0;\n\n  @Watch(\"offsetSkidding\")\n  offsetSkiddingHandler(): void {\n    this.reposition(true);\n  }\n\n  /**\n   * When `true`, displays and positions the component.\n   */\n  @Prop({ reflect: true, mutable: true }) open = false;\n\n  @Watch(\"open\")\n  openHandler(): void {\n    onToggleOpenCloseComponent(this);\n    this.reposition(true);\n    this.setExpandedAttr();\n  }\n\n  /**\n   * Determines the type of positioning to use for the overlaid content.\n   *\n   * Using `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n   *\n   * `\"fixed\"` value should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.\n   *\n   */\n  @Prop({ reflect: true }) overlayPositioning: OverlayPositioning = \"absolute\";\n\n  @Watch(\"overlayPositioning\")\n  overlayPositioningHandler(): void {\n    this.reposition(true);\n  }\n\n  /**\n   * Determines where the component will be positioned relative to the `referenceElement`.\n   */\n  @Prop({ reflect: true }) placement: LogicalPlacement = defaultPopoverPlacement;\n\n  @Watch(\"placement\")\n  placementHandler(): void {\n    this.reposition(true);\n  }\n\n  /**\n   *  The `referenceElement` used to position the component according to its `placement` value. Setting to an `HTMLElement` is preferred so the component does not need to query the DOM. However, a string `id` of the reference element can also be used.\n   */\n  @Prop() referenceElement!: ReferenceElement | string;\n\n  @Watch(\"referenceElement\")\n  referenceElementHandler(): void {\n    this.setUpReferenceElement();\n    this.reposition(true);\n  }\n\n  /** Specifies the size of the component. */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  /**\n   * When `true`, disables automatically toggling the component when its `referenceElement` has been triggered.\n   *\n   * This property can be set to `true` to manage when the component is open.\n   */\n  @Prop({ reflect: true }) triggerDisabled = false;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n\n  @Element() el: HTMLCalcitePopoverElement;\n\n  mutationObserver: MutationObserver = createObserver(\"mutation\", () =>\n    this.updateFocusTrapElements(),\n  );\n\n  filteredFlipPlacements: FlipPlacement[];\n\n  @State() effectiveLocale = \"\";\n\n  @State() floatingLayout: FloatingLayout = \"vertical\";\n\n  @Watch(\"effectiveLocale\")\n  effectiveLocaleChange(): void {\n    updateMessages(this, this.effectiveLocale);\n  }\n\n  @State() effectiveReferenceElement: ReferenceElement;\n\n  @State() defaultMessages: PopoverMessages;\n\n  arrowEl: SVGSVGElement;\n\n  closeButtonEl: HTMLCalciteActionElement;\n\n  guid = `calcite-popover-${guid()}`;\n\n  openTransitionProp = \"opacity\";\n\n  transitionEl: HTMLDivElement;\n\n  hasLoaded = false;\n\n  focusTrap: FocusTrap;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  // --------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    this.mutationObserver?.observe(this.el, { childList: true, subtree: true });\n    this.setFilteredPlacements();\n    connectLocalized(this);\n    connectMessages(this);\n    connectFocusTrap(this);\n\n    // we set up the ref element in the next frame to ensure PopoverManager\n    // event handlers are invoked after connect (mainly for `components` output target)\n    requestAnimationFrame(() => this.setUpReferenceElement(this.hasLoaded));\n  }\n\n  async componentWillLoad(): Promise<void> {\n    await setUpMessages(this);\n    setUpLoadableComponent(this);\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n    if (this.referenceElement && !this.effectiveReferenceElement) {\n      this.setUpReferenceElement();\n    }\n\n    if (this.open) {\n      onToggleOpenCloseComponent(this);\n    }\n    this.hasLoaded = true;\n  }\n\n  disconnectedCallback(): void {\n    this.mutationObserver?.disconnect();\n    this.removeReferences();\n    disconnectLocalized(this);\n    disconnectMessages(this);\n    disconnectFloatingUI(this, this.effectiveReferenceElement, this.el);\n    deactivateFocusTrap(this);\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  //--------------------------------------------------------------------------\n\n  /** Fires when the component is requested to be closed and before the closing transition begins. */\n  @Event({ cancelable: false }) calcitePopoverBeforeClose: EventEmitter<void>;\n\n  /** Fires when the component is closed and animation is complete. */\n  @Event({ cancelable: false }) calcitePopoverClose: EventEmitter<void>;\n\n  /** Fires when the component is added to the DOM but not rendered, and before the opening transition begins. */\n  @Event({ cancelable: false }) calcitePopoverBeforeOpen: EventEmitter<void>;\n\n  /** Fires when the component is open and animation is complete. */\n  @Event({ cancelable: false }) calcitePopoverOpen: EventEmitter<void>;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * Updates the position of the component.\n   *\n   * @param delayed\n   */\n  @Method()\n  async reposition(delayed = false): Promise<void> {\n    const {\n      el,\n      effectiveReferenceElement,\n      placement,\n      overlayPositioning,\n      flipDisabled,\n      filteredFlipPlacements,\n      offsetDistance,\n      offsetSkidding,\n      arrowEl,\n    } = this;\n    return reposition(\n      this,\n      {\n        floatingEl: el,\n        referenceEl: effectiveReferenceElement,\n        overlayPositioning,\n        placement,\n        flipDisabled,\n        flipPlacements: filteredFlipPlacements,\n        offsetDistance,\n        offsetSkidding,\n        arrowEl,\n        type: \"popover\",\n      },\n      delayed,\n    );\n  }\n\n  /**\n   * Sets focus on the component's first focusable element.\n   */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n    forceUpdate(this.el);\n    focusFirstTabbable(this.el);\n  }\n\n  /**\n   * Updates the element(s) that are used within the focus-trap of the component.\n   */\n  @Method()\n  async updateFocusTrapElements(): Promise<void> {\n    updateFocusTrapElements(this);\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  // --------------------------------------------------------------------------\n\n  private setTransitionEl = (el: HTMLDivElement): void => {\n    this.transitionEl = el;\n  };\n\n  setFilteredPlacements = (): void => {\n    const { el, flipPlacements } = this;\n\n    this.filteredFlipPlacements = flipPlacements\n      ? filterValidFlipPlacements(flipPlacements, el)\n      : null;\n  };\n\n  setUpReferenceElement = (warn = true): void => {\n    this.removeReferences();\n    this.effectiveReferenceElement = this.getReferenceElement();\n    connectFloatingUI(this, this.effectiveReferenceElement, this.el);\n\n    const { el, referenceElement, effectiveReferenceElement } = this;\n    if (warn && referenceElement && !effectiveReferenceElement) {\n      console.warn(`${el.tagName}: reference-element id \"${referenceElement}\" was not found.`, {\n        el,\n      });\n    }\n\n    this.addReferences();\n  };\n\n  getId = (): string => {\n    return this.el.id || this.guid;\n  };\n\n  setExpandedAttr = (): void => {\n    const { effectiveReferenceElement, open } = this;\n\n    if (!effectiveReferenceElement) {\n      return;\n    }\n\n    if (\"setAttribute\" in effectiveReferenceElement) {\n      effectiveReferenceElement.setAttribute(ARIA_EXPANDED, toAriaBoolean(open));\n    }\n  };\n\n  addReferences = (): void => {\n    const { effectiveReferenceElement } = this;\n\n    if (!effectiveReferenceElement) {\n      return;\n    }\n\n    const id = this.getId();\n\n    if (\"setAttribute\" in effectiveReferenceElement) {\n      effectiveReferenceElement.setAttribute(ARIA_CONTROLS, id);\n    }\n\n    manager.registerElement(effectiveReferenceElement, this.el);\n    this.setExpandedAttr();\n  };\n\n  removeReferences = (): void => {\n    const { effectiveReferenceElement } = this;\n\n    if (!effectiveReferenceElement) {\n      return;\n    }\n\n    if (\"removeAttribute\" in effectiveReferenceElement) {\n      effectiveReferenceElement.removeAttribute(ARIA_CONTROLS);\n      effectiveReferenceElement.removeAttribute(ARIA_EXPANDED);\n    }\n\n    manager.unregisterElement(effectiveReferenceElement);\n  };\n\n  getReferenceElement(): ReferenceElement {\n    const { referenceElement, el } = this;\n\n    return (\n      (typeof referenceElement === \"string\"\n        ? queryElementRoots(el, { id: referenceElement })\n        : referenceElement) || null\n    );\n  }\n\n  hide = (): void => {\n    this.open = false;\n  };\n\n  onBeforeOpen(): void {\n    this.calcitePopoverBeforeOpen.emit();\n  }\n\n  onOpen(): void {\n    this.calcitePopoverOpen.emit();\n    activateFocusTrap(this);\n  }\n\n  onBeforeClose(): void {\n    this.calcitePopoverBeforeClose.emit();\n  }\n\n  onClose(): void {\n    this.calcitePopoverClose.emit();\n    deactivateFocusTrap(this);\n  }\n\n  storeArrowEl = (el: SVGSVGElement): void => {\n    this.arrowEl = el;\n    this.reposition(true);\n  };\n\n  // --------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  // --------------------------------------------------------------------------\n\n  renderCloseButton(): VNode {\n    const { messages, closable } = this;\n    return closable ? (\n      <div class={CSS.closeButtonContainer} key={CSS.closeButtonContainer}>\n        <calcite-action\n          appearance=\"transparent\"\n          class={CSS.closeButton}\n          onClick={this.hide}\n          ref={(closeButtonEl) => (this.closeButtonEl = closeButtonEl)}\n          scale={this.scale}\n          text={messages.close}\n        >\n          <calcite-icon icon=\"x\" scale={getIconScale(this.scale)} />\n        </calcite-action>\n      </div>\n    ) : null;\n  }\n\n  renderHeader(): VNode {\n    const { heading, headingLevel } = this;\n    const headingNode = heading ? (\n      <Heading class={CSS.heading} level={headingLevel}>\n        {heading}\n      </Heading>\n    ) : null;\n\n    return headingNode ? (\n      <div class={CSS.header} key={CSS.header}>\n        {headingNode}\n        {this.renderCloseButton()}\n      </div>\n    ) : null;\n  }\n\n  render(): VNode {\n    const { effectiveReferenceElement, heading, label, open, pointerDisabled, floatingLayout } =\n      this;\n    const displayed = effectiveReferenceElement && open;\n    const hidden = !displayed;\n    const arrowNode = !pointerDisabled ? (\n      <FloatingArrow floatingLayout={floatingLayout} key=\"floating-arrow\" ref={this.storeArrowEl} />\n    ) : null;\n\n    return (\n      <Host\n        aria-hidden={toAriaBoolean(hidden)}\n        aria-label={label}\n        aria-live=\"polite\"\n        calcite-hydrated-hidden={hidden}\n        id={this.getId()}\n        role=\"dialog\"\n      >\n        <div\n          class={{\n            [CSS.container]: true,\n            [FloatingCSS.animation]: true,\n            [FloatingCSS.animationActive]: displayed,\n          }}\n          ref={this.setTransitionEl}\n        >\n          {arrowNode}\n          <div\n            class={{\n              [CSS.hasHeader]: !!heading,\n              [CSS.headerContainer]: true,\n            }}\n          >\n            {this.renderHeader()}\n            <div class={CSS.content}>\n              <slot />\n            </div>\n            {!heading ? this.renderCloseButton() : null}\n          </div>\n        </div>\n      </Host>\n    );\n  }\n}\n","import { ReferenceElement } from \"../../utils/floating-ui\";\nimport { isActivationKey } from \"../../utils/key\";\nimport { isKeyboardTriggeredClick } from \"../../utils/dom\";\n\nexport default class PopoverManager {\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n\n  private registeredElements = new Map<ReferenceElement, HTMLCalcitePopoverElement>();\n\n  private registeredElementCount = 0;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  // --------------------------------------------------------------------------\n\n  registerElement(referenceEl: ReferenceElement, popover: HTMLCalcitePopoverElement): void {\n    this.registeredElementCount++;\n\n    this.registeredElements.set(referenceEl, popover);\n\n    if (this.registeredElementCount === 1) {\n      this.addListeners();\n    }\n  }\n\n  unregisterElement(referenceEl: ReferenceElement): void {\n    if (this.registeredElements.delete(referenceEl)) {\n      this.registeredElementCount--;\n    }\n\n    if (this.registeredElementCount === 0) {\n      this.removeListeners();\n    }\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  // --------------------------------------------------------------------------\n\n  private queryPopover = (composedPath: EventTarget[]): HTMLCalcitePopoverElement => {\n    const { registeredElements } = this;\n\n    const registeredElement = (composedPath as HTMLElement[]).find((pathEl) => registeredElements.has(pathEl));\n\n    return registeredElements.get(registeredElement);\n  };\n\n  private togglePopovers = (event: KeyboardEvent | PointerEvent): void => {\n    const composedPath = event.composedPath();\n    const togglePopover = this.queryPopover(composedPath);\n\n    if (togglePopover && !togglePopover.triggerDisabled) {\n      togglePopover.open = !togglePopover.open;\n    }\n\n    Array.from(this.registeredElements.values())\n      .filter(\n        (popover) => popover !== togglePopover && popover.autoClose && popover.open && !composedPath.includes(popover),\n      )\n      .forEach((popover) => (popover.open = false));\n  };\n\n  private closeAllPopovers(): void {\n    Array.from(this.registeredElements.values()).forEach((popover) => (popover.open = false));\n  }\n\n  private keyDownHandler = (event: KeyboardEvent): void => {\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    if (event.key === \"Escape\") {\n      this.closeAllPopovers();\n    } else if (isActivationKey(event.key)) {\n      this.togglePopovers(event);\n    }\n  };\n\n  private clickHandler = (event: PointerEvent): void => {\n    if (isKeyboardTriggeredClick(event)) {\n      return;\n    }\n\n    this.togglePopovers(event);\n  };\n\n  private addListeners(): void {\n    window.addEventListener(\"click\", this.clickHandler);\n    window.addEventListener(\"keydown\", this.keyDownHandler);\n  }\n\n  private removeListeners(): void {\n    window.removeEventListener(\"click\", this.clickHandler);\n    window.removeEventListener(\"keydown\", this.keyDownHandler);\n  }\n}\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-popover-background-color: Specifies the component's background color.\n * @prop --calcite-popover-border-color: Specifies the component's border color.\n * @prop --calcite-popover-corner-radius: Specifies the component's corner radius.\n * @prop --calcite-popover-text-color: Specifies the component's text color.\n * @prop --calcite-popover-z-index: Specifies the component's z-index value.\n */\n\n:host {\n  --calcite-floating-ui-z-index: var(--calcite-popover-z-index, theme(\"zIndex.popover\"));\n}\n\n@include floating-ui-host();\n@include floating-ui-arrow();\n\n:host([scale=\"s\"]) {\n  .heading {\n    @apply text-n1-wrap\n    px-3\n    py-2;\n  }\n}\n\n:host([scale=\"m\"]) {\n  .heading {\n    @apply text-0-wrap\n    px-4\n    py-3;\n  }\n}\n\n:host([scale=\"l\"]) {\n  .heading {\n    @apply text-1-wrap\n    px-5\n    py-4;\n  }\n}\n\n:host {\n  @apply pointer-events-none;\n}\n\n:host([open]) {\n  pointer-events: initial;\n}\n\n.calcite-floating-ui-anim {\n  @apply border\n    border-solid;\n\n  background-color: var(--calcite-popover-background-color, var(--calcite-color-foreground-1));\n  border-color: var(--calcite-popover-border-color, var(--calcite-color-border-3));\n  border-radius: var(--calcite-popover-corner-radius, var(--calcite-corner-radius-round));\n}\n\n.calcite-floating-ui-arrow {\n  fill: var(--calcite-popover-background-color, var(--calcite-color-foreground-1));\n}\n\n.calcite-floating-ui-arrow__stroke {\n  stroke: var(--calcite-popover-border-color, var(--calcite-color-border-3));\n}\n\n.header {\n  @apply flex\n    flex-auto\n    items-stretch\n    justify-start\n    border-0\n    border-b\n    border-solid;\n\n  border-block-end-color: var(--calcite-popover-border-color, var(--calcite-color-border-3));\n}\n\n.heading {\n  @apply word-break\n  m-0\n  block\n  flex-auto\n  self-center\n  whitespace-normal\n  font-medium;\n\n  color: var(--calcite-popover-text-color, var(--calcite-color-text-1));\n}\n\n.headerContainer {\n  @apply relative\n    flex\n    h-full\n    flex-row\n    flex-nowrap\n    rounded;\n  color: var(--calcite-popover-text-color, var(--calcite-color-text-1));\n\n  &.has-header {\n    @apply flex-col;\n  }\n}\n\n.content {\n  @apply word-break\n  flex\n  h-full\n  w-full\n  flex-col\n  flex-nowrap\n  self-center;\n}\n\n.close-button-container {\n  @apply flex overflow-hidden;\n  flex: 0 0 auto;\n  border-start-end-radius: var(--calcite-popover-corner-radius, var(--calcite-corner-radius-round));\n  border-end-end-radius: var(--calcite-popover-corner-radius, var(--calcite-corner-radius-round));\n  --calcite-action-corner-radius-start-end: var(--calcite-popover-corner-radius, var(--calcite-corner-radius-sharp));\n  --calcite-action-corner-radius-end-end: var(--calcite-popover-corner-radius, var(--calcite-corner-radius-sharp));\n}\n\n::slotted(calcite-panel),\n::slotted(calcite-flow) {\n  @apply h-full;\n}\n\n@include base-component();\n","import { HTMLStencilElement } from \"@stencil/core/internal\";\nimport { Scale } from \"../components/interfaces\";\n\nexport function getIconScale(componentScale: Scale): Extract<Scale, \"s\" | \"m\"> {\n  return componentScale === \"l\" ? \"m\" : \"s\";\n}\n\n/**\n * This util helps us wait for a component to be ready for both lazy-loading (`dist` output) and non-lazy-loading (`components` output) components.\n *\n * Based on https://github.com/ionic-team/ionic-framework/blob/1a8bd6d/core/src/utils/helpers.ts#L60C1-L79C3\n *\n * @param el - the host element to wait for\n */\nexport async function componentOnReady(el: HTMLElement): Promise<void> {\n  await (isStencilEl(el)\n    ? el.componentOnReady()\n    : new Promise<void>((resolve) => requestAnimationFrame(() => resolve())));\n}\n\nfunction isStencilEl(el: HTMLElement): el is HTMLStencilElement {\n  return typeof (el as HTMLStencilElement).componentOnReady === \"function\";\n}\n","import { readTask } from \"@stencil/core\";\nimport { whenTransitionDone } from \"./dom\";\n\n/**\n * Exported for testing purposes only\n */\nexport const internalReadTask = readTask;\n\n/**\n * Defines interface for components with open/close public emitter.\n * All implementations of this interface must handle the following events: `beforeOpen`, `open`, `beforeClose`, `close`.\n */\nexport interface OpenCloseComponent {\n  /**\n   * The host element.\n   */\n  readonly el: HTMLElement;\n\n  /**\n   * When true, the component opens.\n   */\n  open?: boolean;\n\n  /**\n   * When true, the component is open.\n   */\n  opened?: boolean;\n\n  /**\n   *  Specifies the name of transitionProp.\n   */\n  transitionProp?: string;\n\n  /**\n   * Specifies property on which active transition is watched for.\n   */\n  openTransitionProp: string;\n\n  /**\n   * Specifies element that the transition is allowed to emit on.\n   */\n  transitionEl: HTMLElement;\n\n  /**\n   * Defines method for `beforeOpen` event handler.\n   */\n  onBeforeOpen: () => void;\n\n  /**\n   * Defines method for `open` event handler:\n   */\n  onOpen: () => void;\n\n  /**\n   * Defines method for `beforeClose` event handler:\n   */\n  onBeforeClose: () => void;\n\n  /**\n   * Defines method for `close` event handler:\n   */\n  onClose: () => void;\n}\n\nfunction isOpen(component: OpenCloseComponent): boolean {\n  return \"opened\" in component ? component.opened : component.open;\n}\n\n/**\n * Helper to determine globally set transition duration on the given openTransitionProp, which is imported and set in the @Watch(\"open\").\n * Used to emit (before)open/close events both for when the opacity transition is present and when there is none (transition-duration is set to 0).\n *\n * @example\n * import { onToggleOpenCloseComponent, OpenCloseComponent } from \"../../utils/openCloseComponent\";\n *\n * async componentWillLoad() {\n * // When component initially renders, if `open` was set we need to trigger on load as watcher doesn't fire.\n * if (this.open) {\n *    onToggleOpenCloseComponent(this);\n * }\n * @Watch(\"open\")\n * async toggleModal(value: boolean): Promise<void> {\n *    onToggleOpenCloseComponent(this);\n * }\n *\n * @param component - OpenCloseComponent uses `open` prop to emit (before)open/close.\n */\nexport function onToggleOpenCloseComponent(component: OpenCloseComponent): void {\n  internalReadTask((): void => {\n    if (!component.transitionEl) {\n      return;\n    }\n\n    whenTransitionDone(\n      component.transitionEl,\n      component.openTransitionProp,\n      () => {\n        if (isOpen(component)) {\n          component.onBeforeOpen();\n        } else {\n          component.onBeforeClose();\n        }\n      },\n      () => {\n        if (isOpen(component)) {\n          component.onOpen();\n        } else {\n          component.onClose();\n        }\n      },\n    );\n  });\n}\n","import { getAssetPath } from \"@stencil/core\";\nimport { getSupportedLocale, LocalizedComponent } from \"./locale\";\nimport { isBrowser } from \"./browser\";\n\nexport type MessageBundle = Record<string, string>;\n\nexport const componentLangToMessageBundleCache: Record<string, Promise<MessageBundle>> = {};\n\nasync function getMessageBundle(lang: string, component: string): Promise<MessageBundle> {\n  const key = `${component}_${lang}`;\n\n  if (componentLangToMessageBundleCache[key]) {\n    return componentLangToMessageBundleCache[key];\n  }\n\n  componentLangToMessageBundleCache[key] = fetch(getAssetPath(`./assets/${component}/t9n/messages_${lang}.json`))\n    .then((resp) => {\n      if (!resp.ok) {\n        throwMessageFetchError();\n      }\n      return resp.json();\n    })\n    .catch(() => throwMessageFetchError());\n\n  return componentLangToMessageBundleCache[key];\n}\n\nfunction throwMessageFetchError(): never {\n  throw new Error(\"could not fetch component message bundle\");\n}\n\nfunction mergeMessages(component: T9nComponent): void {\n  component.messages = {\n    ...component.defaultMessages,\n    ...component.messageOverrides,\n  };\n}\n\nfunction noop(): void {\n  // intentionally empty\n}\n\n/**\n * This utility sets up the messages used by the component. It should be awaited in the `componentWillLoad` lifecycle hook.\n *\n * @param component\n */\nexport async function setUpMessages(component: T9nComponent): Promise<void> {\n  component.defaultMessages = await fetchMessages(component, component.effectiveLocale);\n  mergeMessages(component);\n}\n\nasync function fetchMessages(component: T9nComponent, lang: string): Promise<MessageBundle> {\n  if (!isBrowser()) {\n    return {};\n  }\n\n  const { el } = component;\n  const tag = el.tagName.toLowerCase();\n  const componentName = tag.replace(\"calcite-\", \"\");\n\n  return getMessageBundle(getSupportedLocale(lang, \"t9n\"), componentName);\n}\n\n/**\n * This utility must be set up for the component to update its default message bundle if the locale changes.\n *\n * It can be set up in **either** of the following ways:\n *\n * 1. called from `LocalizedComponent`'s `onLocaleChange` method or\n * 2. called from a watcher configured to watch `LocalizedComponent`'s `effectiveLocale` prop\n *\n * @param component\n * @param lang\n */\nexport async function updateMessages(component: T9nComponent, lang: string): Promise<void> {\n  component.defaultMessages = await fetchMessages(component, lang);\n  mergeMessages(component);\n}\n\n/**\n * This utility sets up internals for messages support.\n *\n * It needs to be called in `connectedCallback`\n *\n * **Note**: this must be called after `LocalizedComponent`'s `connectLocalized` method.\n *\n * @param component\n */\nexport function connectMessages(component: T9nComponent): void {\n  component.onMessagesChange = defaultOnMessagesChange;\n}\n\n/**\n * This utility tears down internals for messages support.\n *\n * It needs to be called in `disconnectedCallback`\n *\n * @param component\n */\nexport function disconnectMessages(component: T9nComponent): void {\n  // we set this to noop to for watchers triggered when components are disconnected\n  component.onMessagesChange = noop;\n}\n\n/**\n * This interface enables components to support built-in translation strings.\n *\n * **Notes**:\n *\n * This requires `LocalizedComponent` to be implemented.\n * To avoid unnecessary lookups, composite components should set `lang` on internal t9n components.\n */\nexport interface T9nComponent extends LocalizedComponent {\n  el: HTMLElement;\n\n  /**\n   * This property holds all messages used by the component's rendering.\n   *\n   * This prop should use the `@Prop` decorator. It uses `@Prop` decorator for testing purpose only.\n   */\n  messages: MessageBundle;\n\n  /**\n   * This property holds the component's default messages.\n   */\n  defaultMessages: MessageBundle;\n\n  /**\n   * This property holds all user message overrides.\n   *\n   * This prop should use the `@Prop` decorator.\n   */\n  messageOverrides: Partial<MessageBundle>;\n\n  /**\n   * This private method ensures messages are kept in sync.\n   *\n   * This method should be empty and configured to watch for changes on  `messageOverrides` property.\n   *\n   * @Watch(\"messageOverrides\")\n   * onMessagesChange(): void {\n   *  \\/* wired up by t9n util *\\/\n   * }\n   */\n  onMessagesChange: () => void;\n}\n\nfunction defaultOnMessagesChange(this: T9nComponent): void {\n  mergeMessages(this);\n}\n"],"names":["CSS","DEFAULTS","width","height","strokeWidth","FloatingArrow","floatingLayout","key","ref","svgX","isVertical","dValue","h","class","viewBox","d","fill","stroke","constrainHeadingLevel","level","Math","min","max","ceil","Heading","props","children","HeadingTag","ARIA_CONTROLS","ARIA_EXPANDED","manager","constructor","registeredElements","Map","registeredElementCount","queryPopover","composedPath","this","registeredElement","find","pathEl","has","get","togglePopovers","event","togglePopover","triggerDisabled","open","Array","from","values","filter","popover","autoClose","includes","forEach","keyDownHandler","defaultPrevented","closeAllPopovers","isActivationKey","clickHandler","isKeyboardTriggeredClick","registerElement","referenceEl","set","addListeners","unregisterElement","delete","removeListeners","window","addEventListener","removeEventListener","Popover","mutationObserver","createObserver","updateFocusTrapElements","guid","openTransitionProp","hasLoaded","setTransitionEl","el","transitionEl","setFilteredPlacements","flipPlacements","filteredFlipPlacements","filterValidFlipPlacements","setUpReferenceElement","warn","removeReferences","effectiveReferenceElement","getReferenceElement","connectFloatingUI","referenceElement","console","tagName","addReferences","getId","id","setExpandedAttr","setAttribute","toAriaBoolean","removeAttribute","hide","storeArrowEl","arrowEl","reposition","defaultOffsetDistance","handleFocusTrapDisabled","focusTrapDisabled","deactivateFocusTrap","activateFocusTrap","flipPlacementsHandler","onMessagesChange","offsetDistanceOffsetHandler","offsetSkiddingHandler","openHandler","onToggleOpenCloseComponent","overlayPositioningHandler","placementHandler","referenceElementHandler","effectiveLocaleChange","updateMessages","effectiveLocale","connectedCallback","observe","childList","subtree","connectLocalized","connectMessages","connectFocusTrap","requestAnimationFrame","componentWillLoad","setUpMessages","setUpLoadableComponent","componentDidLoad","setComponentLoaded","disconnectedCallback","disconnect","disconnectLocalized","disconnectMessages","disconnectFloatingUI","delayed","placement","overlayPositioning","flipDisabled","offsetDistance","offsetSkidding","floatingEl","type","setFocus","componentFocusable","forceUpdate","focusFirstTabbable","queryElementRoots","onBeforeOpen","calcitePopoverBeforeOpen","emit","onOpen","calcitePopoverOpen","onBeforeClose","calcitePopoverBeforeClose","onClose","calcitePopoverClose","renderCloseButton","messages","closable","appearance","onClick","closeButtonEl","scale","text","close","icon","getIconScale","renderHeader","heading","headingLevel","headingNode","render","label","pointerDisabled","displayed","hidden","arrowNode","Host","role","FloatingCSS","animation","animationActive","componentScale","async","componentOnReady","isStencilEl","Promise","resolve","internalReadTask","readTask","isOpen","component","opened","whenTransitionDone","componentLangToMessageBundleCache","throwMessageFetchError","Error","mergeMessages","defaultMessages","messageOverrides","noop","fetchMessages","lang","isBrowser","componentName","toLowerCase","replace","fetch","getAssetPath","then","resp","ok","json","catch","getMessageBundle","getSupportedLocale","defaultOnMessagesChange"],"sourceRoot":""}