{"version":3,"file":"static/js/9017.9b964ef7.chunk.js","mappings":"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","sources":["../node_modules/@esri/calcite-components/dist/esm/src/components/functional/FloatingArrow.tsx","../node_modules/@esri/calcite-components/dist/esm/src/components/tooltip/resources.ts","../node_modules/@esri/calcite-components/dist/esm/src/components/tooltip/utils.ts","../node_modules/@esri/calcite-components/dist/esm/src/components/tooltip/tooltip.scss?tag=calcite-tooltip&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/esm/src/components/tooltip/tooltip.tsx","../node_modules/@esri/calcite-components/dist/esm/src/components/tooltip/TooltipManager.ts","../node_modules/@esri/calcite-components/dist/esm/src/utils/openCloseComponent.ts"],"sourcesContent":["import { FunctionalComponent, h, VNode } from \"@stencil/core\";\nimport { JSXAttributes } from \"@stencil/core/internal\";\nimport { FloatingLayout } from \"../../utils/floating-ui\";\n\ninterface FloatingArrowProps extends JSXAttributes<SVGSVGElement> {\n  floatingLayout: FloatingLayout;\n}\n\nconst CSS = {\n  arrow: \"calcite-floating-ui-arrow\",\n  arrowStroke: \"calcite-floating-ui-arrow__stroke\",\n};\n\nconst DEFAULTS = {\n  width: 12,\n  height: 6,\n  strokeWidth: 1,\n};\n\n/**\n * Renders a SVG element to be used as a floating-ui arrow.\n *\n * This functional component should be rendered inside a `FloatingUIComponent` when it needs an arrow element.\n *\n * @param floatingLayout.floatingLayout\n * @param floatingLayout â€“ The effective floating layout to render the arrow vertically or horizontally. Possible values: `vertical` or `horizontal`.\n *\n * See [floating-ui](https://github.com/Esri/calcite-design-system/blob/dev/src/utils/floating-ui.ts)\n * @param floatingLayout.key\n * @param floatingLayout.ref\n */\nexport const FloatingArrow: FunctionalComponent<FloatingArrowProps> = ({\n  floatingLayout,\n  key,\n  ref,\n}): VNode => {\n  const { width, height, strokeWidth } = DEFAULTS;\n  const svgX = width / 2;\n  const isVertical = floatingLayout === \"vertical\";\n\n  const dValue =\n    \"M0,0\" +\n    ` H${width}` +\n    ` L${width - svgX},${height}` +\n    ` Q${svgX},${height} ${svgX},${height}` +\n    \" Z\";\n\n  return (\n    <svg\n      aria-hidden=\"true\"\n      class={CSS.arrow}\n      height={width}\n      key={key}\n      ref={ref}\n      viewBox={`0 0 ${width} ${width + (!isVertical ? strokeWidth : 0)}`}\n      width={width + (isVertical ? strokeWidth : 0)}\n    >\n      {strokeWidth > 0 && (\n        <path\n          class={CSS.arrowStroke}\n          d={dValue}\n          fill=\"none\"\n          // Account for the stroke on the fill path rendered below.\n          stroke-width={strokeWidth + 1}\n        />\n      )}\n      {/* In Firefox, for left/right placements there's a ~0.5px gap where the\n  border can show through. Adding a stroke on the fill removes it. */}\n      <path d={dValue} stroke=\"none\" />\n    </svg>\n  );\n};\n","export const CSS = {\n  container: \"container\",\n};\n\nexport const TOOLTIP_OPEN_DELAY_MS = 300;\nexport const TOOLTIP_CLOSE_DELAY_MS = 500;\n\nexport const ARIA_DESCRIBED_BY = \"aria-describedby\";\n","import { ReferenceElement } from \"../../utils/floating-ui\";\nimport { queryElementRoots } from \"../../utils/dom\";\n\nexport function getEffectiveReferenceElement(tooltip: HTMLCalciteTooltipElement): ReferenceElement {\n  const { referenceElement } = tooltip;\n\n  return (\n    (typeof referenceElement === \"string\" ? queryElementRoots(tooltip, { id: referenceElement }) : referenceElement) ||\n    null\n  );\n}\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-tooltip-z-index: Sets the z-index value for the component.\n */\n\n:host {\n  --calcite-floating-ui-z-index: var(--calcite-tooltip-z-index, theme(\"zIndex.tooltip\"));\n}\n\n@include floating-ui-host();\n@include floating-ui-arrow();\n\n.container {\n  @apply text-color-1\n    text-n2-wrap\n    relative\n    overflow-hidden\n    rounded\n    py-3\n    px-4\n    font-medium;\n  max-inline-size: 20rem;\n  max-block-size: 20rem;\n  text-align: start;\n}\n\n.calcite-floating-ui-anim {\n  @apply bg-foreground-1\n    border-color-3\n    rounded\n    border\n    border-solid;\n}\n\n.arrow::before {\n  outline: 1px solid var(--calcite-color-border-3);\n}\n\n@include base-component();\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport { toAriaBoolean } from \"../../utils/dom\";\nimport {\n  connectFloatingUI,\n  defaultOffsetDistance,\n  disconnectFloatingUI,\n  FloatingCSS,\n  FloatingLayout,\n  FloatingUIComponent,\n  LogicalPlacement,\n  OverlayPositioning,\n  ReferenceElement,\n  reposition,\n} from \"../../utils/floating-ui\";\nimport { guid } from \"../../utils/guid\";\nimport { onToggleOpenCloseComponent, OpenCloseComponent } from \"../../utils/openCloseComponent\";\nimport { FloatingArrow } from \"../functional/FloatingArrow\";\nimport { ARIA_DESCRIBED_BY, CSS } from \"./resources\";\nimport TooltipManager from \"./TooltipManager\";\nimport { getEffectiveReferenceElement } from \"./utils\";\n\nconst manager = new TooltipManager();\n\n/**\n * @slot - A slot for adding text.\n */\n@Component({\n  tag: \"calcite-tooltip\",\n  styleUrl: \"tooltip.scss\",\n  shadow: true,\n})\nexport class Tooltip implements FloatingUIComponent, OpenCloseComponent {\n  // --------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  // --------------------------------------------------------------------------\n\n  /** Closes the component when the `referenceElement` is clicked. */\n  @Prop({ reflect: true }) closeOnClick = false;\n\n  /**\n   * Accessible name for the component.\n   *\n   * @deprecated No longer necessary. Overrides the context of the component's description, which could confuse assistive technology users.\n   */\n  @Prop() label: string;\n\n  /**\n   * Offset the position of the component away from the `referenceElement`.\n   *\n   * @default 6\n   */\n  @Prop({ reflect: true }) offsetDistance = defaultOffsetDistance;\n\n  @Watch(\"offsetDistance\")\n  offsetDistanceOffsetHandler(): void {\n    this.reposition(true);\n  }\n\n  /**\n   * Offset the position of the component along the `referenceElement`.\n   */\n  @Prop({ reflect: true }) offsetSkidding = 0;\n\n  @Watch(\"offsetSkidding\")\n  offsetSkiddingHandler(): void {\n    this.reposition(true);\n  }\n\n  /**\n   * When `true`, the component is open.\n   */\n  @Prop({ reflect: true }) open = false;\n\n  @Watch(\"open\")\n  openHandler(): void {\n    onToggleOpenCloseComponent(this);\n    this.reposition(true);\n  }\n\n  /**\n   * Determines the type of positioning to use for the overlaid content.\n   *\n   * Using `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n   *\n   * The `\"fixed\"` value should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.\n   *\n   */\n  @Prop({ reflect: true }) overlayPositioning: OverlayPositioning = \"absolute\";\n\n  @Watch(\"overlayPositioning\")\n  overlayPositioningHandler(): void {\n    this.reposition(true);\n  }\n\n  /**\n   * Determines where the component will be positioned relative to the `referenceElement`.\n   */\n  @Prop({ reflect: true }) placement: LogicalPlacement = \"auto\";\n\n  @Watch(\"placement\")\n  placementHandler(): void {\n    this.reposition(true);\n  }\n\n  /**\n   * The `referenceElement` to position the component according to its `\"placement\"` value.\n   *\n   * Setting to the `HTMLElement` is preferred so the component does not need to query the DOM for the `referenceElement`.\n   *\n   * However, a string ID of the reference element can be used.\n   */\n  @Prop() referenceElement: ReferenceElement | string;\n\n  @Watch(\"referenceElement\")\n  referenceElementHandler(): void {\n    this.setUpReferenceElement();\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteTooltipElement;\n\n  @State() effectiveReferenceElement: ReferenceElement;\n\n  @State() floatingLayout: FloatingLayout = \"vertical\";\n\n  arrowEl: SVGSVGElement;\n\n  guid = `calcite-tooltip-${guid()}`;\n\n  openTransitionProp = \"opacity\";\n\n  transitionEl: HTMLDivElement;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  // --------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    this.setUpReferenceElement(true);\n    if (this.open) {\n      onToggleOpenCloseComponent(this);\n    }\n  }\n\n  async componentWillLoad(): Promise<void> {\n    if (this.open) {\n      onToggleOpenCloseComponent(this);\n    }\n  }\n\n  componentDidLoad(): void {\n    if (this.referenceElement && !this.effectiveReferenceElement) {\n      this.setUpReferenceElement();\n    }\n  }\n\n  disconnectedCallback(): void {\n    this.removeReferences();\n    disconnectFloatingUI(this, this.effectiveReferenceElement, this.el);\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  //--------------------------------------------------------------------------\n\n  /** Fires when the component is requested to be closed and before the closing transition begins. */\n  @Event({ cancelable: false }) calciteTooltipBeforeClose: EventEmitter<void>;\n\n  /** Fires when the component is closed and animation is complete. */\n  @Event({ cancelable: false }) calciteTooltipClose: EventEmitter<void>;\n\n  /** Fires when the component is added to the DOM but not rendered, and before the opening transition begins. */\n  @Event({ cancelable: false }) calciteTooltipBeforeOpen: EventEmitter<void>;\n\n  /** Fires when the component is open and animation is complete. */\n  @Event({ cancelable: false }) calciteTooltipOpen: EventEmitter<void>;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * Updates the position of the component.\n   *\n   * @param delayed\n   */\n  @Method()\n  async reposition(delayed = false): Promise<void> {\n    const {\n      el,\n      effectiveReferenceElement,\n      placement,\n      overlayPositioning,\n      offsetDistance,\n      offsetSkidding,\n      arrowEl,\n    } = this;\n\n    return reposition(\n      this,\n      {\n        floatingEl: el,\n        referenceEl: effectiveReferenceElement,\n        overlayPositioning,\n        placement,\n        offsetDistance,\n        offsetSkidding,\n        arrowEl,\n        type: \"tooltip\",\n      },\n      delayed,\n    );\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  // --------------------------------------------------------------------------\n\n  onBeforeOpen(): void {\n    this.calciteTooltipBeforeOpen.emit();\n  }\n\n  onOpen(): void {\n    this.calciteTooltipOpen.emit();\n  }\n\n  onBeforeClose(): void {\n    this.calciteTooltipBeforeClose.emit();\n  }\n\n  onClose(): void {\n    this.calciteTooltipClose.emit();\n  }\n\n  private setTransitionEl = (el): void => {\n    this.transitionEl = el;\n  };\n\n  setUpReferenceElement = (warn = true): void => {\n    this.removeReferences();\n    this.effectiveReferenceElement = getEffectiveReferenceElement(this.el);\n    connectFloatingUI(this, this.effectiveReferenceElement, this.el);\n\n    const { el, referenceElement, effectiveReferenceElement } = this;\n    if (warn && referenceElement && !effectiveReferenceElement) {\n      console.warn(`${el.tagName}: reference-element id \"${referenceElement}\" was not found.`, {\n        el,\n      });\n    }\n\n    this.addReferences();\n  };\n\n  getId = (): string => {\n    return this.el.id || this.guid;\n  };\n\n  addReferences = (): void => {\n    const { effectiveReferenceElement } = this;\n\n    if (!effectiveReferenceElement) {\n      return;\n    }\n\n    const id = this.getId();\n\n    if (\"setAttribute\" in effectiveReferenceElement) {\n      effectiveReferenceElement.setAttribute(ARIA_DESCRIBED_BY, id);\n    }\n\n    manager.registerElement(effectiveReferenceElement, this.el);\n  };\n\n  removeReferences = (): void => {\n    const { effectiveReferenceElement } = this;\n\n    if (!effectiveReferenceElement) {\n      return;\n    }\n\n    if (\"removeAttribute\" in effectiveReferenceElement) {\n      effectiveReferenceElement.removeAttribute(ARIA_DESCRIBED_BY);\n    }\n\n    manager.unregisterElement(effectiveReferenceElement);\n  };\n\n  // --------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  // --------------------------------------------------------------------------\n\n  render(): VNode {\n    const { effectiveReferenceElement, label, open, floatingLayout } = this;\n    const displayed = effectiveReferenceElement && open;\n    const hidden = !displayed;\n\n    return (\n      <Host\n        aria-hidden={toAriaBoolean(hidden)}\n        aria-label={label}\n        aria-live=\"polite\"\n        calcite-hydrated-hidden={hidden}\n        id={this.getId()}\n        role=\"tooltip\"\n      >\n        <div\n          class={{\n            [FloatingCSS.animation]: true,\n            [FloatingCSS.animationActive]: displayed,\n          }}\n          ref={this.setTransitionEl}\n        >\n          <FloatingArrow\n            floatingLayout={floatingLayout}\n            ref={(arrowEl) => (this.arrowEl = arrowEl)}\n          />\n          <div class={CSS.container}>\n            <slot />\n          </div>\n        </div>\n      </Host>\n    );\n  }\n}\n","import { getShadowRootNode } from \"../../utils/dom\";\nimport { ReferenceElement } from \"../../utils/floating-ui\";\nimport { TOOLTIP_OPEN_DELAY_MS, TOOLTIP_CLOSE_DELAY_MS } from \"./resources\";\nimport { getEffectiveReferenceElement } from \"./utils\";\n\nexport default class TooltipManager {\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n\n  private registeredElements = new WeakMap<ReferenceElement, HTMLCalciteTooltipElement>();\n\n  private registeredShadowRootCounts = new WeakMap<ShadowRoot, number>();\n\n  private hoverOpenTimeout: number = null;\n\n  private hoverCloseTimeout: number = null;\n\n  private activeTooltip: HTMLCalciteTooltipElement = null;\n\n  private registeredElementCount = 0;\n\n  private clickedTooltip: HTMLCalciteTooltipElement = null;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  // --------------------------------------------------------------------------\n\n  registerElement(referenceEl: ReferenceElement, tooltip: HTMLCalciteTooltipElement): void {\n    this.registeredElementCount++;\n    this.registeredElements.set(referenceEl, tooltip);\n    const shadowRoot = this.getReferenceElShadowRootNode(referenceEl);\n\n    if (shadowRoot) {\n      this.registerShadowRoot(shadowRoot);\n    }\n\n    if (this.registeredElementCount === 1) {\n      this.addListeners();\n    }\n  }\n\n  unregisterElement(referenceEl: ReferenceElement): void {\n    const shadowRoot = this.getReferenceElShadowRootNode(referenceEl);\n\n    if (shadowRoot) {\n      this.unregisterShadowRoot(shadowRoot);\n    }\n\n    if (this.registeredElements.delete(referenceEl)) {\n      this.registeredElementCount--;\n    }\n\n    if (this.registeredElementCount === 0) {\n      this.removeListeners();\n    }\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  // --------------------------------------------------------------------------\n\n  private queryTooltip = (composedPath: EventTarget[]): HTMLCalciteTooltipElement => {\n    const { registeredElements } = this;\n\n    const registeredElement = (composedPath as HTMLElement[]).find((pathEl) => registeredElements.has(pathEl));\n\n    return registeredElements.get(registeredElement);\n  };\n\n  private keyDownHandler = (event: KeyboardEvent): void => {\n    if (event.key === \"Escape\" && !event.defaultPrevented) {\n      const { activeTooltip } = this;\n\n      if (activeTooltip?.open) {\n        this.clearHoverTimeout();\n        this.closeActiveTooltip();\n\n        const referenceElement = getEffectiveReferenceElement(activeTooltip);\n\n        if (referenceElement instanceof Element && referenceElement.contains(event.target as HTMLElement)) {\n          event.preventDefault();\n        }\n      }\n    }\n  };\n\n  private pointerMoveHandler = (event: PointerEvent): void => {\n    const composedPath = event.composedPath();\n    const { activeTooltip } = this;\n\n    const tooltip = this.queryTooltip(composedPath);\n\n    if (this.pathHasOpenTooltip(tooltip, composedPath)) {\n      this.clearHoverTimeout();\n      return;\n    }\n\n    if (tooltip === this.clickedTooltip) {\n      return;\n    }\n\n    if (tooltip) {\n      this.openHoveredTooltip(tooltip);\n    } else if (activeTooltip?.open) {\n      this.closeHoveredTooltip();\n    }\n\n    this.clickedTooltip = null;\n  };\n\n  private pathHasOpenTooltip(tooltip: HTMLCalciteTooltipElement, composedPath: EventTarget[]): boolean {\n    const { activeTooltip } = this;\n\n    return (\n      (activeTooltip?.open && composedPath.includes(activeTooltip)) || (tooltip?.open && composedPath.includes(tooltip))\n    );\n  }\n\n  private clickHandler = (event: Event): void => {\n    this.clickedTooltip = null;\n    const composedPath = event.composedPath();\n    const tooltip = this.queryTooltip(composedPath);\n\n    if (this.pathHasOpenTooltip(tooltip, composedPath)) {\n      this.clearHoverTimeout();\n      return;\n    }\n\n    this.closeActiveTooltip();\n\n    if (!tooltip) {\n      return;\n    }\n\n    this.clearHoverTimeout();\n\n    if (tooltip.closeOnClick) {\n      this.clickedTooltip = tooltip;\n      this.toggleTooltip(tooltip, false);\n      return;\n    }\n\n    this.toggleTooltip(tooltip, true);\n  };\n\n  private blurHandler = (): void => {\n    this.closeActiveTooltip();\n  };\n\n  private focusInHandler = (event: FocusEvent): void => {\n    const composedPath = event.composedPath();\n    const tooltip = this.queryTooltip(composedPath);\n\n    if (this.pathHasOpenTooltip(tooltip, composedPath)) {\n      this.clearHoverTimeout();\n      return;\n    }\n\n    this.closeTooltipIfNotActive(tooltip);\n\n    if (!tooltip) {\n      return;\n    }\n\n    this.toggleFocusedTooltip(tooltip, true);\n  };\n\n  private addShadowListeners(shadowRoot: ShadowRoot): void {\n    shadowRoot.addEventListener(\"focusin\", this.focusInHandler, { capture: true });\n  }\n\n  private removeShadowListeners(shadowRoot: ShadowRoot): void {\n    shadowRoot.removeEventListener(\"focusin\", this.focusInHandler, { capture: true });\n  }\n\n  private addListeners(): void {\n    window.addEventListener(\"keydown\", this.keyDownHandler, { capture: true });\n    window.addEventListener(\"pointermove\", this.pointerMoveHandler, { capture: true });\n    window.addEventListener(\"click\", this.clickHandler, { capture: true });\n    window.addEventListener(\"focusin\", this.focusInHandler, { capture: true });\n    window.addEventListener(\"blur\", this.blurHandler);\n  }\n\n  private removeListeners(): void {\n    window.removeEventListener(\"keydown\", this.keyDownHandler, { capture: true });\n    window.removeEventListener(\"pointermove\", this.pointerMoveHandler, { capture: true });\n    window.removeEventListener(\"click\", this.clickHandler, { capture: true });\n    window.removeEventListener(\"focusin\", this.focusInHandler, { capture: true });\n    window.removeEventListener(\"blur\", this.blurHandler);\n  }\n\n  private clearHoverOpenTimeout(): void {\n    window.clearTimeout(this.hoverOpenTimeout);\n    this.hoverOpenTimeout = null;\n  }\n\n  private clearHoverCloseTimeout(): void {\n    window.clearTimeout(this.hoverCloseTimeout);\n    this.hoverCloseTimeout = null;\n  }\n\n  private clearHoverTimeout(): void {\n    this.clearHoverOpenTimeout();\n    this.clearHoverCloseTimeout();\n  }\n\n  private closeTooltipIfNotActive(tooltip: HTMLCalciteTooltipElement): void {\n    if (this.activeTooltip !== tooltip) {\n      this.closeActiveTooltip();\n    }\n  }\n\n  private closeActiveTooltip(): void {\n    const { activeTooltip } = this;\n\n    if (activeTooltip?.open) {\n      this.toggleTooltip(activeTooltip, false);\n    }\n  }\n\n  private toggleFocusedTooltip(tooltip: HTMLCalciteTooltipElement, open: boolean): void {\n    if (open) {\n      this.clearHoverTimeout();\n    }\n\n    this.toggleTooltip(tooltip, open);\n  }\n\n  private toggleTooltip(tooltip: HTMLCalciteTooltipElement, open: boolean): void {\n    tooltip.open = open;\n\n    this.activeTooltip = open ? tooltip : null;\n  }\n\n  private openHoveredTooltip = (tooltip: HTMLCalciteTooltipElement): void => {\n    this.hoverOpenTimeout = window.setTimeout(\n      () => {\n        if (this.hoverOpenTimeout === null) {\n          return;\n        }\n\n        this.clearHoverCloseTimeout();\n        this.closeTooltipIfNotActive(tooltip);\n        this.toggleTooltip(tooltip, true);\n      },\n      this.activeTooltip?.open ? 0 : TOOLTIP_OPEN_DELAY_MS,\n    );\n  };\n\n  private closeHoveredTooltip = (): void => {\n    this.hoverCloseTimeout = window.setTimeout(() => {\n      if (this.hoverCloseTimeout === null) {\n        return;\n      }\n\n      this.closeActiveTooltip();\n    }, TOOLTIP_CLOSE_DELAY_MS);\n  };\n\n  private registerShadowRoot(shadowRoot: ShadowRoot): void {\n    const { registeredShadowRootCounts } = this;\n\n    const count = registeredShadowRootCounts.get(shadowRoot);\n    const newCount = Math.min((typeof count === \"number\" ? count : 0) + 1, 1);\n\n    if (newCount === 1) {\n      this.addShadowListeners(shadowRoot);\n    }\n\n    registeredShadowRootCounts.set(shadowRoot, newCount);\n  }\n\n  private unregisterShadowRoot(shadowRoot: ShadowRoot): void {\n    const { registeredShadowRootCounts } = this;\n\n    const count = registeredShadowRootCounts.get(shadowRoot);\n    const newCount = Math.max((typeof count === \"number\" ? count : 1) - 1, 0);\n\n    if (newCount === 0) {\n      this.removeShadowListeners(shadowRoot);\n    }\n\n    registeredShadowRootCounts.set(shadowRoot, newCount);\n  }\n\n  private getReferenceElShadowRootNode(referenceEl: ReferenceElement): ShadowRoot | null {\n    return referenceEl instanceof Element ? getShadowRootNode(referenceEl) : null;\n  }\n}\n","import { readTask } from \"@stencil/core\";\nimport { whenTransitionDone } from \"./dom\";\n\n/**\n * Exported for testing purposes only\n */\nexport const internalReadTask = readTask;\n\n/**\n * Defines interface for components with open/close public emitter.\n * All implementations of this interface must handle the following events: `beforeOpen`, `open`, `beforeClose`, `close`.\n */\nexport interface OpenCloseComponent {\n  /**\n   * The host element.\n   */\n  readonly el: HTMLElement;\n\n  /**\n   * When true, the component opens.\n   */\n  open?: boolean;\n\n  /**\n   * When true, the component is open.\n   */\n  opened?: boolean;\n\n  /**\n   *  Specifies the name of transitionProp.\n   */\n  transitionProp?: string;\n\n  /**\n   * Specifies property on which active transition is watched for.\n   */\n  openTransitionProp: string;\n\n  /**\n   * Specifies element that the transition is allowed to emit on.\n   */\n  transitionEl: HTMLElement;\n\n  /**\n   * Defines method for `beforeOpen` event handler.\n   */\n  onBeforeOpen: () => void;\n\n  /**\n   * Defines method for `open` event handler:\n   */\n  onOpen: () => void;\n\n  /**\n   * Defines method for `beforeClose` event handler:\n   */\n  onBeforeClose: () => void;\n\n  /**\n   * Defines method for `close` event handler:\n   */\n  onClose: () => void;\n}\n\nfunction isOpen(component: OpenCloseComponent): boolean {\n  return \"opened\" in component ? component.opened : component.open;\n}\n\n/**\n * Helper to determine globally set transition duration on the given openTransitionProp, which is imported and set in the @Watch(\"open\").\n * Used to emit (before)open/close events both for when the opacity transition is present and when there is none (transition-duration is set to 0).\n *\n * @example\n * import { onToggleOpenCloseComponent, OpenCloseComponent } from \"../../utils/openCloseComponent\";\n *\n * async componentWillLoad() {\n * // When component initially renders, if `open` was set we need to trigger on load as watcher doesn't fire.\n * if (this.open) {\n *    onToggleOpenCloseComponent(this);\n * }\n * @Watch(\"open\")\n * async toggleModal(value: boolean): Promise<void> {\n *    onToggleOpenCloseComponent(this);\n * }\n *\n * @param component - OpenCloseComponent uses `open` prop to emit (before)open/close.\n */\nexport function onToggleOpenCloseComponent(component: OpenCloseComponent): void {\n  internalReadTask((): void => {\n    if (!component.transitionEl) {\n      return;\n    }\n\n    whenTransitionDone(\n      component.transitionEl,\n      component.openTransitionProp,\n      () => {\n        if (isOpen(component)) {\n          component.onBeforeOpen();\n        } else {\n          component.onBeforeClose();\n        }\n      },\n      () => {\n        if (isOpen(component)) {\n          component.onOpen();\n        } else {\n          component.onClose();\n        }\n      },\n    );\n  });\n}\n"],"names":["CSS","DEFAULTS","width","height","strokeWidth","FloatingArrow","floatingLayout","key","ref","svgX","isVertical","dValue","h","class","viewBox","d","fill","stroke","ARIA_DESCRIBED_BY","getEffectiveReferenceElement","tooltip","referenceElement","queryElementRoots","id","manager","constructor","registeredElements","WeakMap","registeredShadowRootCounts","hoverOpenTimeout","hoverCloseTimeout","activeTooltip","registeredElementCount","clickedTooltip","queryTooltip","composedPath","this","registeredElement","find","pathEl","has","get","keyDownHandler","event","defaultPrevented","open","clearHoverTimeout","closeActiveTooltip","Element","contains","target","preventDefault","pointerMoveHandler","pathHasOpenTooltip","openHoveredTooltip","closeHoveredTooltip","clickHandler","closeOnClick","toggleTooltip","blurHandler","focusInHandler","closeTooltipIfNotActive","toggleFocusedTooltip","window","setTimeout","clearHoverCloseTimeout","registerElement","referenceEl","set","shadowRoot","getReferenceElShadowRootNode","registerShadowRoot","addListeners","unregisterElement","unregisterShadowRoot","delete","removeListeners","includes","addShadowListeners","addEventListener","capture","removeShadowListeners","removeEventListener","clearHoverOpenTimeout","clearTimeout","count","newCount","Math","min","max","getShadowRootNode","Tooltip","guid","openTransitionProp","setTransitionEl","el","transitionEl","setUpReferenceElement","warn","removeReferences","effectiveReferenceElement","connectFloatingUI","console","tagName","addReferences","getId","setAttribute","removeAttribute","defaultOffsetDistance","offsetDistanceOffsetHandler","reposition","offsetSkiddingHandler","openHandler","onToggleOpenCloseComponent","overlayPositioningHandler","placementHandler","referenceElementHandler","connectedCallback","componentWillLoad","componentDidLoad","disconnectedCallback","disconnectFloatingUI","delayed","placement","overlayPositioning","offsetDistance","offsetSkidding","arrowEl","floatingEl","type","onBeforeOpen","calciteTooltipBeforeOpen","emit","onOpen","calciteTooltipOpen","onBeforeClose","calciteTooltipBeforeClose","onClose","calciteTooltipClose","render","label","displayed","hidden","Host","toAriaBoolean","role","FloatingCSS","animation","animationActive","internalReadTask","readTask","isOpen","component","opened","whenTransitionDone"],"sourceRoot":""}