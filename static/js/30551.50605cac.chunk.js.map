{"version":3,"file":"static/js/30551.50605cac.chunk.js","mappings":"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","sources":["../node_modules/@esri/calcite-components/dist/chunks/component.js","../node_modules/@esri/calcite-components/dist/chunks/interactive.js","../node_modules/@esri/calcite-components/dist/chunks/logger.js","../node_modules/@esri/calcite-components/dist/components/calcite-chip-group/customElement.js","../node_modules/lit-html/src/async-directive.ts","../node_modules/lit-html/src/directives/ref.ts"],"sourcesContent":["/*! All material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\nv3.2.1 */\nimport { l as logger } from \"./logger.js\";\nfunction getIconScale(componentScale) {\n  return componentScale === \"l\" ? \"m\" : \"s\";\n}\nfunction warnIfMissingRequiredProp(component, newProp, deprecatedProp) {\n  if (!component[newProp] && !component[deprecatedProp]) {\n    logger.warn(`[${component.el.localName}] \"${newProp.toString()}\" or \"${deprecatedProp.toString()}\" is required.`);\n  }\n}\nfunction isHidden(el) {\n  return el.hidden || el.itemHidden;\n}\nasync function componentFocusable(component) {\n  await component.componentOnReady();\n  await component.updateComplete;\n}\nexport {\n  componentFocusable as c,\n  getIconScale as g,\n  isHidden as i,\n  warnIfMissingRequiredProp as w\n};\n","/*! All material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\nv3.2.1 */\nimport { html } from \"lit-html\";\nimport { safeClassMap } from \"@arcgis/lumina\";\nfunction interceptedClick() {\n  const { disabled } = this;\n  if (!disabled) {\n    HTMLElement.prototype.click.call(this);\n  }\n}\nfunction onPointerDown(event) {\n  const interactiveElement = event.target;\n  if (interactiveElement.disabled) {\n    event.preventDefault();\n  }\n}\nconst nonBubblingWhenDisabledMouseEvents = [\"mousedown\", \"mouseup\", \"click\"];\nfunction onNonBubblingWhenDisabledMouseEvent(event) {\n  const interactiveElement = event.target;\n  if (interactiveElement.disabled) {\n    event.stopImmediatePropagation();\n    event.preventDefault();\n  }\n}\nconst captureOnlyOptions = { capture: true };\nfunction updateHostInteraction(component) {\n  if (component.disabled) {\n    component.el.setAttribute(\"aria-disabled\", \"true\");\n    if (component.el.contains(document.activeElement)) {\n      document.activeElement.blur();\n    }\n    blockInteraction(component);\n    return;\n  }\n  restoreInteraction(component);\n  component.el.removeAttribute(\"aria-disabled\");\n}\nfunction blockInteraction(component) {\n  component.el.click = interceptedClick;\n  addInteractionListeners(component.el);\n}\nfunction addInteractionListeners(element) {\n  element.addEventListener(\"pointerdown\", onPointerDown, captureOnlyOptions);\n  nonBubblingWhenDisabledMouseEvents.forEach((event) => element.addEventListener(event, onNonBubblingWhenDisabledMouseEvent, captureOnlyOptions));\n}\nfunction restoreInteraction(component) {\n  delete component.el.click;\n  removeInteractionListeners(component.el);\n}\nfunction removeInteractionListeners(element) {\n  element.removeEventListener(\"pointerdown\", onPointerDown, captureOnlyOptions);\n  nonBubblingWhenDisabledMouseEvents.forEach((event) => element.removeEventListener(event, onNonBubblingWhenDisabledMouseEvent, captureOnlyOptions));\n}\nconst CSS = {\n  container: \"interaction-container\"\n};\nconst InteractiveContainer = ({ children, disabled }) => html`<div class=${safeClassMap(CSS.container)} .inert=${disabled}>${children}</div>`;\nexport {\n  InteractiveContainer as I,\n  updateHostInteraction as u\n};\n","/*! All material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\nv3.2.1 */\nimport { l as logLevel } from \"./runtime.js\";\nconst loggedDeprecations = /* @__PURE__ */ new Set();\nconst logLevels = {\n  trace: 0,\n  debug: 1,\n  info: 2,\n  warn: 4,\n  error: 8,\n  off: 10\n};\nfunction willLog(level) {\n  return logLevels[level] >= logLevels[logLevel];\n}\nfunction forwardToConsole(level, ...data) {\n  if (!willLog(level)) {\n    return;\n  }\n  const badgeTemplate = \"%ccalcite\";\n  const badgeStyle = \"background: #007AC2; color: #fff; border-radius: 4px; padding: 2px 4px;\";\n  console[level].call(this, badgeTemplate, badgeStyle, ...data);\n}\nlet listFormatter;\nconst logger = {\n  debug: (message) => forwardToConsole(\"debug\", message),\n  info: (message) => forwardToConsole(\"info\", message),\n  warn: (message) => forwardToConsole(\"warn\", message),\n  error: (message) => forwardToConsole(\"error\", message),\n  trace: (message) => forwardToConsole(\"trace\", message),\n  deprecated\n};\nfunction deprecated(context, { component, name, suggested, removalVersion }) {\n  const key = `${context}:${context === \"component\" ? \"\" : component}${name}`;\n  if (loggedDeprecations.has(key)) {\n    return;\n  }\n  loggedDeprecations.add(key);\n  const multiSuggestions = Array.isArray(suggested);\n  if (multiSuggestions && !listFormatter) {\n    listFormatter = new Intl.ListFormat(\"en\", { style: \"long\", type: \"disjunction\" });\n  }\n  const message = `[${name}] ${context} is deprecated and will be removed in ${removalVersion === \"future\" ? `a future version` : `v${removalVersion}`}.${suggested ? ` Use ${multiSuggestions ? listFormatter.format(suggested.map((suggestion) => `\"${suggestion}\"`)) : `\"${suggested}\"`} instead.` : \"\"}`;\n  forwardToConsole(\"warn\", message);\n}\nexport {\n  logger as l\n};\n","/*! All material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\nv3.2.1 */\nimport { c as customElement } from \"../../chunks/runtime.js\";\nimport { html } from \"lit\";\nimport { createRef, ref } from \"lit-html/directives/ref.js\";\nimport { LitElement, createEvent } from \"@arcgis/lumina\";\nimport { d as focusElementInGroup, s as slotChangeGetAssignedElements } from \"../../chunks/dom.js\";\nimport { u as updateHostInteraction, I as InteractiveContainer } from \"../../chunks/interactive.js\";\nimport { c as componentFocusable } from \"../../chunks/component.js\";\nimport { css } from \"@lit/reactive-element/css-tag.js\";\nconst styles = css`:host([disabled]){cursor:default;-webkit-user-select:none;user-select:none;opacity:var(--calcite-opacity-disabled)}:host([disabled]) *,:host([disabled]) ::slotted(*){pointer-events:none}:host{display:flex}.container{display:flex;inline-size:100%;flex-wrap:wrap;gap:.5rem}::slotted(calcite-chip){flex:none}:host([scale=s]) .container{gap:.25rem}:host([scale=l]) .container{gap:.75rem}:host([disabled]) ::slotted([calcite-hydrated][disabled]),:host([disabled]) [calcite-hydrated][disabled]{opacity:1}.interaction-container{display:contents}:host([hidden]){display:none}[hidden]{display:none}`;\nclass ChipGroup extends LitElement {\n  constructor() {\n    super();\n    this.items = [];\n    this.slotRefEl = createRef();\n    this.disabled = false;\n    this.scale = \"m\";\n    this.selectedItems = [];\n    this.selectionMode = \"none\";\n    this.calciteChipGroupSelect = createEvent({ cancelable: false });\n    this.listen(\"calciteInternalChipKeyEvent\", this.calciteInternalChipKeyEventListener);\n    this.listen(\"calciteChipClose\", this.calciteChipCloseListener);\n    this.listen(\"calciteChipSelect\", this.calciteChipSelectListener);\n    this.listen(\"calciteInternalChipSelect\", this.calciteInternalChipSelectListener);\n    this.listen(\"calciteInternalSyncSelectedChips\", this.calciteInternalSyncSelectedChips);\n  }\n  static {\n    this.properties = { disabled: [7, {}, { reflect: true, type: Boolean }], label: 1, scale: [3, {}, { reflect: true }], selectedItems: [0, {}, { attribute: false }], selectionMode: [3, {}, { reflect: true }] };\n  }\n  static {\n    this.styles = styles;\n  }\n  async setFocus() {\n    await componentFocusable(this);\n    if (!this.disabled) {\n      return (this.selectedItems[0] || this.items[0])?.setFocus();\n    }\n  }\n  willUpdate(changes) {\n    if (changes.has(\"selectionMode\") && (this.hasUpdated || this.selectionMode !== \"none\")) {\n      this.updateItems();\n    }\n  }\n  updated() {\n    updateHostInteraction(this);\n  }\n  calciteInternalChipKeyEventListener(event) {\n    if (event.composedPath().includes(this.el)) {\n      const interactiveItems = this.items?.filter((el) => !el.disabled);\n      switch (event.detail.key) {\n        case \"ArrowRight\":\n          focusElementInGroup(interactiveItems, event.detail.target, \"next\");\n          break;\n        case \"ArrowLeft\":\n          focusElementInGroup(interactiveItems, event.detail.target, \"previous\");\n          break;\n        case \"Home\":\n          focusElementInGroup(interactiveItems, event.detail.target, \"first\");\n          break;\n        case \"End\":\n          focusElementInGroup(interactiveItems, event.detail.target, \"last\");\n          break;\n      }\n    }\n    event.stopPropagation();\n  }\n  calciteChipCloseListener(event) {\n    const item = event.target;\n    if (this.items?.includes(item)) {\n      if (this.items?.indexOf(item) > 0) {\n        focusElementInGroup(this.items, item, \"previous\");\n      } else if (this.items?.indexOf(item) === 0) {\n        focusElementInGroup(this.items, item, \"next\");\n      } else {\n        focusElementInGroup(this.items, item, \"first\");\n      }\n    }\n    this.items = this.items?.filter((el) => el !== item);\n    event.stopPropagation();\n  }\n  calciteChipSelectListener(event) {\n    if (event.composedPath().includes(this.el)) {\n      this.setSelectedItems(true, event.target);\n    }\n    event.stopPropagation();\n  }\n  calciteInternalChipSelectListener(event) {\n    if (event.composedPath().includes(this.el)) {\n      this.setSelectedItems(false, event.target);\n    }\n    event.stopPropagation();\n  }\n  calciteInternalSyncSelectedChips(event) {\n    if (event.composedPath().includes(this.el)) {\n      this.updateSelectedItems();\n      if (this.selectionMode === \"single\" && this.selectedItems.length > 1) {\n        this.setSelectedItems(false, event.target);\n      }\n    }\n    event.stopPropagation();\n  }\n  updateItems(event) {\n    const itemsFromSlot = this.slotRefEl.value?.assignedElements({ flatten: true }).filter((el) => el?.matches(\"calcite-chip\"));\n    this.items = !event ? itemsFromSlot : slotChangeGetAssignedElements(event);\n    if (this.items?.length < 1) {\n      return;\n    }\n    this.items?.forEach((el) => {\n      el.interactive = true;\n      el.scale = this.scale;\n      el.selectionMode = this.selectionMode;\n      el.parentChipGroup = this.el;\n    });\n    this.setSelectedItems(false);\n  }\n  updateSelectedItems() {\n    this.selectedItems = this.items?.filter((el) => el.selected);\n  }\n  setSelectedItems(emit, elToMatch) {\n    if (elToMatch) {\n      this.items?.forEach((el) => {\n        const matchingEl = elToMatch === el;\n        switch (this.selectionMode) {\n          case \"multiple\":\n            if (matchingEl) {\n              el.selected = !el.selected;\n            }\n            break;\n          case \"single\":\n            el.selected = matchingEl ? !el.selected : false;\n            break;\n          case \"single-persist\":\n            el.selected = !!matchingEl;\n            break;\n        }\n      });\n    }\n    this.updateSelectedItems();\n    if (emit) {\n      this.calciteChipGroupSelect.emit();\n    }\n  }\n  render() {\n    const role = this.selectionMode === \"none\" || this.selectionMode === \"multiple\" ? \"group\" : \"radiogroup\";\n    const { disabled } = this;\n    return InteractiveContainer({ disabled, children: html`<div .ariaLabel=${this.label} class=\"container\" .role=${role}><slot @slotchange=${this.updateItems} ${ref(this.slotRefEl)}></slot></div>` });\n  }\n}\ncustomElement(\"calcite-chip-group\", ChipGroup);\nexport {\n  ChipGroup\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * Overview:\n *\n * This module is designed to add support for an async `setValue` API and\n * `disconnected` callback to directives with the least impact on the core\n * runtime or payload when that feature is not used.\n *\n * The strategy is to introduce a `AsyncDirective` subclass of\n * `Directive` that climbs the \"parent\" tree in its constructor to note which\n * branches of lit-html's \"logical tree\" of data structures contain such\n * directives and thus need to be crawled when a subtree is being cleared (or\n * manually disconnected) in order to run the `disconnected` callback.\n *\n * The \"nodes\" of the logical tree include Parts, TemplateInstances (for when a\n * TemplateResult is committed to a value of a ChildPart), and Directives; these\n * all implement a common interface called `DisconnectableChild`. Each has a\n * `_$parent` reference which is set during construction in the core code, and a\n * `_$disconnectableChildren` field which is initially undefined.\n *\n * The sparse tree created by means of the `AsyncDirective` constructor\n * crawling up the `_$parent` tree and placing a `_$disconnectableChildren` Set\n * on each parent that includes each child that contains a\n * `AsyncDirective` directly or transitively via its children. In order to\n * notify connection state changes and disconnect (or reconnect) a tree, the\n * `_$notifyConnectionChanged` API is patched onto ChildParts as a directive\n * climbs the parent tree, which is called by the core when clearing a part if\n * it exists. When called, that method iterates over the sparse tree of\n * Set<DisconnectableChildren> built up by AsyncDirectives, and calls\n * `_$notifyDirectiveConnectionChanged` on any directives that are encountered\n * in that tree, running the required callbacks.\n *\n * A given \"logical tree\" of lit-html data-structures might look like this:\n *\n *  ChildPart(N1) _$dC=[D2,T3]\n *   ._directive\n *     AsyncDirective(D2)\n *   ._value // user value was TemplateResult\n *     TemplateInstance(T3) _$dC=[A4,A6,N10,N12]\n *      ._$parts[]\n *        AttributePart(A4) _$dC=[D5]\n *         ._directives[]\n *           AsyncDirective(D5)\n *        AttributePart(A6) _$dC=[D7,D8]\n *         ._directives[]\n *           AsyncDirective(D7)\n *           Directive(D8) _$dC=[D9]\n *            ._directive\n *              AsyncDirective(D9)\n *        ChildPart(N10) _$dC=[D11]\n *         ._directive\n *           AsyncDirective(D11)\n *         ._value\n *           string\n *        ChildPart(N12) _$dC=[D13,N14,N16]\n *         ._directive\n *           AsyncDirective(D13)\n *         ._value // user value was iterable\n *           Array<ChildPart>\n *             ChildPart(N14) _$dC=[D15]\n *              ._value\n *                string\n *             ChildPart(N16) _$dC=[D17,T18]\n *              ._directive\n *                AsyncDirective(D17)\n *              ._value // user value was TemplateResult\n *                TemplateInstance(T18) _$dC=[A19,A21,N25]\n *                 ._$parts[]\n *                   AttributePart(A19) _$dC=[D20]\n *                    ._directives[]\n *                      AsyncDirective(D20)\n *                   AttributePart(A21) _$dC=[22,23]\n *                    ._directives[]\n *                      AsyncDirective(D22)\n *                      Directive(D23) _$dC=[D24]\n *                       ._directive\n *                         AsyncDirective(D24)\n *                   ChildPart(N25) _$dC=[D26]\n *                    ._directive\n *                      AsyncDirective(D26)\n *                    ._value\n *                      string\n *\n * Example 1: The directive in ChildPart(N12) updates and returns `nothing`. The\n * ChildPart will _clear() itself, and so we need to disconnect the \"value\" of\n * the ChildPart (but not its directive). In this case, when `_clear()` calls\n * `_$notifyConnectionChanged()`, we don't iterate all of the\n * _$disconnectableChildren, rather we do a value-specific disconnection: i.e.\n * since the _value was an Array<ChildPart> (because an iterable had been\n * committed), we iterate the array of ChildParts (N14, N16) and run\n * `setConnected` on them (which does recurse down the full tree of\n * `_$disconnectableChildren` below it, and also removes N14 and N16 from N12's\n * `_$disconnectableChildren`). Once the values have been disconnected, we then\n * check whether the ChildPart(N12)'s list of `_$disconnectableChildren` is empty\n * (and would remove it from its parent TemplateInstance(T3) if so), but since\n * it would still contain its directive D13, it stays in the disconnectable\n * tree.\n *\n * Example 2: In the course of Example 1, `setConnected` will reach\n * ChildPart(N16); in this case the entire part is being disconnected, so we\n * simply iterate all of N16's `_$disconnectableChildren` (D17,T18) and\n * recursively run `setConnected` on them. Note that we only remove children\n * from `_$disconnectableChildren` for the top-level values being disconnected\n * on a clear; doing this bookkeeping lower in the tree is wasteful since it's\n * all being thrown away.\n *\n * Example 3: If the LitElement containing the entire tree above becomes\n * disconnected, it will run `childPart.setConnected()` (which calls\n * `childPart._$notifyConnectionChanged()` if it exists); in this case, we\n * recursively run `setConnected()` over the entire tree, without removing any\n * children from `_$disconnectableChildren`, since this tree is required to\n * re-connect the tree, which does the same operation, simply passing\n * `isConnected: true` down the tree, signaling which callback to run.\n */\n\nimport {AttributePart, ChildPart, Disconnectable, Part} from './lit-html.js';\nimport {isSingleExpression} from './directive-helpers.js';\nimport {Directive, PartInfo, PartType} from './directive.js';\nexport * from './directive.js';\n\nconst DEV_MODE = true;\n\n/**\n * Recursively walks down the tree of Parts/TemplateInstances/Directives to set\n * the connected state of directives and run `disconnected`/ `reconnected`\n * callbacks.\n *\n * @return True if there were children to disconnect; false otherwise\n */\nconst notifyChildrenConnectedChanged = (\n  parent: Disconnectable,\n  isConnected: boolean\n): boolean => {\n  const children = parent._$disconnectableChildren;\n  if (children === undefined) {\n    return false;\n  }\n  for (const obj of children) {\n    // The existence of `_$notifyDirectiveConnectionChanged` is used as a \"brand\" to\n    // disambiguate AsyncDirectives from other DisconnectableChildren\n    // (as opposed to using an instanceof check to know when to call it); the\n    // redundancy of \"Directive\" in the API name is to avoid conflicting with\n    // `_$notifyConnectionChanged`, which exists `ChildParts` which are also in\n    // this list\n    // Disconnect Directive (and any nested directives contained within)\n    // This property needs to remain unminified.\n    (obj as AsyncDirective)['_$notifyDirectiveConnectionChanged']?.(\n      isConnected,\n      false\n    );\n    // Disconnect Part/TemplateInstance\n    notifyChildrenConnectedChanged(obj, isConnected);\n  }\n  return true;\n};\n\n/**\n * Removes the given child from its parent list of disconnectable children, and\n * if the parent list becomes empty as a result, removes the parent from its\n * parent, and so forth up the tree when that causes subsequent parent lists to\n * become empty.\n */\nconst removeDisconnectableFromParent = (obj: Disconnectable) => {\n  let parent, children;\n  do {\n    if ((parent = obj._$parent) === undefined) {\n      break;\n    }\n    children = parent._$disconnectableChildren!;\n    children.delete(obj);\n    obj = parent;\n  } while (children?.size === 0);\n};\n\nconst addDisconnectableToParent = (obj: Disconnectable) => {\n  // Climb the parent tree, creating a sparse tree of children needing\n  // disconnection\n  for (let parent; (parent = obj._$parent); obj = parent) {\n    let children = parent._$disconnectableChildren;\n    if (children === undefined) {\n      parent._$disconnectableChildren = children = new Set();\n    } else if (children.has(obj)) {\n      // Once we've reached a parent that already contains this child, we\n      // can short-circuit\n      break;\n    }\n    children.add(obj);\n    installDisconnectAPI(parent);\n  }\n};\n\n/**\n * Changes the parent reference of the ChildPart, and updates the sparse tree of\n * Disconnectable children accordingly.\n *\n * Note, this method will be patched onto ChildPart instances and called from\n * the core code when parts are moved between different parents.\n */\nfunction reparentDisconnectables(this: ChildPart, newParent: Disconnectable) {\n  if (this._$disconnectableChildren !== undefined) {\n    removeDisconnectableFromParent(this);\n    this._$parent = newParent;\n    addDisconnectableToParent(this);\n  } else {\n    this._$parent = newParent;\n  }\n}\n\n/**\n * Sets the connected state on any directives contained within the committed\n * value of this part (i.e. within a TemplateInstance or iterable of\n * ChildParts) and runs their `disconnected`/`reconnected`s, as well as within\n * any directives stored on the ChildPart (when `valueOnly` is false).\n *\n * `isClearingValue` should be passed as `true` on a top-level part that is\n * clearing itself, and not as a result of recursively disconnecting directives\n * as part of a `clear` operation higher up the tree. This both ensures that any\n * directive on this ChildPart that produced a value that caused the clear\n * operation is not disconnected, and also serves as a performance optimization\n * to avoid needless bookkeeping when a subtree is going away; when clearing a\n * subtree, only the top-most part need to remove itself from the parent.\n *\n * `fromPartIndex` is passed only in the case of a partial `_clear` running as a\n * result of truncating an iterable.\n *\n * Note, this method will be patched onto ChildPart instances and called from the\n * core code when parts are cleared or the connection state is changed by the\n * user.\n */\nfunction notifyChildPartConnectedChanged(\n  this: ChildPart,\n  isConnected: boolean,\n  isClearingValue = false,\n  fromPartIndex = 0\n) {\n  const value = this._$committedValue;\n  const children = this._$disconnectableChildren;\n  if (children === undefined || children.size === 0) {\n    return;\n  }\n  if (isClearingValue) {\n    if (Array.isArray(value)) {\n      // Iterable case: Any ChildParts created by the iterable should be\n      // disconnected and removed from this ChildPart's disconnectable\n      // children (starting at `fromPartIndex` in the case of truncation)\n      for (let i = fromPartIndex; i < value.length; i++) {\n        notifyChildrenConnectedChanged(value[i], false);\n        removeDisconnectableFromParent(value[i]);\n      }\n    } else if (value != null) {\n      // TemplateInstance case: If the value has disconnectable children (will\n      // only be in the case that it is a TemplateInstance), we disconnect it\n      // and remove it from this ChildPart's disconnectable children\n      notifyChildrenConnectedChanged(value as Disconnectable, false);\n      removeDisconnectableFromParent(value as Disconnectable);\n    }\n  } else {\n    notifyChildrenConnectedChanged(this, isConnected);\n  }\n}\n\n/**\n * Patches disconnection API onto ChildParts.\n */\nconst installDisconnectAPI = (obj: Disconnectable) => {\n  if ((obj as ChildPart).type == PartType.CHILD) {\n    (obj as ChildPart)._$notifyConnectionChanged ??=\n      notifyChildPartConnectedChanged;\n    (obj as ChildPart)._$reparentDisconnectables ??= reparentDisconnectables;\n  }\n};\n\n/**\n * An abstract `Directive` base class whose `disconnected` method will be\n * called when the part containing the directive is cleared as a result of\n * re-rendering, or when the user calls `part.setConnected(false)` on\n * a part that was previously rendered containing the directive (as happens\n * when e.g. a LitElement disconnects from the DOM).\n *\n * If `part.setConnected(true)` is subsequently called on a\n * containing part, the directive's `reconnected` method will be called prior\n * to its next `update`/`render` callbacks. When implementing `disconnected`,\n * `reconnected` should also be implemented to be compatible with reconnection.\n *\n * Note that updates may occur while the directive is disconnected. As such,\n * directives should generally check the `this.isConnected` flag during\n * render/update to determine whether it is safe to subscribe to resources\n * that may prevent garbage collection.\n */\nexport abstract class AsyncDirective extends Directive {\n  // As opposed to other Disconnectables, AsyncDirectives always get notified\n  // when the RootPart connection changes, so the public `isConnected`\n  // is a locally stored variable initialized via its part's getter and synced\n  // via `_$notifyDirectiveConnectionChanged`. This is cheaper than using\n  // the _$isConnected getter, which has to look back up the tree each time.\n  /**\n   * The connection state for this Directive.\n   */\n  isConnected!: boolean;\n\n  // @internal\n  override _$disconnectableChildren?: Set<Disconnectable> = undefined;\n  /**\n   * Initialize the part with internal fields\n   * @param part\n   * @param parent\n   * @param attributeIndex\n   */\n  override _$initialize(\n    part: Part,\n    parent: Disconnectable,\n    attributeIndex: number | undefined\n  ) {\n    super._$initialize(part, parent, attributeIndex);\n    addDisconnectableToParent(this);\n    this.isConnected = part._$isConnected;\n  }\n  // This property needs to remain unminified.\n  /**\n   * Called from the core code when a directive is going away from a part (in\n   * which case `shouldRemoveFromParent` should be true), and from the\n   * `setChildrenConnected` helper function when recursively changing the\n   * connection state of a tree (in which case `shouldRemoveFromParent` should\n   * be false).\n   *\n   * @param isConnected\n   * @param isClearingDirective - True when the directive itself is being\n   *     removed; false when the tree is being disconnected\n   * @internal\n   */\n  override ['_$notifyDirectiveConnectionChanged'](\n    isConnected: boolean,\n    isClearingDirective = true\n  ) {\n    if (isConnected !== this.isConnected) {\n      this.isConnected = isConnected;\n      if (isConnected) {\n        this.reconnected?.();\n      } else {\n        this.disconnected?.();\n      }\n    }\n    if (isClearingDirective) {\n      notifyChildrenConnectedChanged(this, isConnected);\n      removeDisconnectableFromParent(this);\n    }\n  }\n\n  /**\n   * Sets the value of the directive's Part outside the normal `update`/`render`\n   * lifecycle of a directive.\n   *\n   * This method should not be called synchronously from a directive's `update`\n   * or `render`.\n   *\n   * @param directive The directive to update\n   * @param value The value to set\n   */\n  setValue(value: unknown) {\n    if (isSingleExpression(this.__part as unknown as PartInfo)) {\n      this.__part._$setValue(value, this);\n    } else {\n      // this.__attributeIndex will be defined in this case, but\n      // assert it in dev mode\n      if (DEV_MODE && this.__attributeIndex === undefined) {\n        throw new Error(`Expected this.__attributeIndex to be a number`);\n      }\n      const newValues = [...(this.__part._$committedValue as Array<unknown>)];\n      newValues[this.__attributeIndex!] = value;\n      (this.__part as AttributePart)._$setValue(newValues, this, 0);\n    }\n  }\n\n  /**\n   * User callbacks for implementing logic to release any resources/subscriptions\n   * that may have been retained by this directive. Since directives may also be\n   * re-connected, `reconnected` should also be implemented to restore the\n   * working state of the directive prior to the next render.\n   */\n  protected disconnected() {}\n  protected reconnected() {}\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport {nothing, ElementPart} from '../lit-html.js';\nimport {directive, AsyncDirective} from '../async-directive.js';\n\n/**\n * Creates a new Ref object, which is container for a reference to an element.\n */\nexport const createRef = <T = Element>() => new Ref<T>();\n\n/**\n * An object that holds a ref value.\n */\nclass Ref<T = Element> {\n  /**\n   * The current Element value of the ref, or else `undefined` if the ref is no\n   * longer rendered.\n   */\n  readonly value?: T;\n}\n\nexport type {Ref};\n\ninterface RefInternal {\n  value: Element | undefined;\n}\n\n// When callbacks are used for refs, this map tracks the last value the callback\n// was called with, for ensuring a directive doesn't clear the ref if the ref\n// has already been rendered to a new spot. It is double-keyed on both the\n// context (`options.host`) and the callback, since we auto-bind class methods\n// to `options.host`.\nconst lastElementForContextAndCallback = new WeakMap<\n  object,\n  WeakMap<Function, Element | undefined>\n>();\n\nexport type RefOrCallback<T = Element> = Ref<T> | ((el: T | undefined) => void);\n\nclass RefDirective extends AsyncDirective {\n  private _element?: Element;\n  private _ref?: RefOrCallback;\n  private _context?: object;\n\n  render(_ref?: RefOrCallback) {\n    return nothing;\n  }\n\n  override update(part: ElementPart, [ref]: Parameters<this['render']>) {\n    const refChanged = ref !== this._ref;\n    if (refChanged && this._ref !== undefined) {\n      // The ref passed to the directive has changed;\n      // unset the previous ref's value\n      this._updateRefValue(undefined);\n    }\n    if (refChanged || this._lastElementForRef !== this._element) {\n      // We either got a new ref or this is the first render;\n      // store the ref/element & update the ref value\n      this._ref = ref;\n      this._context = part.options?.host;\n      this._updateRefValue((this._element = part.element));\n    }\n    return nothing;\n  }\n\n  private _updateRefValue(element: Element | undefined) {\n    if (!this.isConnected) {\n      element = undefined;\n    }\n    if (typeof this._ref === 'function') {\n      // If the current ref was called with a previous value, call with\n      // `undefined`; We do this to ensure callbacks are called in a consistent\n      // way regardless of whether a ref might be moving up in the tree (in\n      // which case it would otherwise be called with the new value before the\n      // previous one unsets it) and down in the tree (where it would be unset\n      // before being set). Note that element lookup is keyed by\n      // both the context and the callback, since we allow passing unbound\n      // functions that are called on options.host, and we want to treat\n      // these as unique \"instances\" of a function.\n      const context = this._context ?? globalThis;\n      let lastElementForCallback =\n        lastElementForContextAndCallback.get(context);\n      if (lastElementForCallback === undefined) {\n        lastElementForCallback = new WeakMap();\n        lastElementForContextAndCallback.set(context, lastElementForCallback);\n      }\n      if (lastElementForCallback.get(this._ref) !== undefined) {\n        this._ref.call(this._context, undefined);\n      }\n      lastElementForCallback.set(this._ref, element);\n      // Call the ref with the new element value\n      if (element !== undefined) {\n        this._ref.call(this._context, element);\n      }\n    } else {\n      (this._ref as RefInternal)!.value = element;\n    }\n  }\n\n  private get _lastElementForRef() {\n    return typeof this._ref === 'function'\n      ? lastElementForContextAndCallback\n          .get(this._context ?? globalThis)\n          ?.get(this._ref)\n      : this._ref?.value;\n  }\n\n  override disconnected() {\n    // Only clear the box if our element is still the one in it (i.e. another\n    // directive instance hasn't rendered its element to it before us); that\n    // only happens in the event of the directive being cleared (not via manual\n    // disconnection)\n    if (this._lastElementForRef === this._element) {\n      this._updateRefValue(undefined);\n    }\n  }\n\n  override reconnected() {\n    // If we were manually disconnected, we can safely put our element back in\n    // the box, since no rendering could have occurred to change its state\n    this._updateRefValue(this._element);\n  }\n}\n\n/**\n * Sets the value of a Ref object or calls a ref callback with the element it's\n * bound to.\n *\n * A Ref object acts as a container for a reference to an element. A ref\n * callback is a function that takes an element as its only argument.\n *\n * The ref directive sets the value of the Ref object or calls the ref callback\n * during rendering, if the referenced element changed.\n *\n * Note: If a ref callback is rendered to a different element position or is\n * removed in a subsequent render, it will first be called with `undefined`,\n * followed by another call with the new element it was rendered to (if any).\n *\n * ```js\n * // Using Ref object\n * const inputRef = createRef();\n * render(html`<input ${ref(inputRef)}>`, container);\n * inputRef.value.focus();\n *\n * // Using callback\n * const callback = (inputElement) => inputElement.focus();\n * render(html`<input ${ref(callback)}>`, container);\n * ```\n */\nexport const ref = directive(RefDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {RefDirective};\n"],"names":["getIconScale","componentScale","warnIfMissingRequiredProp","component","newProp","deprecatedProp","logger","warn","el","localName","toString","isHidden","hidden","itemHidden","async","componentFocusable","componentOnReady","updateComplete","interceptedClick","disabled","this","HTMLElement","prototype","click","call","onPointerDown","event","target","preventDefault","nonBubblingWhenDisabledMouseEvents","onNonBubblingWhenDisabledMouseEvent","stopImmediatePropagation","captureOnlyOptions","capture","updateHostInteraction","setAttribute","contains","document","activeElement","blur","element","addEventListener","forEach","blockInteraction","removeEventListener","restoreInteraction","removeAttribute","CSS","InteractiveContainer","children","html","safeClassMap","loggedDeprecations","Set","logLevels","trace","debug","info","error","off","forwardToConsole","level","data","logLevel","willLog","console","listFormatter","message","deprecated","context","name","suggested","removalVersion","key","has","add","multiSuggestions","Array","isArray","Intl","ListFormat","style","type","format","map","suggestion","styles","css","ChipGroup","LitElement","constructor","super","items","slotRefEl","createRef","scale","selectedItems","selectionMode","calciteChipGroupSelect","createEvent","cancelable","listen","calciteInternalChipKeyEventListener","calciteChipCloseListener","calciteChipSelectListener","calciteInternalChipSelectListener","calciteInternalSyncSelectedChips","properties","reflect","Boolean","label","attribute","setFocus","willUpdate","changes","hasUpdated","updateItems","updated","composedPath","includes","interactiveItems","filter","detail","focusElementInGroup","stopPropagation","item","indexOf","setSelectedItems","updateSelectedItems","length","itemsFromSlot","value","assignedElements","flatten","matches","slotChangeGetAssignedElements","interactive","parentChipGroup","selected","emit","elToMatch","matchingEl","render","role","ref","customElement","s","notifyChildrenConnectedChanged","i","t","e","_$AN","_$AO","o","_$AM","delete","size","r","c","h","n","_$AH","CHILD","_$AP","_$AQ","f","arguments","_$AT","isConnected","_$AU","reconnected","disconnected","setValue","_$Ct","_$AI","_$Ci","WeakMap","update","G","rt","lt","ct","ht","options","host","globalThis","get","set"],"sourceRoot":""}