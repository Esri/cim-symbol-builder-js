(this["webpackJsonpmy-app"]=this["webpackJsonpmy-app"]||[]).push([[245],{589:function(e,t,s){"use strict";s.r(t),s.d(t,"execute",(function(){return o}));var a=s(8),r=s(2);let n;function o(e,t){let s=t.responseType;s?"array-buffer"!==s&&"blob"!==s&&"json"!==s&&"native"!==s&&"native-request-init"!==s&&"text"!==s&&(s="text"):s="json",t.responseType=s;const o=Object(r.q)(t.signal);return delete t.signal,globalThis.invokeStaticMessage("request",{url:e,options:t},{signal:o}).then(async r=>{let i,l,u,c,p;if(r.data)if(r.data instanceof ArrayBuffer){if(!("json"!==s&&"text"!==s&&"blob"!==s||(i=new Blob([r.data]),"json"!==s&&"text"!==s||(n||(n=new FileReaderSync),c=n.readAsText(i),"json"!==s)))){try{l=JSON.parse(c||null)}catch(b){const s={...b,url:e,requestOptions:t};throw new a.a("request:server",b.message,s)}if(l.error){const s={...l.error,url:e,requestOptions:t};throw new a.a("request:server",l.error.message,s)}}}else"native"===s&&(r.data.signal=o,u=await fetch(r.data.url,r.data));switch(s){case"blob":p=i;break;case"json":p=l;break;case"native":p=u;break;case"text":p=c;break;default:p=r.data}return{data:p,requestOptions:t,ssl:r.ssl,url:e}})}}}]);
//# sourceMappingURL=245.1cc1685a.chunk.js.map