"use strict";(globalThis.webpackChunkmy_app=globalThis.webpackChunkmy_app||[]).push([[16461],{16461:(e,r,t)=>{t.r(r),t.d(r,{default:()=>h});t(59486);var s=t(42306),o=t(96212),i=t(45502),a=t(17314),n=t(53531),l=t(80394),c=t(21449),m=t(64145),f=t(77960),u=t(43238),p=t(55185),S=t(53866),d=t(585);class h{convertVectorFieldData(e){const r=o.Z.fromJSON(e.pixelBlock),t=(0,m.KC)(r,e.type);return Promise.resolve(null!=t?t.toJSON():null)}computeStatisticsHistograms(e){const r=o.Z.fromJSON(e.pixelBlock),t=(0,c.js)(r);return Promise.resolve(t)}async decode(e){const r=await(0,i.J)(e.data,e.options);return r&&r.toJSON()}symbolize(e){e.pixelBlock=o.Z.fromJSON(e.pixelBlock),e.extent=e.extent?S.Z.fromJSON(e.extent):null;const r=this.symbolizer.symbolize(e);return Promise.resolve(null!=r?r.toJSON():null)}async updateSymbolizer(e){this.symbolizer=u.Z.fromJSON(e.symbolizerJSON),e.histograms&&"rasterStretch"===this.symbolizer?.rendererJSON.type&&(this.symbolizer.rendererJSON.histograms=e.histograms)}async updateRasterFunction(e){this.rasterFunction=(0,n.Ue)(e.rasterFunctionJSON)}async process(e){const r=this.rasterFunction.process({extent:S.Z.fromJSON(e.extent),primaryPixelBlocks:e.primaryPixelBlocks.map((e=>null!=e?o.Z.fromJSON(e):null)),primaryPixelSizes:e.primaryPixelSizes?.map((e=>null!=e?d.Z.fromJSON(e):null)),primaryRasterIds:e.primaryRasterIds});return null!=r?r.toJSON():null}stretch(e){const r=this.symbolizer.simpleStretch(o.Z.fromJSON(e.srcPixelBlock),e.stretchParams);return Promise.resolve(r?.toJSON())}estimateStatisticsHistograms(e){const r=(0,c.Hv)(o.Z.fromJSON(e.srcPixelBlock));return Promise.resolve(r)}split(e){const r=(0,a.Vl)(o.Z.fromJSON(e.srcPixelBlock),e.tileSize,e.maximumPyramidLevel);return r&&r.forEach(((e,t)=>{r.set(t,e?.toJSON())})),Promise.resolve(r)}async mosaicAndTransform(e){const r=e.srcPixelBlocks.map((e=>e?new o.Z(e):null)),t=(0,a.us)(r,e.srcMosaicSize,{blockWidths:e.blockWidths,alignmentInfo:e.alignmentInfo,clipOffset:e.clipOffset,clipSize:e.clipSize});let s,i=t;return e.coefs&&(i=(0,a.Uk)(t,e.destDimension,e.coefs,e.sampleSpacing,e.interpolation)),e.projectDirections&&e.gcsGrid&&(s=(0,a.Qh)(e.destDimension,e.gcsGrid),i=(0,m.xQ)(i,e.isUV?"vector-uv":"vector-magdir",s)),{pixelBlock:i?.toJSON(),localNorthDirections:s}}async createFlowMesh(e,r){const t={data:new Float32Array(e.flowData.buffer),mask:new Uint8Array(e.flowData.maskBuffer),width:e.flowData.width,height:e.flowData.height},{vertexData:s,indexData:o}=await(0,p.GE)(e.meshType,e.simulationSettings,t,r.signal);return{result:{vertexBuffer:s.buffer,indexBuffer:o.buffer},transferList:[s.buffer,o.buffer]}}async getProjectionOffsetGrid(e){const r=S.Z.fromJSON(e.projectedExtent),t=S.Z.fromJSON(e.srcBufferExtent);let o=null;e.datumTransformationSteps&&(o=new s.Z({steps:e.datumTransformationSteps})),(e.includeGCSGrid||(0,l.Mk)(r.spatialReference,t.spatialReference,o))&&await(0,l.zD)();const i=e.rasterTransform?(0,f.c)(e.rasterTransform):null;return(0,l.Qp)({...e,projectedExtent:r,srcBufferExtent:t,datumTransformation:o,rasterTransform:i})}}}}]);
//# sourceMappingURL=16461.3ececda2.chunk.js.map