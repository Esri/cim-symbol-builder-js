"use strict";(globalThis.webpackChunkmy_app=globalThis.webpackChunkmy_app||[]).push([[8023],{28023:(e,t,a)=>{a.r(t),a.d(t,{execute:()=>o});var s=a(10064),r=a(92026);let n;function o(e,t){let a=t.responseType;a?"array-buffer"!==a&&"blob"!==a&&"json"!==a&&"native"!==a&&"native-request-init"!==a&&"text"!==a&&(a="text"):a="json",t.responseType=a;const o=(0,r.Wg)(t.signal);return delete t.signal,globalThis.invokeStaticMessage("request",{url:e,options:t},{signal:o}).then((async r=>{let l,i,u,c,b;if(r.data)if(r.data instanceof ArrayBuffer){if(!("json"!==a&&"text"!==a&&"blob"!==a||(l=new Blob([r.data]),"json"!==a&&"text"!==a||(n||(n=new FileReaderSync),c=n.readAsText(l),"json"!==a)))){try{i=JSON.parse(c||null)}catch(p){const a={...p,url:e,requestOptions:t};throw new s.Z("request:server",p.message,a)}if(i.error){const a={...i.error,url:e,requestOptions:t};throw new s.Z("request:server",i.error.message,a)}}}else"native"===a&&(r.data.signal=o,u=await fetch(r.data.url,r.data));switch(a){case"blob":b=l;break;case"json":b=i;break;case"native":b=u;break;case"text":b=c;break;default:b=r.data}return{data:b,requestOptions:t,ssl:r.ssl,url:e}}))}}}]);
//# sourceMappingURL=8023.377257ea.chunk.js.map