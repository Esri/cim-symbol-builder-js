{"version":3,"file":"static/js/1468.933bb325.chunk.js","mappings":";6NAAO,MAAMA,EACJ,QADIA,EAEF,UAGEC,EACR,GADQA,EAGR,ICgBQC,EAAK,qCAuChB,KAAAC,gBAAiBC,EAAAA,EAAAA,GAAe,UAAU,IAAMC,KAAKC,iBAsE7C,KAAAC,wBAA2BC,IACjCH,KAAKI,YAAaC,EAAAA,EAAAA,GAAqBF,EAAM,EAGvC,KAAAG,cAAiBC,IACvBP,KAAKQ,SAAWD,EAChBP,KAAKC,cAAc,gBAzGc,6HAqCR,oBAOL,EA3BtBQ,gBAAAA,IAuBAC,qBAAAA,IACEC,EAAAA,EAAAA,GAAeX,KAAMA,KAAKY,iBAW5BC,iBAAAA,IACEC,EAAAA,EAAAA,GAAiBd,OACjBe,EAAAA,EAAAA,GAAgBf,MAChBA,KAAKF,gBAAgBkB,QAAQhB,KAAKO,IAGpC,uBAAMU,SACEC,EAAAA,EAAAA,GAAclB,MAGtBmB,oBAAAA,IACEC,EAAAA,EAAAA,GAAoBpB,OACpBqB,EAAAA,EAAAA,GAAmBrB,MACnBA,KAAKF,gBAAgBwB,aASvBC,MAAAA,GACE,MAAM,WAAEnB,EAAU,QAAEoB,EAAO,SAAEC,GAAazB,KAE1C,OACE0B,EAAAA,EAAAA,GAAA,OAAAC,IAAA,2CAAKC,MAAOjC,GACT6B,GACCE,EAAAA,EAAAA,GAAA,kBACEG,MAAOJ,EAASD,QAChBM,IAAK9B,KAAKM,cACVyB,MAAO/B,KAAKgC,cAEZ,MACJN,EAAAA,EAAAA,GAAA,OAAAC,IAAA,2CAAKC,MAAOjC,EAAasC,QAAS7B,IAChCsB,EAAAA,EAAAA,GAAA,QAAAC,IAAA,2CAAMO,aAAclC,KAAKE,4BAqBzBiC,QAAAA,CAASC,GACf,OAAIA,EAAOxC,EACF,IACEwC,GAAQxC,EACV,IAEA,IAIHK,YAAAA,GACN,MAAM,SAAEO,EAAQ,GAAED,GAAOP,KAEpBQ,IAILR,KAAKgC,YAAchC,KAAKmC,SAASE,KAAKC,IAAI/B,EAAGgC,aAAchC,EAAGiC,cAAgB,kMC/JjE,wyBCMV,MAAMC,EAA4E,CAAC,EAqB1F,SAASC,IACP,MAAM,IAAIC,MAAM,2CAClB,CAEA,SAASC,EAAcC,GACrBA,EAAUpB,SAAW,IAChBoB,EAAUC,mBACVD,EAAUE,iBAEjB,CAEA,SAASC,KASFC,eAAe/B,EAAc2B,GAClCA,EAAUC,sBAAwBI,EAAcL,EAAWA,EAAUjC,iBACrEgC,EAAcC,EAChB,CAEAI,eAAeC,EAAcL,EAAyBM,GACpD,KAAKC,EAAAA,EAAAA,KACH,MAAO,CAAC,EAGV,MAAM,GAAE7C,GAAOsC,EAETQ,EADM9C,EAAG+C,QAAQC,cACGC,QAAQ,WAAY,IAE9C,OArDFP,eAAgCE,EAAcN,GAC5C,MAAMlB,EAAM,GAAGkB,KAAaM,IAE5B,OAAIV,EAAkCd,KAItCc,EAAkCd,GAAO8B,OAAMC,EAAAA,EAAAA,GAAa,YAAYb,kBAA0BM,WAC/FQ,MAAMC,IACAA,EAAKC,IACRnB,IAEKkB,EAAKE,UAEbC,OAAM,IAAMrB,OAVND,EAAkCd,EAa7C,CAoCSqC,EAAiBC,EAAAA,EAAAA,GAAmBd,EAAM,OAAQE,EAC3D,CAaOJ,eAAetC,EAAekC,EAAyBM,GAC5DN,EAAUC,sBAAwBI,EAAcL,EAAWM,GAC3DP,EAAcC,EAChB,UAWgB9B,EAAgB8B,GAC9BA,EAAUpC,iBAAmByD,CAC/B,UASgB7C,EAAmBwB,GAEjCA,EAAUpC,iBAAmBuC,CAC/B,CA6CA,SAASkB,IACPtB,EAAc5C,KAChB","sources":["../node_modules/@esri/calcite-components/dist/esm/src/components/scrim/resources.ts","../node_modules/@esri/calcite-components/dist/esm/src/components/scrim/scrim.tsx","../node_modules/@esri/calcite-components/dist/esm/src/components/scrim/scrim.scss?tag=calcite-scrim&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/esm/src/utils/t9n.ts"],"sourcesContent":["export const CSS = {\n  scrim: \"scrim\",\n  content: \"content\",\n};\n\nexport const BREAKPOINTS = {\n  s: 72, // Less than 72px.\n  // medium is assumed default.\n  l: 480, // Greater than or equal to 480px.\n};\n","import { Component, Element, h, Prop, State, VNode, Watch } from \"@stencil/core\";\nimport { connectLocalized, disconnectLocalized, LocalizedComponent } from \"../../utils/locale\";\nimport {\n  connectMessages,\n  disconnectMessages,\n  setUpMessages,\n  T9nComponent,\n  updateMessages,\n} from \"../../utils/t9n\";\nimport { createObserver } from \"../../utils/observers\";\nimport { Scale } from \"../interfaces\";\nimport { slotChangeHasContent } from \"../../utils/dom\";\nimport { CSS, BREAKPOINTS } from \"./resources\";\nimport { ScrimMessages } from \"./assets/scrim/t9n\";\n\n/**\n * @slot - A slot for adding custom content, primarily loading information.\n */\n@Component({\n  tag: \"calcite-scrim\",\n  styleUrl: \"scrim.scss\",\n  shadow: true,\n  assetsDirs: [\"assets\"],\n})\nexport class Scrim implements LocalizedComponent, T9nComponent {\n  // --------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * When `true`, a busy indicator is displayed.\n   */\n  @Prop({ reflect: true }) loading = false;\n\n  /**\n   * Made into a prop for testing purposes only\n   *\n   * @internal\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messages: ScrimMessages;\n\n  /**\n   * Use this property to override individual strings used by the component.\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messageOverrides: Partial<ScrimMessages>;\n\n  @Watch(\"messageOverrides\")\n  onMessagesChange(): void {\n    /* wired up by t9n util */\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteScrimElement;\n\n  resizeObserver = createObserver(\"resize\", () => this.handleResize());\n\n  loaderEl: HTMLCalciteLoaderElement;\n\n  @State() loaderScale: Scale;\n\n  @State() defaultMessages: ScrimMessages;\n\n  @State() effectiveLocale = \"\";\n\n  @Watch(\"effectiveLocale\")\n  effectiveLocaleChange(): void {\n    updateMessages(this, this.effectiveLocale);\n  }\n\n  @State() hasContent = false;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    connectLocalized(this);\n    connectMessages(this);\n    this.resizeObserver?.observe(this.el);\n  }\n\n  async componentWillLoad(): Promise<void> {\n    await setUpMessages(this);\n  }\n\n  disconnectedCallback(): void {\n    disconnectLocalized(this);\n    disconnectMessages(this);\n    this.resizeObserver?.disconnect();\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Render Method\n  //\n  // --------------------------------------------------------------------------\n\n  render(): VNode {\n    const { hasContent, loading, messages } = this;\n\n    return (\n      <div class={CSS.scrim}>\n        {loading ? (\n          <calcite-loader\n            label={messages.loading}\n            ref={this.storeLoaderEl}\n            scale={this.loaderScale}\n          />\n        ) : null}\n        <div class={CSS.content} hidden={!hasContent}>\n          <slot onSlotchange={this.handleDefaultSlotChange} />\n        </div>\n      </div>\n    );\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  // --------------------------------------------------------------------------\n\n  private handleDefaultSlotChange = (event: Event): void => {\n    this.hasContent = slotChangeHasContent(event);\n  };\n\n  private storeLoaderEl = (el: HTMLCalciteLoaderElement): void => {\n    this.loaderEl = el;\n    this.handleResize();\n  };\n\n  private getScale(size: number): Scale {\n    if (size < BREAKPOINTS.s) {\n      return \"s\";\n    } else if (size >= BREAKPOINTS.l) {\n      return \"l\";\n    } else {\n      return \"m\";\n    }\n  }\n\n  private handleResize(): void {\n    const { loaderEl, el } = this;\n\n    if (!loaderEl) {\n      return;\n    }\n\n    this.loaderScale = this.getScale(Math.min(el.clientHeight, el.clientWidth) ?? 0);\n  }\n}\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-scrim-background: Specifies the background color of the scrim.\n */\n:host {\n  --calcite-scrim-background: var(--calcite-color-transparent-scrim);\n}\n\n:host {\n  @apply absolute\n  inset-0\n  z-overlay\n  flex\n  h-full\n  w-full\n  flex-col\n  items-stretch;\n}\n\n@keyframes calcite-scrim-fade-in {\n  0% {\n    @apply bg-opacity-0;\n  }\n  100% {\n    @apply text-opacity-100;\n  }\n}\n\n.scrim {\n  @apply absolute\n  inset-0\n  flex\n  flex-col\n  content-center\n  items-center\n  justify-center\n  overflow-hidden;\n  animation: calcite-scrim-fade-in var(--calcite-internal-animation-timing-medium) ease-in-out;\n  background-color: var(--calcite-scrim-background, var(--calcite-color-transparent-scrim));\n}\n\n.content {\n  @apply p-4;\n}\n\n@include base-component();\n","import { getAssetPath } from \"@stencil/core\";\nimport { getSupportedLocale, LocalizedComponent } from \"./locale\";\nimport { isBrowser } from \"./browser\";\n\nexport type MessageBundle = Record<string, string>;\n\nexport const componentLangToMessageBundleCache: Record<string, Promise<MessageBundle>> = {};\n\nasync function getMessageBundle(lang: string, component: string): Promise<MessageBundle> {\n  const key = `${component}_${lang}`;\n\n  if (componentLangToMessageBundleCache[key]) {\n    return componentLangToMessageBundleCache[key];\n  }\n\n  componentLangToMessageBundleCache[key] = fetch(getAssetPath(`./assets/${component}/t9n/messages_${lang}.json`))\n    .then((resp) => {\n      if (!resp.ok) {\n        throwMessageFetchError();\n      }\n      return resp.json();\n    })\n    .catch(() => throwMessageFetchError());\n\n  return componentLangToMessageBundleCache[key];\n}\n\nfunction throwMessageFetchError(): never {\n  throw new Error(\"could not fetch component message bundle\");\n}\n\nfunction mergeMessages(component: T9nComponent): void {\n  component.messages = {\n    ...component.defaultMessages,\n    ...component.messageOverrides,\n  };\n}\n\nfunction noop(): void {\n  // intentionally empty\n}\n\n/**\n * This utility sets up the messages used by the component. It should be awaited in the `componentWillLoad` lifecycle hook.\n *\n * @param component\n */\nexport async function setUpMessages(component: T9nComponent): Promise<void> {\n  component.defaultMessages = await fetchMessages(component, component.effectiveLocale);\n  mergeMessages(component);\n}\n\nasync function fetchMessages(component: T9nComponent, lang: string): Promise<MessageBundle> {\n  if (!isBrowser()) {\n    return {};\n  }\n\n  const { el } = component;\n  const tag = el.tagName.toLowerCase();\n  const componentName = tag.replace(\"calcite-\", \"\");\n\n  return getMessageBundle(getSupportedLocale(lang, \"t9n\"), componentName);\n}\n\n/**\n * This utility must be set up for the component to update its default message bundle if the locale changes.\n *\n * It can be set up in **either** of the following ways:\n *\n * 1. called from `LocalizedComponent`'s `onLocaleChange` method or\n * 2. called from a watcher configured to watch `LocalizedComponent`'s `effectiveLocale` prop\n *\n * @param component\n * @param lang\n */\nexport async function updateMessages(component: T9nComponent, lang: string): Promise<void> {\n  component.defaultMessages = await fetchMessages(component, lang);\n  mergeMessages(component);\n}\n\n/**\n * This utility sets up internals for messages support.\n *\n * It needs to be called in `connectedCallback`\n *\n * **Note**: this must be called after `LocalizedComponent`'s `connectLocalized` method.\n *\n * @param component\n */\nexport function connectMessages(component: T9nComponent): void {\n  component.onMessagesChange = defaultOnMessagesChange;\n}\n\n/**\n * This utility tears down internals for messages support.\n *\n * It needs to be called in `disconnectedCallback`\n *\n * @param component\n */\nexport function disconnectMessages(component: T9nComponent): void {\n  // we set this to noop to for watchers triggered when components are disconnected\n  component.onMessagesChange = noop;\n}\n\n/**\n * This interface enables components to support built-in translation strings.\n *\n * **Notes**:\n *\n * This requires `LocalizedComponent` to be implemented.\n * To avoid unnecessary lookups, composite components should set `lang` on internal t9n components.\n */\nexport interface T9nComponent extends LocalizedComponent {\n  el: HTMLElement;\n\n  /**\n   * This property holds all messages used by the component's rendering.\n   *\n   * This prop should use the `@Prop` decorator. It uses `@Prop` decorator for testing purpose only.\n   */\n  messages: MessageBundle;\n\n  /**\n   * This property holds the component's default messages.\n   */\n  defaultMessages: MessageBundle;\n\n  /**\n   * This property holds all user message overrides.\n   *\n   * This prop should use the `@Prop` decorator.\n   */\n  messageOverrides: Partial<MessageBundle>;\n\n  /**\n   * This private method ensures messages are kept in sync.\n   *\n   * This method should be empty and configured to watch for changes on  `messageOverrides` property.\n   *\n   * @Watch(\"messageOverrides\")\n   * onMessagesChange(): void {\n   *  \\/* wired up by t9n util *\\/\n   * }\n   */\n  onMessagesChange: () => void;\n}\n\nfunction defaultOnMessagesChange(this: T9nComponent): void {\n  mergeMessages(this);\n}\n"],"names":["CSS","BREAKPOINTS","Scrim","resizeObserver","createObserver","this","handleResize","handleDefaultSlotChange","event","hasContent","slotChangeHasContent","storeLoaderEl","el","loaderEl","onMessagesChange","effectiveLocaleChange","updateMessages","effectiveLocale","connectedCallback","connectLocalized","connectMessages","observe","componentWillLoad","setUpMessages","disconnectedCallback","disconnectLocalized","disconnectMessages","disconnect","render","loading","messages","h","key","class","label","ref","scale","loaderScale","hidden","onSlotchange","getScale","size","Math","min","clientHeight","clientWidth","componentLangToMessageBundleCache","throwMessageFetchError","Error","mergeMessages","component","defaultMessages","messageOverrides","noop","async","fetchMessages","lang","isBrowser","componentName","tagName","toLowerCase","replace","fetch","getAssetPath","then","resp","ok","json","catch","getMessageBundle","getSupportedLocale","defaultOnMessagesChange"],"sourceRoot":""}