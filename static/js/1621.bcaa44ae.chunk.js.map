{"version":3,"file":"static/js/1621.bcaa44ae.chunk.js","mappings":";gMAAO,MAAMA,EACA,YADAA,EAEC,aAFDA,EAGD,WAHCA,EAIL,gBCKQC,EAAYC,GAE1BA,EAqBF,SAAoCA,GAClC,MAAMC,EAAWC,KAAKC,MAAMH,EAAOI,OAAS,GACtCC,EAAWL,EAAOM,MAAM,IAAIC,UAAUC,KAAK,IACjD,OAAOH,EAASI,UAAUR,GAAYI,EAASK,MAAM,EAAGT,EAC1D,CAzBWU,CAA2BX,GAEpC,IAAIY,EAAO,EACX,IAAK,IAAIC,EAAI,EAAGA,EAAIb,EAAOI,OAAQS,IACjCD,EAAOZ,EAAOc,WAAWD,KAAOD,GAAQ,GAAKA,GAG/C,IAAIG,EAAM,IACV,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAE1BD,IAAQ,MADOH,GAAa,EAAJI,EAAU,KACbC,SAAS,KAAKC,QAAQ,GAE7C,OAAOH,CACT,UAqDgBI,EAASJ,GACvB,gBAnCuBK,GACvB,IAAI,EAAEC,EAAC,EAAEC,EAAC,EAAEC,GAAMH,EAClBC,GAAK,IACLC,GAAK,IACLC,GAAK,IACL,MAAMC,EAAMtB,KAAKsB,IAAIH,EAAGC,EAAGC,GACrBE,EAAMvB,KAAKuB,IAAIJ,EAAGC,EAAGC,GACrBG,EAAQF,EAAMC,EAEpB,GAAID,IAAQC,EACV,OAAO,EAGT,IAAIE,GAAOH,EAAMC,GAAO,EACxB,OAAQD,GACN,KAAKH,EACHM,GAAOL,EAAIC,GAAKG,GAASJ,EAAIC,EAAI,EAAI,GACrC,MACF,KAAKD,EACHK,GAAOJ,EAAIF,GAAKK,EAAQ,EACxB,MACF,KAAKH,EACHI,GAAON,EAAIC,GAAKI,EAAQ,EAI5B,OAAOxB,KAAK0B,MAAY,GAAND,EACpB,CAQSE,EAASC,EAAAA,EAAAA,GAASf,GAC3B,CC/EA,MCYagB,EAAM,gDAQuB,qIAmCP,EAZjCC,MAAAA,GACE,OAAOC,KAAKC,mBAmBNA,gBAAAA,GACN,GAAID,KAAKE,YAAcF,KAAKG,sBAC1B,OACEC,EAAAA,EAAAA,GAAA,OACEC,IAAKL,KAAKM,OAAS,GACnBC,MAAO1C,EACP2C,QAASA,IAAOR,KAAKG,uBAAwB,EAC7CM,IAAKT,KAAKE,YAIhB,MAAMQ,EAAWV,KAAKW,mBAChBC,EAAkBZ,KAAKa,oBAC7B,OACET,EAAAA,EAAAA,GAAA,qBACcJ,KAAKM,OAASN,KAAKc,SAC/BP,MAAO1C,EACPkD,KAAK,SACLC,MAAO,CAAEJ,oBAERF,GACCN,EAAAA,EAAAA,GAAA,sBAAkB,OAAOG,MAAO1C,GAC7B6C,IAGHN,EAAAA,EAAAA,GAAA,gBAAcG,MAAO1C,EAAUoD,KAAK,OAAOC,MAAOlB,KAAKkB,SASvDL,iBAAAA,GACN,MAAM,OAAEM,EAAM,SAAEC,EAAQ,SAAEN,EAAQ,GAAEO,GAAOrB,KACrCsB,GAAQC,EAAAA,EAAAA,GAAYF,GACpBG,EAAKL,GAAU,IAAIA,EAAOlC,OAAOkC,EAAOhD,OAAS,KACjDsD,EAAOL,GAAYN,GAAY,GAC/BhC,EAAM0C,IAAME,EAAAA,EAAAA,GAAWF,GAAMA,EAAK1D,EAAY2D,GAEpD,IAAMN,IAAWM,KAAUC,EAAAA,EAAAA,GAAW5C,GACpC,MAAO,4EAIT,MAAO,8CAFKI,EAASJ,YACD,SAAVwC,EAAmB,GAAK,QAO5BX,gBAAAA,GACN,MAAM,SAAEG,EAAQ,SAAEM,GAAapB,KAC/B,OAAIc,EACKA,EACJa,OACAtD,MAAM,KACNuD,KAAKH,GAASA,EAAKjD,UAAU,EAAG,KAChCD,KAAK,MACC6C,GACFA,EAAS5C,UAAU,EAAG,0CD5HjB","sources":["../node_modules/@esri/calcite-components/dist/esm/src/components/avatar/resources.ts","../node_modules/@esri/calcite-components/dist/esm/src/components/avatar/utils.ts","../node_modules/@esri/calcite-components/dist/esm/src/components/avatar/avatar.scss?tag=calcite-avatar&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/esm/src/components/avatar/avatar.tsx"],"sourcesContent":["export const CSS = {\n  thumbnail: \"thumbnail\",\n  background: \"background\",\n  initials: \"initials\",\n  icon: \"icon\",\n};\n","import { RGB } from \"../color-picker/interfaces\";\nimport { hexToRGB } from \"../color-picker/utils\";\n\n/**\n * Convert a string to a valid hex by hashing its contents\n * and using the hash as a seed for three distinct color values\n *\n * @param string\n */\nexport function stringToHex(string: string): string {\n  // improve random color generation for similar strings.\n  string = mixStringDeterministically(string);\n\n  let hash = 0;\n  for (let i = 0; i < string.length; i++) {\n    hash = string.charCodeAt(i) + ((hash << 5) - hash);\n  }\n\n  let hex = \"#\";\n  for (let j = 0; j < 3; j++) {\n    const value = (hash >> (j * 8)) & 0xff;\n    hex += (\"00\" + value.toString(16)).substr(-2);\n  }\n  return hex;\n}\n\n/**\n * The function splits the string into two halves, reverses each half, and then concatenates them.\n *\n * @param {string} string - The input string to be mixed.\n * @returns {string} - The mixed string.\n */\nfunction mixStringDeterministically(string: string): string {\n  const midPoint = Math.floor(string.length / 2);\n  const reversed = string.split(\"\").reverse().join(\"\");\n  return reversed.substring(midPoint) + reversed.slice(0, midPoint);\n}\n\n/**\n * Find the hue of a color given the separate RGB color channels\n *\n * @param rgb\n */\nexport function rgbToHue(rgb: RGB): number {\n  let { r, g, b } = rgb;\n  r /= 255;\n  g /= 255;\n  b /= 255;\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const delta = max - min;\n\n  if (max === min) {\n    return 0;\n  }\n\n  let hue = (max + min) / 2;\n  switch (max) {\n    case r:\n      hue = (g - b) / delta + (g < b ? 6 : 0);\n      break;\n    case g:\n      hue = (b - r) / delta + 2;\n      break;\n    case b:\n      hue = (r - g) / delta + 4;\n      break;\n  }\n\n  return Math.round(hue * 60);\n}\n\n/**\n * For a hex color, find the hue\n *\n * @param hex {string} - form of \"#------\"\n */\nexport function hexToHue(hex: string): number {\n  return rgbToHue(hexToRGB(hex));\n}\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-avatar-corner-radius: Specifies the component's corner radius.\n * @prop --calcite-avatar-color: Specifies the component's icon or initial color.\n * @prop --calcite-avatar-background-color: Specifies the component's background color.\n *\n */\n\n:host {\n  @apply inline-block overflow-hidden;\n  border-radius: var(--calcite-avatar-corner-radius, 50%);\n  color: var(--calcite-avatar-color, var(--calcite-color-text-2));\n}\n\n:host([scale=\"s\"]) {\n  @apply text-n3 h-6 w-6;\n}\n\n:host([scale=\"m\"]) {\n  @apply text-n2 h-8 w-8;\n}\n\n:host([scale=\"l\"]) {\n  @apply text-0 h-11 w-11;\n}\n\n.icon {\n  @apply flex;\n}\n\n.background {\n  @apply flex h-full w-full items-center justify-center;\n  border-radius: var(--calcite-avatar-corner-radius, 50%);\n}\n\n.initials {\n  @apply font-bold uppercase;\n}\n\n.thumbnail {\n  @apply h-full w-full;\n  border-radius: var(--calcite-avatar-corner-radius, 50%);\n}\n\n@include base-component();\n","import { Component, Element, h, Prop, State } from \"@stencil/core\";\nimport { getModeName } from \"../../utils/dom\";\nimport { isValidHex } from \"../color-picker/utils\";\nimport { Scale } from \"../interfaces\";\nimport { CSS } from \"./resources\";\nimport { hexToHue, stringToHex } from \"./utils\";\n\n@Component({\n  tag: \"calcite-avatar\",\n  styleUrl: \"avatar.scss\",\n  shadow: true,\n})\nexport class Avatar {\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /** Specifies the size of the component. */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  /** Specifies the `src` to an image (remember to add a token if the user is private). */\n  @Prop({ reflect: true }) thumbnail: string;\n\n  /** Specifies the full name of the user. When `label` and `thumbnail` are not defined, specifies the accessible name for the component. */\n  @Prop({ reflect: true }) fullName: string;\n\n  /** Specifies the username of the user. */\n  @Prop({ reflect: true }) username: string;\n\n  /** Specifies the unique id of the user. */\n  @Prop({ reflect: true }) userId: string;\n\n  /** Specifies alternative text when `thumbnail` is defined, otherwise specifies an accessible label.*/\n  @Prop() label: string;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  render() {\n    return this.determineContent();\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private State/Props\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteAvatarElement;\n\n  @State() thumbnailFailedToLoad = false;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  private determineContent() {\n    if (this.thumbnail && !this.thumbnailFailedToLoad) {\n      return (\n        <img\n          alt={this.label || \"\"}\n          class={CSS.thumbnail}\n          onError={() => (this.thumbnailFailedToLoad = true)}\n          src={this.thumbnail}\n        />\n      );\n    }\n    const initials = this.generateInitials();\n    const backgroundColor = this.generateFillColor();\n    return (\n      <span\n        aria-label={this.label || this.fullName}\n        class={CSS.background}\n        role=\"figure\"\n        style={{ backgroundColor }}\n      >\n        {initials ? (\n          <span aria-hidden=\"true\" class={CSS.initials}>\n            {initials}\n          </span>\n        ) : (\n          <calcite-icon class={CSS.icon} icon=\"user\" scale={this.scale} />\n        )}\n      </span>\n    );\n  }\n\n  /**\n   * Generate a valid background color that is consistent and unique to this user\n   */\n  private generateFillColor() {\n    const { userId, username, fullName, el } = this;\n    const theme = getModeName(el);\n    const id = userId && `#${userId.substr(userId.length - 6)}`;\n    const name = username || fullName || \"\";\n    const hex = id && isValidHex(id) ? id : stringToHex(name);\n    // if there is not unique information, or an invalid hex is produced, return a default\n    if ((!userId && !name) || !isValidHex(hex)) {\n      return `var(--calcite-avatar-background-color, var(--calcite-color-foreground-2))`;\n    }\n    const hue = hexToHue(hex);\n    const l = theme === \"dark\" ? 20 : 90;\n    return `var(--calcite-avatar-background-color, hsl(${hue}, 60%, ${l}%))`;\n  }\n\n  /**\n   * Use fullName or username to generate initials\n   */\n  private generateInitials(): string | boolean {\n    const { fullName, username } = this;\n    if (fullName) {\n      return fullName\n        .trim()\n        .split(\" \")\n        .map((name) => name.substring(0, 1))\n        .join(\"\");\n    } else if (username) {\n      return username.substring(0, 2);\n    }\n    return false;\n  }\n}\n"],"names":["CSS","stringToHex","string","midPoint","Math","floor","length","reversed","split","reverse","join","substring","slice","mixStringDeterministically","hash","i","charCodeAt","hex","j","toString","substr","hexToHue","rgb","r","g","b","max","min","delta","hue","round","rgbToHue","hexToRGB","Avatar","render","this","determineContent","thumbnail","thumbnailFailedToLoad","h","alt","label","class","onError","src","initials","generateInitials","backgroundColor","generateFillColor","fullName","role","style","icon","scale","userId","username","el","theme","getModeName","id","name","isValidHex","trim","map"],"sourceRoot":""}