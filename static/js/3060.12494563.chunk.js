"use strict";(globalThis.webpackChunkmy_app=globalThis.webpackChunkmy_app||[]).push([[3060],{93060:(e,t,i)=>{i.r(t),i.d(t,{default:()=>Ve});var n=i(27366),r=i(44055),s=i(45918),a=i(10064),o=i(92026),l=i(97642),c=i(66978),h=i(94172),f=i(49861),u=(i(63780),i(93169)),d=i(25243),p=i(27135),m=i(38511),y=i(69912),g=i(30651),x=i(6693),v=i(46671),b=(i(59486),i(76200)),w=i(32718),I=i(8025),_=i(92975),C=i(25899),S=i(45948),T=i(86591),R=i(79586),k=i(22824),P=i(21969),M=i(64145),O=i(73425),B=i(55343),F=i(55185),z=i(53866),D=i(78952);const E=w.Z.getLogger("esri.layers.mixins.ImageryTileMixin"),A=e=>{let t=class extends e{constructor(){super(...arguments),this._rasterJobHandler={instance:null,refCount:0,connectionPromise:null},this.bandIds=null,this.copyright=null,this.fullExtent=null,this.interpolation="nearest",this.multidimensionalDefinition=null,this.raster=null,this.rasterInfo=null,this.sourceJSON=null,this.spatialReference=null,this.tileInfo=null,this.symbolizer=null}set url(e){this._set("url",(0,C.Nm)(e,E))}set renderer(e){this._set("renderer",e),this.updateRenderer()}async convertVectorFieldData(e,t){if((0,o.Wi)(e))return null;const i=this._rasterJobHandler.instance,n=this.rasterInfo.dataType;return i?i.convertVectorFieldData({pixelBlock:e,dataType:n},t):(0,M.KC)(e,n)}async createFlowMesh(e,t){const i=this._rasterJobHandler.instance;return i?i.createFlowMesh(e,t):(0,F.GE)(e.meshType,e.simulationSettings,e.flowData,(0,o.pC)(t.signal)?t.signal:(new AbortController).signal)}normalizeRasterFetchOptions(e){const{multidimensionalInfo:t}=this.rasterInfo;if((0,o.Wi)(t))return e;let i=e.multidimensionalDefinition||this.multidimensionalDefinition;!(0,o.Wi)(i)&&i.length||(i=(0,P.Tj)(this.raster.rasterInfo));const n=e.timeExtent||this.timeExtent;if((0,o.pC)(i)&&(0,o.pC)(n)&&((0,o.pC)(n.start)||(0,o.pC)(n.end))){i=i.map((e=>e.clone()));const r=t.variables.find((e=>{let{name:t}=e;return t===i[0].variableName}))?.dimensions?.find((e=>{let{name:t}=e;return"StdTime"===t})),s=i.find((e=>{let{dimensionName:t}=e;return"StdTime"===t}));if(!r||!s)return{...e,multidimensionalDefinition:null};const{start:a,end:l}=n,c=(0,o.Wi)(a)?null:a.getTime(),h=(0,o.Wi)(l)?null:l.getTime(),f=c??h,u=h??c;if((0,o.pC)(r.values)){const e=r.values.filter((e=>{if(Array.isArray(e)){if(f===u)return e[0]<=f&&e[1]>=f;const t=e[0]<=f&&e[1]>f||e[0]<u&&e[1]>=u,i=e[0]>=f&&e[1]<=u||e[0]<f&&e[1]>u;return t||i}return f===u?e===f:e>=f&&e<=u}));if(e.length){const t=e.sort(((e,t)=>f===u?(e[0]??e)-(t[0]??t):Math.abs((e[1]??e)-u)-Math.abs((t[1]??t)-u)))[0];s.values=[t]}else i=null}else if(r.hasRegularIntervals&&r.extent){const[e,t]=r.extent;f>t||u<e?i=null:s.values=f===u?[f]:[Math.max(e,f),Math.min(t,u)]}}return{...e,multidimensionalDefinition:i}}async updateRenderer(){if(!this.loaded)return;if(JSON.stringify(this._cachedRendererJson)===JSON.stringify(this.renderer))return;const e=this._rasterJobHandler.instance;e&&(this.symbolizer.rendererJSON=(0,O.ol)(this.renderer.toJSON()),this.symbolizer.bind(),await e.updateSymbolizer(this.symbolizer),this._cachedRendererJson=this.renderer.toJSON())}async applyRenderer(e,t){const i=e&&e.pixelBlock;if(!((0,o.pC)(i)&&i.pixels&&i.pixels.length>0))return null;let n;await this.updateRenderer();const r=this._rasterJobHandler.instance,{bandIds:s}=this;return n=r?await r.symbolize({...e,simpleStretchParams:t,bandIds:s}):this.symbolizer.symbolize({...e,simpleStretchParams:t,bandIds:s}),n}getTileUrl(e,t,i){return"RasterTileServer"===this.raster.datasetFormat?`${this.url}/tile/${e}/${t}/${i}`:""}getCompatibleTileInfo(e,t){let i=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(!this.loaded||(0,o.Wi)(t))return null;if(i&&e.equals(this.spatialReference))return this.tileInfo;const n=(0,_.C5)(e);return k.Z.create({size:256,spatialReference:e,origin:n?{x:n.origin[0],y:n.origin[1]}:{x:t.xmin,y:t.ymax}})}getCompatibleFullExtent(e){return this.loaded?(this._compatibleFullExtent&&this._compatibleFullExtent.spatialReference.equals(e)||(this._compatibleFullExtent=this.raster.computeExtent(e)),this._compatibleFullExtent):null}async fetchTile(e,t,i){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};if(n.requestAsImageElement){const r=this.getTileUrl(e,t,i);return(0,b.default)(r,{responseType:"image",query:{...this.refreshParameters,...this.raster.ioConfig.customFetchParameters},signal:n.signal}).then((e=>e.data))}if((0,o.pC)(this.rasterInfo.multidimensionalInfo)&&(n=this.normalizeRasterFetchOptions(n),(0,o.Wi)(n.multidimensionalDefinition))){const r=n.tileInfo||this.rasterInfo.storageInfo.tileInfo;return{extent:this.raster.getTileExtentFromTileInfo(e,t,i,r),pixelBlock:null}}return await this._initJobHandler(),"raster-shaded-relief"===this.renderer.type&&(n={...n,buffer:{cols:1,rows:1}}),this.raster.fetchTile(e,t,i,n)}async fetchPixels(e,t,i){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return(0,o.pC)(this.rasterInfo.multidimensionalInfo)&&(n=this.normalizeRasterFetchOptions(n),(0,o.Wi)(n.multidimensionalDefinition))?{extent:e,pixelBlock:null}:(await this._initJobHandler(),this.raster.fetchPixels(e,t,i,n))}async identify(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return!(0,o.pC)(this.rasterInfo.multidimensionalInfo)||this.rasterInfo.hasMultidimensionalTranspose&&((0,P.WU)(t.multidimensionalDefinition)||t.transposedVariableName||t.timeExtent)||(t=this.normalizeRasterFetchOptions(t),!(0,o.Wi)(t.multidimensionalDefinition))?this.raster.identify(e,t):{location:e,value:null}}increaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount++}decreaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount--,this._rasterJobHandler.refCount<=0&&this._shutdownJobHandler()}hasStandardTime(){const e=this.rasterInfo.multidimensionalInfo;if((0,o.Wi)(e)||"standard-time"!==this.rasterInfo.dataType)return!1;const t=this.multidimensionalDefinition[0]?.variableName;return e.variables.some((e=>e.name===t&&e.dimensions.some((e=>"StdTime"===e.name))))}getStandardTimeValue(e){return new Date(24*(e-25569)*3600*1e3).toString()}_configDefaultSettings(){this._configDefaultInterpolation(),this.multidimensionalDefinition||(this.multidimensionalDefinition=(0,P.Tj)(this.raster.rasterInfo)),this._configDefaultRenderer()}_initJobHandler(){if(null!=this._rasterJobHandler.connectionPromise)return this._rasterJobHandler.connectionPromise;const e=new R.Z;return this._rasterJobHandler.connectionPromise=e.initialize().then((()=>{this._rasterJobHandler.instance=e,this.raster.rasterJobHandler=e,this.renderer&&this.updateRenderer()})).catch((()=>null)),this._rasterJobHandler.connectionPromise}_shutdownJobHandler(){this._rasterJobHandler.instance&&this._rasterJobHandler.instance.destroy(),this._rasterJobHandler.instance=null,this._rasterJobHandler.connectionPromise=null,this._rasterJobHandler.refCount=0,this.raster.rasterJobHandler=null,this._cachedRendererJson=null}_configDefaultInterpolation(){if(null==this.interpolation){const e=(0,O.In)(this.rasterInfo,this.raster.tileType,this.sourceJSON?.defaultResamplingMethod);this._set("interpolation",e)}}_configDefaultRenderer(){const e=this.raster.rasterInfo;if(this.bandIds||(this.bandIds=(0,O.YD)(e)),!this.renderer){const t=(0,O.Ob)(e,{bandIds:this.bandIds,variableName:(0,o.pC)(this.multidimensionalDefinition)?this.multidimensionalDefinition[0]?.variableName:null});"WCSServer"===this.raster.datasetFormat&&"raster-stretch"===t.type&&(e.statistics?.[0].max>1e24||e.statistics?.[0].min<-1e24)&&(t.dynamicRangeAdjustment=!0,t.statistics=null,"none"===t.stretchType&&(t.stretchType="min-max")),this.renderer=t}this.symbolizer?(this.symbolizer.rendererJSON=(0,O.ol)(this.renderer.toJSON()),this.symbolizer.rasterInfo=e):this.symbolizer=new B.Z({rendererJSON:this.renderer.toJSON(),rasterInfo:e});const t=this.symbolizer.bind();t.success||E.warn("imagery-tile-mixin",t.error||"The given renderer is not supported by the layer.")}};return(0,n._)([(0,f.Cb)()],t.prototype,"_cachedRendererJson",void 0),(0,n._)([(0,f.Cb)()],t.prototype,"_compatibleFullExtent",void 0),(0,n._)([(0,f.Cb)()],t.prototype,"_rasterJobHandler",void 0),(0,n._)([(0,f.Cb)()],t.prototype,"bandIds",void 0),(0,n._)([(0,f.Cb)({json:{origins:{service:{read:{source:"copyrightText"}}}}})],t.prototype,"copyright",void 0),(0,n._)([(0,f.Cb)({type:z.Z,json:{read:!1}}),(0,I.B)("rasterInfo.extent")],t.prototype,"fullExtent",void 0),(0,n._)([(0,f.Cb)()],t.prototype,"interpolation",void 0),(0,n._)([(0,f.Cb)()],t.prototype,"ioConfig",void 0),(0,n._)([(0,f.Cb)({type:[T.Z]})],t.prototype,"multidimensionalDefinition",void 0),(0,n._)([(0,f.Cb)()],t.prototype,"raster",void 0),(0,n._)([(0,f.Cb)({readOnly:!0}),(0,I.B)("raster.rasterInfo")],t.prototype,"rasterInfo",void 0),(0,n._)([(0,f.Cb)()],t.prototype,"sourceJSON",void 0),(0,n._)([(0,f.Cb)({type:D.Z,json:{read:!1}}),(0,I.B)("rasterInfo.spatialReference")],t.prototype,"spatialReference",void 0),(0,n._)([(0,f.Cb)({type:k.Z,json:{read:!1}}),(0,I.B)("rasterInfo.storageInfo.tileInfo")],t.prototype,"tileInfo",void 0),(0,n._)([(0,f.Cb)(S.HQ)],t.prototype,"url",null),(0,n._)([(0,f.Cb)({types:s.dr})],t.prototype,"renderer",null),(0,n._)([(0,f.Cb)()],t.prototype,"symbolizer",void 0),t=(0,n._)([(0,y.j)("esri.layers.ImageryTileMixin")],t),t};var Z=i(6061),N=i(29598),L=i(71684),H=i(56811),W=i(99063),J=i(83040),j=i(60117),q=i(86200),$=i(32014),G=i(46784),U=i(67426),V=i(55635),X=i(45502),Y=i(17314),K=i(80394),Q=i(7882);let ee=class extends((0,U.v)(G.wq)){constructor(){super(...arguments),this.rasterJobHandler=null,this.datasetName=null,this.datasetFormat=null,this.rasterInfo=null,this.ioConfig={sampling:"closest"}}async init(){const e=(0,K.zD)();this.addResolvingPromise(e),await this.when()}normalizeCtorArgs(e){return e&&e.ioConfig&&(e={...e,ioConfig:{resolution:null,bandIds:null,sampling:"closest",tileInfo:k.Z.create(),...e.ioConfig}}),e}get _isGlobalWrappableSource(){const{rasterInfo:e}=this,t=(0,K.ut)(e.spatialReference);return(0,o.pC)(t)&&e.extent.width>=t/2}set url(e){this._set("url",(0,C.Nm)(e,w.Z.getLogger(this.declaredClass)))}async open(e){throw new a.Z("BaseRaster:open-not-implemented","open() is not implemented")}async fetchTile(e,t,i){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};const r=n.tileInfo||this.rasterInfo.storageInfo.tileInfo,s=this.getTileExtentFromTileInfo(e,t,i,r);return this.fetchPixels(s,r.size[0],r.size[1],n)}async identify(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const{multidimensionalDefinition:i,timeExtent:n}=t,{hasMultidimensionalTranspose:r,multidimensionalInfo:s}=this.rasterInfo;let{transposedVariableName:a}=t;const l=(0,o.pC)(s)&&r&&(null!=n||(0,P.WU)(i));l&&!a&&(a=(0,o.pC)(i)&&i.length>0?i[0].variableName:s.variables[0].name,t={...t,transposedVariableName:a}),t=this._getRequestOptionsWithSliceId(t);const{spatialReference:c,extent:h}=this.rasterInfo,{datumTransformation:f}=t;let u=(0,K.nF)(e,c,f);if(!h.intersects(u))return{location:u,value:null};if((0,o.pC)(this.rasterInfo.transform)){const e=this.rasterInfo.transform.inverseTransform(u);if(!this.rasterInfo.nativeExtent.intersects(e))return{location:e,value:null};u=e}let d=0;const p=a&&(0,o.pC)(s)&&this.rasterInfo.hasMultidimensionalTranspose;if(!p)if(t.srcResolution)d=(0,K.kr)(t.srcResolution,this.rasterInfo,this.ioConfig.sampling).pyramidLevel;else if(d=await this.computeBestPyramidLevelForLocation(e,t),null==d)return{location:u,value:null};const m=this.identifyPixelLocation(u,d,null,p);if(null===m)return{location:u,value:null};const{row:y,col:g,rowOffset:x,colOffset:v,blockWidth:b}=m,w=a??(0,o.Wg)(t.sliceId),I=(0,V.Rq)(this.url,w),_=`${d}/${y}/${g}`;let C=(0,V.Qg)(I,null,_);(0,o.Wi)(C)&&(C=this.fetchRawTile(d,y,g,t),(0,V.gX)(I,null,_,C));const S=await C;if((0,o.Wi)(S)||!S.pixels?.length)return{location:u,value:null};const T=x*b+v;return this._processIdentifyResult(S,{srcLocation:u,position:T,pyramidLevel:d,useTransposedTile:p,requestSomeSlices:l,identifyOptions:t})}async fetchPixels(e,t,i){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};if(e=(0,K.kZ)(e),(n=this._getRequestOptionsWithSliceId(n)).requestRawData)return this._fetchPixels(e,t,i,n);const r=(0,K.ut)(e.spatialReference),s=(0,K.Hq)(e);if((0,o.Wi)(r)||0===s||1===s&&this._isGlobalWrappableSource)return this._fetchPixels(e,t,i,n);if(s>=3)return{extent:e,pixelBlock:null};const a=[],{xmin:l,xmax:c}=e,h=Math.round(r/(c-l)*t),f=h-Math.round((r/2-l)/(c-l)*t);let u=0;const d=[];for(let o=0;o<=s;o++){const p=new z.Z({xmin:0===o?l:-r/2,xmax:o===s?c-r*o:r/2,ymin:e.ymin,ymax:e.ymax,spatialReference:e.spatialReference}),m=0===o?h-f:o===s?t-u:h;u+=m,d.push(m);const y=n.disableWrapAround&&o>0?null:this._fetchPixels(p,m,i,n);a.push(y)}const p=(await Promise.all(a)).map((e=>e?.pixelBlock));let m=null;const y={width:t,height:i};return m=this.rasterJobHandler?(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:p,srcMosaicSize:y,destDimension:null,coefs:null,sampleSpacing:null,interpolation:"nearest",alignmentInfo:null,blockWidths:d},n)).pixelBlock:(0,Y.us)(p,y,{blockWidths:d}),{extent:e,srcExtent:(0,K.tB)(e,this.rasterInfo.spatialReference,n.datumTransformation),pixelBlock:m}}async fetchRawPixels(e,t,i){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};t={x:Math.floor(t.x),y:Math.floor(t.y)};const r=await this._fetchRawTiles(e,t,i,n),{nativeExtent:s,nativePixelSize:a,storageInfo:l}=this.rasterInfo,c=2**e,h=a.x*c,f=a.y*c,u=new z.Z({xmin:s.xmin+h*t.x,xmax:s.xmin+h*(t.x+i.width-1),ymin:s.ymax-f*(t.y+i.height-1),ymax:s.ymax-f*t.y,spatialReference:s.spatialReference});if(!r)return{extent:u,srcExtent:u,pixelBlock:null};const{pixelBlocks:d,mosaicSize:p}=r;if(1===d.length&&(0,o.pC)(d[0])&&d[0].width===i.width&&d[0].height===i.height)return{extent:u,srcExtent:u,pixelBlock:r.pixelBlocks[0]};const m=e>0?l.pyramidBlockWidth:l.blockWidth,y=e>0?l.pyramidBlockHeight:l.blockHeight,g={x:t.x%m,y:t.y%y};let x;return x=this.rasterJobHandler?(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:d,srcMosaicSize:p,destDimension:i,clipOffset:g,clipSize:i,coefs:null,sampleSpacing:null,interpolation:n.interpolation,alignmentInfo:null,blockWidths:null},n)).pixelBlock:(0,Y.us)(d,p,{clipOffset:g,clipSize:i}),{extent:u,srcExtent:u,pixelBlock:x}}fetchRawTile(e,t,i,n){throw new a.Z("BaseRaster:read-not-implemented","fetchRawTile() is not implemented")}computeExtent(e){return(0,K.tB)(this.rasterInfo.extent,e)}decodePixelBlock(e,t){return!this.rasterJobHandler||t.useCanvas?(0,X.J)(e,t):this.rasterJobHandler.decode({data:e,options:t})}async request(e,t,i){const{customFetchParameters:n}=this.ioConfig,{range:r,query:s,headers:a}=t;i=i??t.retryCount??this.ioConfig.retryCount;const o=r?{Range:`bytes=${r.from}-${r.to}`}:null;try{return await(0,b.default)(e,{...t,query:{...s,...n},headers:{...a,...o}})}catch(l){if(i>0)return i--,this.request(e,t,i);throw l}}getSliceIndex(e){const{multidimensionalInfo:t}=this.rasterInfo;return(0,o.Wi)(t)||(0,o.Wi)(e)||0===e.length?null:(0,P.gk)(e,t)}getTileExtentFromTileInfo(e,t,i,n){const r=n.lodAt(e);return this.getTileExtent({x:r.resolution,y:r.resolution},t,i,n.origin,n.spatialReference,n.size)}updateTileInfo(){const{storageInfo:e,spatialReference:t,extent:i,pixelSize:n}=this.rasterInfo;if(!e.tileInfo){const r=[],s=e.maximumPyramidLevel||0;let a=Math.max(n.x,n.y),o=1/.0254*96*a;for(let e=0;e<=s;e++)r.push({level:s-e,resolution:a,scale:o}),a*=2,o*=2;const l=new Q.Z({x:i.xmin,y:i.ymax,spatialReference:t});e.tileInfo=new k.Z({origin:l,size:[e.blockWidth,e.blockHeight],spatialReference:t,lods:r}),e.isVirtualTileInfo=!0}}createRemoteDatasetStorageInfo(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:512,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:512,n=arguments.length>3?arguments[3]:void 0;const{width:r,height:s,nativeExtent:a,pixelSize:o,spatialReference:l}=e,c=new Q.Z({x:a.xmin,y:a.ymax,spatialReference:l});null==n&&(n=Math.max(0,Math.round(Math.log(Math.max(r,s))/Math.LN2-8)));const h=this.computeBlockBoundary(a,512,512,{x:a.xmin,y:a.ymax},[o],n);e.storageInfo=new $.Z({blockWidth:t,blockHeight:i,pyramidBlockWidth:t,pyramidBlockHeight:i,origin:c,firstPyramidLevel:1,maximumPyramidLevel:n,blockBoundary:h})}async computeBestPyramidLevelForLocation(e){return 0}computeBlockBoundary(e,t,i,n,r){let s=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0,a=arguments.length>6&&void 0!==arguments[6]?arguments[6]:2;if(1===r.length&&s>0){r=[...r];let{x:e,y:t}=r[0];for(let i=0;i<s;i++)e*=a,t*=a,r.push({x:e,y:t})}const o=[],{x:l,y:c}=n;for(let h=0;h<r.length;h++){const{x:n,y:s}=r[h];o.push({minCol:Math.floor((e.xmin-l+.1*n)/t/n),maxCol:Math.floor((e.xmax-l-.1*n)/t/n),minRow:Math.floor((c-e.ymax+.1*s)/i/s),maxRow:Math.floor((c-e.ymin-.1*s)/i/s)})}return o}getPyramidPixelSize(e){const{nativePixelSize:t}=this.rasterInfo,{pyramidResolutions:i,pyramidScalingFactor:n}=this.rasterInfo.storageInfo;if(0===e)return t;if((0,o.pC)(i)&&i.length)return i[e-1];const r=n**e;return{x:t.x*r,y:t.y*r}}identifyPixelLocation(e,t,i,n){const{spatialReference:r,nativeExtent:s,storageInfo:a}=this.rasterInfo,{maximumPyramidLevel:l,origin:c,transposeInfo:h}=a,f=n&&(0,o.pC)(h)?h.tileSize[0]:a.blockWidth,u=n&&(0,o.pC)(h)?h.tileSize[1]:a.blockHeight,d=(0,K.nF)(e,r,i);if(!s.intersects(d))return null;if(t<0||t>l)return null;const p=this.getPyramidPixelSize(t),{x:m,y:y}=p,g=(c.y-d.y)/y/u,x=(d.x-c.x)/m/f,v=Math.min(u-1,Math.floor((g-Math.floor(g))*u)),b=Math.min(f-1,Math.floor((x-Math.floor(x))*f));return{pyramidLevel:t,row:Math.floor(g),col:Math.floor(x),rowOffset:v,colOffset:b,blockWidth:f,srcLocation:d}}getTileExtent(e,t,i,n,r,s){const[a,o]=s,l=n.x+i*a*e.x,c=l+a*e.x,h=n.y-t*o*e.y,f=h-o*e.y;return new z.Z({xmin:l,xmax:c,ymin:f,ymax:h,spatialReference:r})}getBlockWidthHeight(e){return{blockWidth:e>0?this.rasterInfo.storageInfo.pyramidBlockWidth:this.rasterInfo.storageInfo.blockWidth,blockHeight:e>0?this.rasterInfo.storageInfo.pyramidBlockHeight:this.rasterInfo.storageInfo.blockHeight}}isBlockOutside(e,t,i){const n=this.rasterInfo.storageInfo.blockBoundary[e];return!n||n.maxRow<t||n.maxCol<i||n.minRow>t||n.minCol>i}async _fetchPixels(e,t,i){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},r=(0,K.Hq)(e);if(r>=2)return{extent:e,pixelBlock:null};const s=this._getSourceDataInfo(e,t,i,n),{pyramidLevel:a,pyramidResolution:l,srcResolution:c,srcExtent:h,srcWidth:f,srcHeight:u}=s;if(0===f||0===u)return{extent:e,srcExtent:h,pixelBlock:null};const d=(0,o.Wg)(this.rasterInfo.transform),p="gcs-shift"===d?.type,m=(0,o.pC)((0,K.ut)(e.spatialReference));!p&&m||(r=(0,K.Hq)(s.srcExtent,p));const y=this.rasterInfo.storageInfo,g={x:Math.floor((h.xmin-y.origin.x)/l.x+.1),y:Math.floor((y.origin.y-h.ymax)/l.y+.1)},x=await this._fetchRawTiles(a,g,{width:f,height:u,wrapCount:r},n);if(!x)return{extent:e,srcExtent:h,pixelBlock:null};const v=a>0?y.pyramidBlockWidth:y.blockWidth,b=a>0?y.pyramidBlockHeight:y.blockHeight,w=v===f&&b===u&&g.x%v==0&&g.y%b==0,I=new Q.Z({x:(e.xmax-e.xmin)/t,y:(e.ymax-e.ymin)/i,spatialReference:e.spatialReference}),_=!e.spatialReference.equals(this.rasterInfo.spatialReference),{datumTransformation:C}=n;if(!_&&w&&1===x.pixelBlocks.length&&v===t&&b===i&&c.x===I.x&&c.y===I.y)return{extent:e,srcExtent:h,pixelBlock:x.pixelBlocks[0]};const S=m&&(0,o.pC)((0,K.ut)(h.spatialReference)),T=n.requestProjectedLocalDirections&&this.rasterInfo.dataType.startsWith("vector");T&&!this.rasterJobHandler&&await(0,K.zD)();const R=this.rasterJobHandler?await this.rasterJobHandler.getProjectionOffsetGrid({projectedExtent:e,srcBufferExtent:x.extent,pixelSize:I.toJSON(),datumTransformation:C,rasterTransform:d,hasWrapAround:r>0||S,isAdaptive:!1!==this.ioConfig.optimizeProjectionAccuracy,includeGCSGrid:T},n):(0,K.Qp)({projectedExtent:e,srcBufferExtent:x.extent,pixelSize:I,datumTransformation:C,rasterTransform:d,hasWrapAround:r>0||S,isAdaptive:!1,includeGCSGrid:T});let k;const P=!n.requestRawData,O={rows:R.spacing[0],cols:R.spacing[1]},B=(0,o.Wg)(this._getRasterTileAlignmentInfo(a,x.extent.xmin)),{pixelBlocks:F,mosaicSize:z,isPartiallyFilled:D}=x;let E=null;if(this.rasterJobHandler){const e=await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:F,srcMosaicSize:z,destDimension:P?{width:t,height:i}:null,coefs:P?R.coefficients:null,sampleSpacing:P?O:null,projectDirections:T,gcsGrid:T?R.gcsGrid:null,isUV:"vector-uv"===this.rasterInfo.dataType,interpolation:n.interpolation,alignmentInfo:B,blockWidths:null},n);({pixelBlock:k,localNorthDirections:E}=e)}else{const e=(0,Y.us)(F,z,{alignmentInfo:B});k=P?(0,Y.Uk)(e,{width:t,height:i},R.coefficients,O,n.interpolation):e,T&&R.gcsGrid&&(E=(0,Y.Qh)({width:t,height:i},R.gcsGrid),k=(0,M.xQ)(k,this.rasterInfo.dataType,E))}return n.requestRawData||T?{srcExtent:h,pixelBlock:k,transformGrid:R,localNorthDirections:E,extent:e,isPartiallyFilled:D}:{srcExtent:h,extent:e,pixelBlock:k}}async _fetchRawTiles(e,t,i,n){const{origin:r,blockBoundary:s}=this.rasterInfo.storageInfo,{blockWidth:a,blockHeight:l}=this.getBlockWidthHeight(e);let{x:c,y:h}=t,{width:f,height:u,wrapCount:d}=i;const p=this._getRasterTileAlignmentInfo(e,0);n.buffer&&(c-=n.buffer.cols,h-=n.buffer.rows,f+=2*n.buffer.cols,u+=2*n.buffer.rows);let m=0,y=0,g=0;d&&(0,o.pC)(p)&&(({worldColumnCountFromOrigin:y,originColumnOffset:g,rightPadding:m}=p),y*p.blockWidth-m>=c+f&&(m=0));const x=Math.floor(c/a),v=Math.floor(h/l),b=Math.floor((c+f+m-1)/a),w=Math.floor((h+u+m-1)/l),I=s[e];if(!I)return null;const{minRow:_,minCol:C,maxCol:S,maxRow:T}=I;if(0===d&&(w<_||b<C||v>T||x>S))return null;const R=new Array;let k=!1;const P=null==this.ioConfig.allowPartialFill?n.allowPartialFill:this.ioConfig.allowPartialFill;for(let z=v;z<=w;z++)for(let t=x;t<=b;t++){let i=t;if(!n.disableWrapAround&&d&&(0,o.pC)(p)&&y<=t&&(i=t-y-g),z>=_&&i>=C&&T>=z&&S>=i){const t=this._fetchRawTile(e,z,i,n);P?R.push(new Promise((e=>{t.then((t=>e(t))).catch((()=>{k=!0,e(null)}))}))):R.push(t)}else R.push(null)}if(0===R.length)return null;const M=await Promise.all(R),O={height:(w-v+1)*l,width:(b-x+1)*a},{spatialReference:B}=this.rasterInfo,F=this.getPyramidPixelSize(e),{x:D,y:E}=F;return{extent:new z.Z({xmin:r.x+x*a*D,xmax:r.x+(b+1)*a*D,ymin:r.y-(w+1)*l*E,ymax:r.y-v*l*E,spatialReference:B}),pixelBlocks:M,mosaicSize:O,isPartiallyFilled:k}}_fetchRawTile(e,t,i,n){const r=this.rasterInfo.storageInfo.blockBoundary[e];if(!r)return Promise.resolve(null);const{minRow:s,minCol:a,maxCol:l,maxRow:h}=r;if(t<s||i<a||t>h||i>l)return Promise.resolve(null);const f=(0,V.Rq)(this.url,n.sliceId),u=`${e}/${t}/${i}`;let d=(0,V.Qg)(f,n.registryId,u);if((0,o.Wi)(d)){const r=new AbortController;d=this.fetchRawTile(e,t,i,{...n,signal:r.signal}),(0,V.gX)(f,n.registryId,u,d,r),d.catch((()=>(0,V.Gc)(f,n.registryId,u)))}return n.signal&&(0,c.fu)(n,(()=>{(0,V.OE)(f,n.registryId,u)})),d}_computeMagDirValues(e){const{bandCount:t,dataType:i}=this.rasterInfo;if((2!==t||"vector-magdir"!==i)&&"vector-uv"!==i||2!==e?.length||!e[0]?.length)return null;const n=e[0].length;if("vector-magdir"===i){const t=e[1].map((e=>(e+360)%360));return[e[0],t]}const[r,s]=e,a=[],o=[];for(let l=0;l<n;l++){const[e,t]=(0,M.Tg)([r[l],s[l]]);a.push(e),o.push(t)}return[a,o]}_getRasterTileAlignmentInfo(e,t){return null==this._rasterTileAlighmentInfo&&(this._rasterTileAlighmentInfo=(0,K.P_)(this.rasterInfo)),(0,o.Wi)(this._rasterTileAlighmentInfo.pyramidsInfo)?null:{startX:t,halfWorldWidth:this._rasterTileAlighmentInfo.halfWorldWidth,hasGCSSShiftTransform:this._rasterTileAlighmentInfo.hasGCSSShiftTransform,...this._rasterTileAlighmentInfo.pyramidsInfo[e]}}_getSourceDataInfo(e,t,i){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};const r={datumTransformation:n.datumTransformation,pyramidLevel:0,pyramidResolution:null,srcExtent:null,srcHeight:0,srcResolution:null,srcWidth:0};n.srcResolution&&(r.srcResolution=n.srcResolution,this._updateSourceDataInfo(e,r));const s=this.rasterInfo.storageInfo.maximumPyramidLevel||0,{srcWidth:a,srcHeight:o,pyramidLevel:l}=r,c=a/t,h=o/i,f=l<s&&c*h>=16;if(f||l===s&&(c>8||h>8)||0===a||0===o){const a=new Q.Z({x:(e.xmax-e.xmin)/t,y:(e.ymax-e.ymin)/i,spatialReference:e.spatialReference});let o=(0,K.VO)(a,this.rasterInfo.spatialReference,e,r.datumTransformation);const u=!o||n.srcResolution&&o.x+o.y<n.srcResolution.x+n.srcResolution.y;if(f&&n.srcResolution&&u){const e=Math.round(Math.log(Math.max(c,h))/Math.LN2)-1;if(s-l+3>=e){const t=2**e;o={x:n.srcResolution.x*t,y:n.srcResolution.y*t}}}o&&(r.srcResolution=o,this._updateSourceDataInfo(e,r))}return(r.srcWidth/t>8||r.srcHeight/i>8)&&(r.srcWidth=0,r.srcHeight=0),r}_updateSourceDataInfo(e,t){t.srcWidth=0,t.srcHeight=0;const i=this.rasterInfo.spatialReference,{srcResolution:n,datumTransformation:r}=t,{pyramidLevel:s,pyramidResolution:a,excessiveReading:l}=(0,K.kr)(n,this.rasterInfo,this.ioConfig.sampling);if(l)return;let c=t.srcExtent||(0,K.tB)(e,i,r);if(null==c)return;const h=(0,o.Wg)(this.rasterInfo.transform);h&&(c=h.inverseTransform(c)),t.srcExtent=c;const f=Math.ceil((c.xmax-c.xmin)/a.x-.1),u=Math.ceil((c.ymax-c.ymin)/a.y-.1);t.pyramidLevel=s,t.pyramidResolution=a,t.srcWidth=f,t.srcHeight=u}_getRequestOptionsWithSliceId(e){return(0,o.pC)(this.rasterInfo.multidimensionalInfo)&&null==e.sliceId&&(e={...e,sliceId:this.getSliceIndex(e.multidimensionalDefinition)}),e}_processIdentifyResult(e,t){const{srcLocation:i,position:n,pyramidLevel:r,useTransposedTile:s}=t,a=e.pixels[0].length/e.width/e.height;if(e.mask&&!e.mask[n])return{location:i,value:null};const{multidimensionalInfo:l}=this.rasterInfo;if((0,o.Wi)(l)||!s){const t=e.pixels.map((e=>e[n])),s={location:i,value:t,pyramidLevel:r},a=this._computeMagDirValues(t.map((e=>[e])));return a?.length&&(s.magdirValue=a.map((e=>e[0]))),s}let c=e.pixels.map((e=>Array.prototype.slice.call(e,n*a,n*a+a))),h=this._computeMagDirValues(c);const{requestSomeSlices:f,identifyOptions:u}=t;let d=(0,P.MO)(l,u.transposedVariableName);if(f){const e=(0,P.Ur)(d,(0,o.Wg)(u.multidimensionalDefinition),(0,o.Wg)(u.timeExtent));c=c.map((t=>e.map((e=>t[e])))),h=h?.map((t=>e.map((e=>t[e])))),d=e.map((e=>d[e]))}return{location:i,value:null,dataSeries:d.map(((e,t)=>{const i={value:c.map((e=>e[t])),multidimensionalDefinition:e.multidimensionalDefinition,variableName:e.multidimensionalDefinition[0].variableName,dimensionValues:{}};return h?.length&&(i.magdirValue=[h[0][t],h[1][t]]),e.multidimensionalDefinition.forEach((e=>i.dimensionValues[e.dimensionName]=e.values[0])),i})),pyramidLevel:r}}};(0,n._)([(0,f.Cb)()],ee.prototype,"_rasterTileAlighmentInfo",void 0),(0,n._)([(0,f.Cb)({readOnly:!0})],ee.prototype,"_isGlobalWrappableSource",null),(0,n._)([(0,f.Cb)(S.HQ)],ee.prototype,"url",null),(0,n._)([(0,f.Cb)({type:String,json:{write:!0}})],ee.prototype,"datasetName",void 0),(0,n._)([(0,f.Cb)({type:String,json:{write:!0}})],ee.prototype,"datasetFormat",void 0),(0,n._)([(0,f.Cb)()],ee.prototype,"rasterInfo",void 0),(0,n._)([(0,f.Cb)()],ee.prototype,"ioConfig",void 0),(0,n._)([(0,f.Cb)()],ee.prototype,"sourceJSON",void 0),ee=(0,n._)([(0,y.j)("esri.layers.support.rasterDatasets.BaseRaster")],ee);const te=ee;var ie=i(17061);function ne(e){const t=e.fields,i=e.records,n=t.some((e=>"oid"===e.name.toLowerCase()))?"OBJECTID":"OID",r=[{name:n,type:"esriFieldTypeOID",alias:"OID"}].concat(t.map((e=>({name:e.name,type:"esriFieldType"+e.typeName,alias:e.name})))),s=r.map((e=>e.name)),a=[];let o=0,l=0;return i.forEach((e=>{const t={};for(t[n]=o++,l=1;l<s.length;l++)t[s[l]]=e[l-1];a.push({attributes:t})})),{displayFieldName:"",fields:r,features:a}}class re{static get supportedVersions(){return[5]}static parse(e){const t=new DataView(e),i=3&t.getUint8(0);if(3!==i)return{header:{version:i},recordSet:null};const n=t.getUint32(4,!0),r=t.getUint16(8,!0),s=t.getUint16(10,!0),a={version:i,recordCount:n,headerByteCount:r,recordByteCount:s};let o=32;const l=[],c=[];let h;if(3===i){for(;13!==t.getUint8(o);)h=String.fromCharCode(t.getUint8(o+11)).trim(),l.push({name:(0,ie.f)(new Uint8Array(e,o,11)),type:h,typeName:["String","Date","Double","Boolean","String","Integer"][["C","D","F","L","M","N"].indexOf(h)],length:t.getUint8(o+16)}),o+=32;if(o+=1,l.length>0)for(;c.length<n&&e.byteLength-o>s;){const i=[];32===t.getUint8(o)?(o+=1,l.forEach((t=>{if("C"===t.type)i.push((0,ie.f)(new Uint8Array(e,o,t.length)).trim());else if("N"===t.type)i.push(parseInt(String.fromCharCode.apply(null,new Uint8Array(e,o,t.length)).trim(),10));else if("F"===t.type)i.push(parseFloat(String.fromCharCode.apply(null,new Uint8Array(e,o,t.length)).trim()));else if("D"===t.type){const n=String.fromCharCode.apply(null,new Uint8Array(e,o,t.length)).trim();i.push(new Date(parseInt(n.substring(0,4),10),parseInt(n.substring(4,6),10)-1,parseInt(n.substring(6,8),10)))}o+=t.length})),c.push(i)):o+=s}}return{header:a,fields:l,records:c,recordSet:ne({fields:l,records:c})}}}var se=i(77960),ae=i(49818);const oe=new Map;oe.set("int16","esriFieldTypeSmallInteger"),oe.set("int32","esriFieldTypeInteger"),oe.set("int64","esriFieldTypeInteger"),oe.set("float32","esriFieldTypeSingle"),oe.set("float64","esriFieldTypeDouble"),oe.set("text","esriFieldTypeString");let le=class extends te{constructor(){super(...arguments),this.storageInfo=null,this.datasetFormat="CRF"}async open(e){await this.init();const{data:t}=await this.request(this.url+"/conf.json",{signal:e?.signal});if(!this._validateHeader(t))throw new a.Z("cloudraster:open","Invalid or unsupported conf.json.");this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const{storageInfo:i,rasterInfo:n}=this._parseHeader(t);if("thematic"===n.dataType){const e=await this._fetchAuxiliaryInformation();n.attributeTable=e}this._set("storageInfo",i),this._set("rasterInfo",n),this.ioConfig.retryCount=this.ioConfig.retryCount||0}async fetchRawTile(e,t,i){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};const{transposeInfo:r}=this.rasterInfo.storageInfo,{transposedVariableName:s}=n,a=!(!r||!s),o=a?0:this.rasterInfo.storageInfo.maximumPyramidLevel-e;if(o<0)return null;const l=this._buildCacheFilePath(o,t,i,n.multidimensionalDefinition,s),c=this._getIndexRecordFromBundle(t,i,a),h=await this.request(l,{range:{from:0,to:this.storageInfo.headerSize-1},responseType:"array-buffer",signal:n.signal});if(!h)return null;const f=new Uint8Array(h.data),u=this._getTileEndAndContentType(f,c);if(0===u.recordSize)return null;const d=await this.request(l,{range:{from:u.position,to:u.position+u.recordSize},responseType:"array-buffer",signal:n.signal});if(!d)return null;const[p,m]=this._getTileSize(a);return this.decodePixelBlock(d.data,{width:p,height:m,planes:null,pixelType:null,returnPixelInterleavedDims:a})}_validateHeader(e){return e&&"RasterInfo"===e.type&&!["origin","extent","geodataXform","LODInfos","blockWidth","blockHeight","bandCount","pixelType","pixelSizeX","pixelSizeY","format","packetSize"].some((t=>!e[t]))}_parseHeader(e){const t=["u1","u2","u4","u8","s8","u16","s16","u32","s32","f32","f64"][e.pixelType],{bandCount:i,histograms:n,colormap:r,blockWidth:s,blockHeight:a,firstPyramidLevel:o,maximumPyramidLevel:l}=e,c=e.statistics&&e.statistics.map((e=>({min:e.min,max:e.max,avg:e.mean,stddev:e.standardDeviation,median:e.median,mode:e.mode}))),h=e.extent.spatialReference,f=e.geodataXform?.spatialReference,u=new D.Z(h?.wkid||h?.wkt?h:f);let d=new z.Z({xmin:e.extent.xmin,ymin:e.extent.ymin,xmax:e.extent.xmax,ymax:e.extent.ymax,spatialReference:u});const p=new Q.Z({x:e.pixelSizeX,y:e.pixelSizeY,spatialReference:u}),m=Math.round((d.xmax-d.xmin)/p.x),y=Math.round((d.ymax-d.ymin)/p.y),g=this._parseTransform(e.geodataXform),x=g?d:null;g&&(d=g.forwardTransform(d),p.x=(d.xmax-d.xmin)/m,p.y=(d.ymax-d.ymin)/y);const v=e.properties??{},b=e.format.toLowerCase().replace("cache/",""),w=new Q.Z(e.origin.x,e.origin.y,u);let I,_,C,S;if(r&&r.colors)for(I=[],_=0;_<r.colors.length;_++)C=r.colors[_],S=r.values?r.values[_]:_,I.push([S,255&C,C<<16>>>24,C<<8>>>24,C>>>24]);const T=e.LODInfos,R=[];for(_=0;_<T.levels.length;_++)R.push({level:T.levels[_],resolution:T.resolutions[_],scale:96/.0254*T.resolutions[_]});const P=new k.Z({dpi:96,lods:R,format:b,origin:w,size:[s,a],spatialReference:u}),M={recordSize:8,packetSize:e.packetSize,headerSize:e.packetSize*e.packetSize*8+64},O=[{maxCol:Math.ceil(m/s)-1,maxRow:Math.ceil(y/a)-1,minCol:0,minRow:0}];let B=2;if(l>0)for(_=0;_<l;_++)O.push({maxCol:Math.ceil(m/B/s)-1,maxRow:Math.ceil(y/B/a)-1,minCol:0,minRow:0}),B*=2;const F=e.mdInfo;let E=null;if(F&&v._yxs){const e=v._yxs;E={packetSize:e.PacketSize,tileSize:[e.TileXSize,e.TileYSize]}}return{storageInfo:M,rasterInfo:new q.Z({width:m,height:y,pixelType:t,bandCount:i,extent:d,nativeExtent:x,transform:g,spatialReference:u,pixelSize:p,keyProperties:v,statistics:c,histograms:n,multidimensionalInfo:F,colormap:I,storageInfo:new $.Z({blockWidth:s,blockHeight:a,pyramidBlockWidth:s,pyramidBlockHeight:a,origin:w,tileInfo:P,transposeInfo:E,firstPyramidLevel:o,maximumPyramidLevel:l,blockBoundary:O})})}}_parseTransform(e){if(!(0,se.j)(e))throw new a.Z("cloudraster:open","the data contains unsupported geodata transform types");const t=(0,se.c)(e);if("identity"===t.type)return null;if("polynomial"!==t.type||!t.forwardCoefficients?.length||!t.inverseCoefficients?.length)throw new a.Z("cloudraster:open","the data contains unsupported geodata transforms - both forward and inverse coefficients are required currently");return t}async _fetchAuxiliaryInformation(e){const t=this.request(this.url+"/conf.vat.json",{signal:e}).then((e=>e.data)).catch((()=>null)),i=this.request(this.url+"/conf.vat.dbf",{responseType:"array-buffer",signal:e}).then((e=>e.data)).catch((()=>null)),n=await Promise.all([t,i]);let r;if(n[0]){let e=n[0].fields;const t=n[0].values;if(e&&t){e=e.map((e=>({type:"OID"===e.name?"esriFieldTypeOID":oe.get(e.type),name:e.name,alias:e.alias||e.name})));const i=t.map((e=>({attributes:e})));e&&t&&(r={fields:e,features:i})}}return!r&&n[1]&&(r=re.parse(n[1]).recordSet),ae.default.fromJSON(r)}_buildCacheFilePath(e,t,i,n,r){const s=this._getPackageSize(!!r),a=Math.floor(t/s)*s,l=Math.floor(i/s)*s,c="R"+this._toHexString4(a)+"C"+this._toHexString4(l);let h="L";h+=e>=10?e.toString():"0"+e.toString();const{multidimensionalInfo:f}=this.rasterInfo,u=n?.[0];if((0,o.Wi)(f)||!u)return`${this.url}/_alllayers/${h}/${c}.bundle`;let d="_yxs";if(!r){d=f.variables.find((e=>e.name===u.variableName)).dimensions[0].values.indexOf(u.values[0]).toString(16);const e=4-d.length;for(let t=0;t<e;t++)d="0"+d;d="S"+d}const p=this._getVariableFolderName(r||u.variableName);return`${this.url}/_alllayers/${p}/${d}/${h}/${c}.bundle`}_getPackageSize(){let e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];const{transposeInfo:t}=this.rasterInfo.storageInfo;return e&&(0,o.pC)(t)?t.packetSize:this.storageInfo.packetSize}_getTileSize(){let e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];const{storageInfo:t}=this.rasterInfo,{transposeInfo:i}=t;return e&&(0,o.pC)(i)?i.tileSize:t.tileInfo.size}_getVariableFolderName(e){return""===(e=e.trim())?"_v":e.replace(/[\{|\}\-]/g,"_").replace("\\*","_v")}_getIndexRecordFromBundle(e,t){let i=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const n=this._getPackageSize(i),r=n*(e%n)+t%n;if(r<0)throw"Invalid level / row / col";return 20+r*this.storageInfo.recordSize+44}_getTileEndAndContentType(e,t){const i=e.subarray(t,t+8);let n,r=0;for(n=0;n<5;n++)r|=(255&i[n])<<8*n;const s=0xffffffffff&r;for(r=0,n=5;n<8;n++)r|=(255&i[n])<<8*(n-5);return{position:s,recordSize:0xffffffffff&r}}_toHexString4(e){let t=e.toString(16);if(4!==t.length){let e=4-t.length;for(;e-- >0;)t="0"+t}return t}};(0,n._)([(0,f.Cb)({readOnly:!0})],le.prototype,"storageInfo",void 0),(0,n._)([(0,f.Cb)({type:String,json:{write:!0}})],le.prototype,"datasetFormat",void 0),le=(0,n._)([(0,y.j)("esri.layers.support.rasterDatasets.CloudRaster")],le);const ce=le;var he=i(21449);let fe=class extends te{constructor(){super(...arguments),this.datasetFormat="MEMORY"}async open(e){await this.init();const{pixelBlock:t,statistics:i,histograms:n,name:r,keyProperties:s,nativeExtent:a,transform:o}=this.data,{width:l,height:c,pixelType:h}=t,f=this.data.extent||new z.Z({xmin:-.5,ymin:.5,xmax:l-.5,ymax:c-.5,spatialReference:new D.Z({wkid:3857})}),u=this.data.isPseudoSpatialReference??!this.data.extent,d={x:f.width/l,y:f.height/c},p=new q.Z({width:l,height:c,pixelType:h,extent:f,nativeExtent:a,transform:o,pixelSize:d,spatialReference:f.spatialReference,bandCount:3,keyProperties:s||{},statistics:i,isPseudoSpatialReference:u,histograms:n});this.createRemoteDatasetStorageInfo(p,512,512),this._set("rasterInfo",p),this.updateTileInfo(),await this._buildInMemoryRaster(t,{width:512,height:512},e),this.datasetName=r,this.url="/InMemory/"+r}fetchRawTile(e,t,i){const n=this._pixelBlockTiles.get(`${e}/${t}/${i}`);return Promise.resolve(n)}async _buildInMemoryRaster(e,t,i){const n=this.rasterInfo.storageInfo.maximumPyramidLevel,r=this.rasterJobHandler?this.rasterJobHandler.split({pixelBlock:e,tileSize:t,maximumPyramidLevel:n},i):Promise.resolve((0,Y.Vl)(e,t,n)),s=(0,o.pC)(this.rasterInfo.statistics),l=(0,o.pC)(this.rasterInfo.histograms),h=s?Promise.resolve({statistics:null,histograms:null}):this.rasterJobHandler?this.rasterJobHandler.estimateStatisticsHistograms({pixelBlock:e},i):Promise.resolve((0,he.Hv)(e)),f=await(0,c.as)([r,h]);if(!f[0].value&&f[1].value)throw new a.Z("inmemory-raster:open","failed to build in memory raster");this._pixelBlockTiles=f[0].value,s||(this.rasterInfo.statistics=f[1].value?.statistics),l||(this.rasterInfo.histograms=f[1].value?.histograms)}};(0,n._)([(0,f.Cb)({type:String,json:{write:!0}})],fe.prototype,"datasetFormat",void 0),(0,n._)([(0,f.Cb)()],fe.prototype,"data",void 0),fe=(0,n._)([(0,y.j)("esri.layers.support.rasterDatasets.InMemoryRaster")],fe);const ue=fe;function de(e,t){if(!e||!t)return[];let i=t;t.includes("/")?(i=t.slice(0,t.indexOf("/")),t=t.slice(t.indexOf("/")+1)):t="";const n=[];if(t){const r=de(e,i);for(let e=0;e<r.length;e++)de(r[e],t).forEach((e=>n.push(e)));return n}const r=e.getElementsByTagNameNS("*",i);if(!r||0===r.length)return[];for(let s=0;s<r.length;s++)n.push(r[s]||r.item[s]);return n}function pe(e,t){if(!e||!t)return null;let i=t;t.includes("/")?(i=t.slice(0,t.indexOf("/")),t=t.slice(t.indexOf("/")+1)):t="";const n=de(e,i);return n.length>0?t?pe(n[0],t):n[0]:null}function me(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;const i=t?pe(e,t):e;let n;return i?(n=i.textContent||i.nodeValue,n?n.trim():null):null}function ye(e,t){const i=de(e,t),n=[];let r;for(let s=0;s<i.length;s++)r=i[s].textContent||i[s].nodeValue,r&&(r=r.trim(),""!==r&&n.push(r));return n}function ge(e,t){return ye(e,t).map((e=>Number(e)))}function xe(e,t){const i=me(e,t);return Number(i)}function ve(e,t){const i=e?.nodeName?.toLowerCase(),n=t.toLowerCase();return i.slice(i.lastIndexOf(":")+1)===n}var be=i(69405);function we(e,t){if(!e||!t)return null;const i=[];for(let n=0;n<e.length;n++)i.push(e[n]),i.push(t[n]);return i}function Ie(e){if(!e)return null;let t=Number(e);if(!isNaN(t)&&0!==t)return new D.Z({wkid:t});if((e=String(e)).startsWith("COMPD_CS")){if(!e.includes("VERTCS")||!e.includes("GEOGCS")&&!e.startsWith("PROJCS"))return null;const i=e.indexOf("VERTCS"),n=e.indexOf("PROJCS"),r=n>-1?n:e.indexOf("GEOGCS");if(-1===r)return null;const s=e.slice(r,e.lastIndexOf("]",i)+1).trim(),a=e.slice(i,e.lastIndexOf("]")).trim();t=_e(s);const o=new D.Z(t?{wkid:t}:{wkt:s}),l=_e(a);return l&&(o.vcsWkid=l),o}return e.startsWith("GEOGCS")||e.startsWith("PROJCS")?(t=_e(e),new D.Z(0!==t?{wkid:t}:{wkt:e})):null}function _e(e){const t=e.replace(/\]/g,"[").replace(/\"/g,"").split("[").map((e=>e.trim())).filter((e=>""!==e)),i=t[t.length-1].split(","),n=i[0]?.toLowerCase();if(("epsg"===n||"esri"===n)&&e.endsWith('"]]')){const e=Number(i[1]);if(!isNaN(e)&&0!==e)return e}return 0}function Ce(e){if("pamdataset"!==e?.documentElement.tagName?.toLowerCase())return{};const t={spatialReference:null,transform:null,metadata:{},rasterBands:[],statistics:null,histograms:null};e.documentElement.childNodes.forEach((e=>{if(1===e.nodeType)if(ve(e,"SRS")){if(!t.spatialReference){const i=me(e);t.spatialReference=Ie(i)}}else if(ve(e,"Metadata"))if("xml:ESRI"===e.getAttribute("domain")){const{spatialReference:i,transform:n}=function(e){const t=pe(e,"GeodataXform"),i=Ie(xe(t,"SpatialReference/WKID")||me(t,"SpatialReference/WKT"));if("typens:PolynomialXform"!==t.getAttribute("xsi:type"))return{spatialReference:i,transform:null};const n=xe(t,"PolynomialOrder")??1,r=ge(t,"CoeffX/Double"),s=ge(t,"CoeffY/Double"),a=ge(t,"InverseCoeffX/Double"),o=ge(t,"InverseCoeffY/Double"),l=we(r,s),c=we(a,o);return{spatialReference:i,transform:new be.Z({spatialReference:i,polynomialOrder:n,forwardCoefficients:l,inverseCoefficients:c})}}(e);t.transform=n,t.spatialReference||(t.spatialReference=i)}else de(e,"MDI").forEach((e=>t.metadata[e.getAttribute("key")]=me(e)));else if(ve(e,"PAMRasterBand")){const i=function(e){const t=xe(e,"NoDataValue"),i=pe(e,"Histograms/HistItem"),n=xe(i,"HistMin"),r=xe(i,"HistMax"),s=xe(i,"BucketCount"),a=me(i,"HistCounts")?.split("|").map((e=>Number(e)));let o,l,c,h;de(e,"Metadata/MDI").forEach((e=>{const t=Number(e.textContent??e.nodeValue);switch(e.getAttribute("key").toUpperCase()){case"STATISTICS_MINIMUM":o=t;break;case"STATISTICS_MAXIMUM":l=t;break;case"STATISTICS_MEAN":c=t;break;case"STATISTICS_STDDEV":h=t}}));const f=xe(e,"Metadata/SourceBandIndex");return{noDataValue:t,histogram:a?.length&&null!=o&&null!=l?{min:n,max:r,size:s||a.length,counts:a}:null,sourceBandIndex:f,statistics:null!=o&&null!=l?{min:o,max:l,avg:c,stddev:h}:null}}(e);null!=i.sourceBandIndex&&null==t.rasterBands[i.sourceBandIndex]?t.rasterBands[i.sourceBandIndex]=i:t.rasterBands.push(i)}}));const i=t.rasterBands;if(i){const e=!!i[0].statistics;t.statistics=e?i.map((e=>e.statistics)):null;const n=!!i[0].histogram;t.histograms=n?i.map((e=>e.histogram)):null}return t}let Se=class extends te{async open(e){await this.init();const t=await this._fetchData(e);let{spatialReference:i,statistics:n,histograms:r,transform:s}=await this._fetchAuxiliaryData(e);const a=!i;a&&(i=new D.Z({wkid:3857})),r?.length&&null==n&&(n=(0,he.Oh)(r));const{width:o,height:l}=t;let c=new z.Z({xmin:-.5,ymin:.5-l,xmax:o-.5,ymax:.5,spatialReference:i});const h=s?s.forwardTransform(c):c;let f=!0;if(s){const e=s.forwardCoefficients;f=e&&0===e[1]&&0===e[2],f&&(s=null,c=h)}const u=new ue({data:{extent:h,nativeExtent:c,transform:s,pixelBlock:t,statistics:n,histograms:r,keyProperties:{DateType:"Processed"},isPseudoSpatialReference:a}});await u.open(),u.data=null,this._set("rasterInfo",u.rasterInfo),this._inMemoryRaster=u}fetchRawTile(e,t,i){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return this._inMemoryRaster.fetchRawTile(e,t,i,n)}async _fetchData(e){const{data:t}=await this.request(this.url,{responseType:"array-buffer",signal:e?.signal}),i=(0,X.y)(t).toUpperCase();if("JPG"!==i&&"PNG"!==i&&"GIF"!==i&&"BMP"!==i)throw new a.Z("image-aux-raster:open","the data is not a supported format");this._set("datasetFormat",i);const n=i.toLowerCase(),r="gif"===n||"bmp"===n||!(0,u.Z)("ios");return await this.decodePixelBlock(t,{format:n,useCanvas:r,hasNoZlibMask:!0})}async _fetchAuxiliaryData(e){const t=(0,o.Wg)(e?.signal),i=this.ioConfig.skipExtensions??[],n=i.includes("aux.xml")?null:this.request(this.url+".aux.xml",{responseType:"xml",signal:t}),r=this.datasetFormat,s="JPG"===r?"jgw":"PNG"===r?"pgw":"BMP"===r?"bpw":null,a=i.includes(s)?null:this.request(this.url.slice(0,this.url.lastIndexOf("."))+"."+s,{responseType:"text",signal:t}),l=await(0,c.as)([n,a]);if(t?.aborted)throw(0,c.zE)();const h=Ce(l[0].value?.data);if(!h.transform){const e=l[1].value?l[1].value.data.split("\n").slice(0,6).map((e=>Number(e))):null;h.transform=6===e?.length?new be.Z({forwardCoefficients:[e[4],e[5],e[0],-e[1],e[2],-e[3]]}):null}return h}};(0,n._)([(0,f.Cb)({type:String,json:{write:!0}})],Se.prototype,"datasetFormat",void 0),Se=(0,n._)([(0,y.j)("esri.layers.support.rasterDatasets.ImageAuxRaster")],Se);const Te=Se;var Re=i(35995),ke=i(71466),Pe=i(23638),Me=i(3089),Oe=i(38045);let Be=class extends te{constructor(){super(...arguments),this._levelOffset=0,this._tilemapCache=null,this._slices=null,this.datasetFormat="RasterTileServer"}async open(e){await this.init();const t=e&&e.signal,i=this.sourceJSON?{data:this.sourceJSON}:await this.request(this.url,{query:{f:"json"},signal:t});i.ssl&&(this.url=this.url.replace(/^http:/i,"https:"));const n=i.data;if(this.sourceJSON=n,!n)throw new a.Z("imageserverraster:open","cannot initialize tiled image service, missing service info");if(!n.tileInfo)throw new a.Z("imageserverraster:open","use ImageryLayer to open non-tiled image services");this._fixScaleInServiceInfo();this.tileType=n.cacheType,null==this.tileType&&(["jpg","jpeg","png","png8","png24","png32","mixed"].includes(n.tileInfo.format.toLowerCase())?this.tileType="Map":"lerc"===n.tileInfo.format.toLowerCase()?this.tileType="Elevation":this.tileType="Raster"),this.datasetName=n.name.slice(n.name.indexOf("/")+1);const r=await this._fetchRasterInfo({signal:t});if(!(0,o.pC)(r))throw new a.Z("image-server-raster:open","cannot initialize image service");{const e="Map"===this.tileType?(0,ke.d)(n.tileInfo,n):k.Z.fromJSON(n.tileInfo),{extent:t,pixelSize:i}=r,s=.5/r.width*i.x;let a,o;const l=e.lodAt(Math.max.apply(null,e.lods.map((e=>e.level))));"Map"!==this.tileType&&0!==n.maxScale&&("Raster"===this.tileType?(a=e.lods.find((e=>e.resolution===i.x)),a||(a=e.lods[e.lods.length-1])):(a=e.lods.find((e=>Math.abs(e.scale-n.maxScale)<s)),a||(a=e.lods.filter((e=>e.scale>n.maxScale)).sort(((e,t)=>e.scale>t.scale?1:-1))[0])),i.x=i.y=a.resolution,r.width=Math.ceil((t.xmax-t.xmin)/i.x-.1),r.height=Math.ceil((t.ymax-t.ymin)/i.y-.1)),a||(a=l);const c=e.lodAt(Math.min.apply(null,e.lods.map((e=>e.level))));"Map"===this.tileType?this._levelOffset=e.lods[0].level:0!==n.minScale&&"Elevation"===this.tileType&&(o=e.lods.find((e=>Math.abs(e.scale-n.minScale)<s)),this._levelOffset=o.level-c.level),o||(o=c);const h=Math.max(i.x,i.y);(Math.abs(i.x-i.y)>s||!e.lods.some((e=>Math.abs(e.resolution-h)<s)))&&(i.x=i.y=a.resolution,r.width=Math.ceil((t.xmax-t.xmin)/i.x-.1),r.height=Math.ceil((t.ymax-t.ymin)/i.y-.1));const f=a.level-o.level,[u,d]=e.size,p=[];e.lods.forEach((e=>{e.level>=o.level&&e.level<=a.level&&p.push({x:e.resolution,y:e.resolution})})),p.sort(((e,t)=>e.x-t.x));const m=this.computeBlockBoundary(t,u,d,e.origin,p,f),y=p.length>1?p.slice(1):null;let g;n.transposeInfo&&(g={tileSize:[n.transposeInfo.rows,n.transposeInfo.cols],packetSize:r.keyProperties?._yxs.PacketSize??0}),r.storageInfo=new $.Z({blockWidth:e.size[0],blockHeight:e.size[1],pyramidBlockWidth:e.size[0],pyramidBlockHeight:e.size[1],pyramidResolutions:y,compression:e.format,origin:e.origin,firstPyramidLevel:1,maximumPyramidLevel:f,tileInfo:e,transposeInfo:g,blockBoundary:m}),this._fixGCSShift(r),this._set("rasterInfo",r)}if(n.capabilities.toLowerCase().includes("tilemap")){const e={tileInfo:r.storageInfo.tileInfo,parsedUrl:(0,Re.mN)(this.url),url:this.url,tileServers:[],type:"tile"};this._tilemapCache=new Pe.y({layer:e})}}async fetchRawTile(e,t,i){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};const{storageInfo:r,extent:s}=this.rasterInfo,{transposeInfo:a}=r,l=(0,o.pC)(a)&&!!n.transposedVariableName;if(this._slices&&!l&&null==n.sliceId)return null;const c=l?0:r.maximumPyramidLevel-e+this._levelOffset,h=`${this.url}/tile/${c}/${t}/${i}`,f=this._slices?l?{variable:n.transposedVariableName}:{sliceId:n.sliceId||0}:null,{data:u}=await this.request(h,{query:f,responseType:"array-buffer",signal:n.signal});if(!u)return null;const d=l?a.tileSize:r.tileInfo.size,p=await this.decodePixelBlock(u,{width:d[0],height:d[1],planes:null,pixelType:null,isPoint:"Elevation"===this.tileType,returnPixelInterleavedDims:l}),m=r.blockBoundary[e];if("jpg"!==r.compression||i>m.minCol&&i<m.maxCol&&t>m.minRow&&t<m.maxRow)return p;const{origin:y,blockWidth:g,blockHeight:x}=r,{x:v,y:b}=this.getPyramidPixelSize(e),w=Math.round((s.xmin-y.x)/v)%g,I=Math.round((s.xmax-y.x)/v)%g||g,_=Math.round((y.y-s.ymax)/b)%x,C=Math.round((y.y-s.ymin)/b)%x||x,S=i===m.minCol?w:0,T=t===m.minRow?_:0,R=i===m.maxCol?I:g,k=t===m.maxRow?C:x;return(0,Y.pW)(p,{x:S,y:T},{width:R-S,height:k-T}),p}getSliceIndex(e){if(!this._slices||(0,o.Wi)(e)||0===e.length)return null;const t=e;for(let i=0;i<this._slices.length;i++){const e=this._slices[i].multidimensionalDefinition;if(e.length===t.length&&!e.some((e=>{const i=t.find((t=>e.variableName===t.variableName&&t.dimensionName===e.dimensionName));return!i||(Array.isArray(e.values[0])?`${e.values[0][0]}-${e.values[0][1]}`:e.values[0])!==(Array.isArray(i.values[0])?`${i.values[0][0]}-${i.values[0][1]}`:i.values[0])})))return i}return null}async fetchVariableStatisticsHistograms(e,t){const i=this.request(this.url+"/statistics",{query:{variable:e,f:"json"},signal:t}).then((e=>e.data?.statistics)),n=this.request(this.url+"/histograms",{query:{variable:e,f:"json"},signal:t}).then((e=>e.data?.histograms)),r=await Promise.all([i,n]);return r[0]&&r[0].forEach((e=>{e.avg=e.mean,e.stddev=e.standardDeviation})),{statistics:r[0]||null,histograms:r[1]||null}}async computeBestPyramidLevelForLocation(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!this._tilemapCache)return 0;let i=this.identifyPixelLocation(e,0,(0,o.Wg)(t.datumTransformation));if(null===i)return null;let n=0;const{maximumPyramidLevel:r}=this.rasterInfo.storageInfo;let s=r-n+this._levelOffset;const a=i.srcLocation;for(;s>=0;){try{if("available"===await this._tilemapCache.fetchAvailability(s,i.row,i.col,t))break}catch{}if(s--,n++,i=this.identifyPixelLocation(a,n,(0,o.Wg)(t.datumTransformation)),null===i)return null}return-1===s||null==i?null:n}async _fetchRasterInfo(e){const t=this.sourceJSON;if("Map"===this.tileType){const e=Math.ceil((t.extent.xmax-t.extent.xmin)/t.pixelSizeX-.1),i=Math.ceil((t.extent.ymax-t.extent.ymin)/t.pixelSizeY-.1),n=D.Z.fromJSON(t.spatialReference||t.extent.spatialReference),r=new Q.Z({x:t.pixelSizeX,y:t.pixelSizeY,spatialReference:n});return new q.Z({width:e,height:i,bandCount:3,extent:z.Z.fromJSON(t.extent),spatialReference:n,pixelSize:r,pixelType:"u8",statistics:null,keyProperties:{DataType:"processed"}})}const{signal:i}=e,n=(0,Oe.g)(this.url,this.sourceJSON,{signal:i,query:this.ioConfig.customFetchParameters}),r=t.hasMultidimensions?this.request(`${this.url}/slices`,{query:{f:"json"},signal:i}).then((e=>e.data&&e.data.slices)).catch((()=>null)):null,s=await Promise.all([n,r]);return this._slices=s[1],s[0]}_fixScaleInServiceInfo(){const{sourceJSON:e}=this;e.minScale&&e.minScale<0&&(e.minScale=0),e.maxScale&&e.maxScale<0&&(e.maxScale=0)}_fixGCSShift(e){const{extent:t,spatialReference:i}=e;0===t.xmin&&360===t.xmax&&i.wkid&&i.isGeographic&&(e.nativeExtent=e.extent,e.transform=new Me.Z,e.extent=e.transform.forwardTransform(t))}};(0,n._)([(0,f.Cb)({type:String,json:{write:!0}})],Be.prototype,"datasetFormat",void 0),(0,n._)([(0,f.Cb)()],Be.prototype,"tileType",void 0),Be=(0,n._)([(0,y.j)("esri.layers.support.rasterDatasets.ImageServerRaster")],Be);const Fe=Be;var ze=i(99278),De=i(60263);const Ee=new Map;Ee.set("Int8","s8"),Ee.set("UInt8","u8"),Ee.set("Int16","s16"),Ee.set("UInt16","u16"),Ee.set("Int32","s32"),Ee.set("UInt32","u32"),Ee.set("Float32","f32"),Ee.set("Float64","f32"),Ee.set("Double64","f32");const Ae=new Map;Ae.set("none",{blobExtension:".til",isOneSegment:!0,decoderFormat:"bip"}),Ae.set("lerc",{blobExtension:".lrc",isOneSegment:!1,decoderFormat:"lerc"}),Ae.set("deflate",{blobExtension:".pzp",isOneSegment:!0,decoderFormat:"deflate"}),Ae.set("jpeg",{blobExtension:".pjg",isOneSegment:!0,decoderFormat:"jpg"});let Ze=class extends te{constructor(){super(...arguments),this._files=null,this._storageIndex=null,this.datasetFormat="MRF"}async open(e){await this.init(),this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const t=e?(0,o.Wg)(e.signal):null,i=await this.request(this.url,{responseType:"xml",signal:t}),{rasterInfo:n,files:r}=this._parseHeader(i.data);if(-1===this.ioConfig.skipExtensions?.indexOf("aux.xml")){const t=await this._fetchAuxiliaryData(e);null!=t&&(n.statistics=t.statistics??n.statistics,n.histograms=t.histograms,t.histograms&&(0,o.Wi)(n.statistics)&&(n.statistics=(0,he.Oh)(t.histograms)))}this._set("rasterInfo",n),this._files=r;const s=await this.request(r.index,{responseType:"array-buffer",signal:t});this._storageIndex=this._parseIndex(s.data);const{blockWidth:a,blockHeight:l}=this.rasterInfo.storageInfo,c=this.rasterInfo.storageInfo.pyramidScalingFactor,{width:h,height:f}=this.rasterInfo,u=[],d=this._getBandSegmentCount();let p=0,m=-1;for(;p<this._storageIndex.length;){m++;const e=Math.ceil(h/a/c**m)-1,t=Math.ceil(f/l/c**m)-1;p+=(e+1)*(t+1)*d*4,u.push({maxRow:t,maxCol:e,minCol:0,minRow:0})}this.rasterInfo.storageInfo.blockBoundary=u,m>0&&(this.rasterInfo.storageInfo.firstPyramidLevel=1,this.rasterInfo.storageInfo.maximumPyramidLevel=m),this.updateTileInfo()}async fetchRawTile(e,t,i){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};const{blockWidth:r,blockHeight:s,blockBoundary:a}=this.rasterInfo.storageInfo,l=a[e];if(!l||l.maxRow<t||l.maxCol<i||l.minRow>t||l.minCol>i)return null;const{bandCount:c,pixelType:h}=this.rasterInfo,{ranges:f,actualTileWidth:u,actualTileHeight:d}=this._getTileLocation(e,t,i);if(!f||0===f.length)return null;if(0===f[0].from&&0===f[0].to){const e=new Uint8Array(r*s);return new ze.Z({width:r,height:s,pixels:null,mask:e,validPixelCount:0})}const{bandIds:p}=this.ioConfig,m=this._getBandSegmentCount(),y=[];let g=0;for(g=0;g<m;g++)(!p||p.indexOf[g]>-1)&&y.push(this.request(this._files.data,{range:{from:f[g].from,to:f[g].to},responseType:"array-buffer",signal:n.signal}));const x=await Promise.all(y),v=x.map((e=>e.data.byteLength)).reduce(((e,t)=>e+t)),b=new Uint8Array(v);let w=0;for(g=0;g<m;g++)b.set(new Uint8Array(x[g].data),w),w+=x[g].data.byteLength;const I=Ae.get(this.rasterInfo.storageInfo.compression).decoderFormat,_=await this.decodePixelBlock(b.buffer,{width:r,height:s,format:I,planes:p?.length||c,pixelType:h});if((0,o.pC)(this.rasterInfo.noDataValue)&&"lerc"!==I&&!_.mask){const e=this.rasterInfo.noDataValue[0];if(null!=e){const t=_.width*_.height,i=new Uint8Array(t);if(Math.abs(e)>1e24)for(g=0;g<t;g++)Math.abs((_.pixels[0][g]-e)/e)>1e-6&&(i[g]=1);else for(g=0;g<t;g++)_.pixels[0][g]!==e&&(i[g]=1);_.mask=i}}let C=0,S=0;if(u!==r||d!==s){let e=_.mask;if(e)for(g=0;g<s;g++)if(S=g*r,g<d)for(C=u;C<r;C++)e[S+C]=0;else for(C=0;C<r;C++)e[S+C]=0;else for(e=new Uint8Array(r*s),_.mask=e,g=0;g<d;g++)for(S=g*r,C=0;C<u;C++)e[S+C]=1}return _}_parseIndex(e){if(e.byteLength%16>0)throw"invalid array buffer must be multiples of 16";let t,i,n,r,s,a;if(De.f){for(i=new Uint8Array(e),r=new ArrayBuffer(e.byteLength),n=new Uint8Array(r),s=0;s<e.byteLength/4;s++)for(a=0;a<4;a++)n[4*s+a]=i[4*s+3-a];t=new Uint32Array(r)}else t=new Uint32Array(e);return t}_getBandSegmentCount(){return Ae.get(this.rasterInfo.storageInfo.compression).isOneSegment?1:this.rasterInfo.bandCount}_getTileLocation(e,t,i){const{blockWidth:n,blockHeight:r,pyramidScalingFactor:s}=this.rasterInfo.storageInfo,{width:a,height:o}=this.rasterInfo,l=this._getBandSegmentCount();let c,h,f,u=0,d=0;for(f=0;f<e;f++)d=s**f,c=Math.ceil(a/n/d),h=Math.ceil(o/r/d),u+=c*h;d=s**e,c=Math.ceil(a/n/d),h=Math.ceil(o/r/d),u+=t*c+i,u*=4*l;const p=this._storageIndex.subarray(u,u+4*l);let m=0,y=0;const g=[];for(let x=0;x<l;x++)m=p[4*x+0]*2**32+p[4*x+1],y=m+p[4*x+2]*2**32+p[4*x+3],g.push({from:m,to:y});return{ranges:g,actualTileWidth:i<c-1?n:Math.ceil(a/d)-n*(c-1),actualTileHeight:t<h-1?r:Math.ceil(o/d)-r*(h-1)}}_parseHeader(e){const t=pe(e,"MRF_META/Raster");if(!t)throw new a.Z("mrf:open","not a valid MRF format");const i=pe(t,"Size"),n=parseInt(i.getAttribute("x"),10),r=parseInt(i.getAttribute("y"),10),s=parseInt(i.getAttribute("c"),10),o=(me(t,"Compression")||"none").toLowerCase();if(!Ae.has(o))throw new a.Z("mrf:open","currently does not support compression "+o);const l=me(t,"DataType")||"UInt8",c=Ee.get(l);if(null==c)throw new a.Z("mrf:open","currently does not support pixel type "+l);const h=pe(t,"PageSize"),f=parseInt(h.getAttribute("x"),10),u=parseInt(h.getAttribute("y"),10),d=pe(t,"DataValues");let p,m;if(d&&(m=d.getAttribute("NoData"),null!=m&&(p=m.trim().split(" ").map((e=>parseFloat(e))))),pe(e,"MRF_META/CachedSource"))throw new a.Z("mrf:open","currently does not support MRF referencing other data files");const y=pe(e,"MRF_META/GeoTags"),g=pe(y,"BoundingBox");let x,v=!1;if(null!=g){const e=parseFloat(g.getAttribute("minx")),t=parseFloat(g.getAttribute("miny")),i=parseFloat(g.getAttribute("maxx")),n=parseFloat(g.getAttribute("maxy")),r=me(y,"Projection")||"";let s;if("LOCAL_CS[]"!==r)if(r.toLowerCase().startsWith("epsg:")){const e=Number(r.slice(5));isNaN(e)||0===e||(s=new D.Z({wkid:e}))}else s=Ie(r);else v=!0,s=new D.Z({wkid:3857});x=new z.Z(e,t,i,n),x.spatialReference=s}else v=!0,x=new z.Z({xmin:-.5,ymin:.5-r,xmax:n-.5,ymax:.5,spatialReference:new D.Z({wkid:3857})});const b=pe(e,"MRF_META/Rsets"),w=parseInt(b&&b.getAttribute("scale")||"2",10),I=x.spatialReference,_=new $.Z({origin:new Q.Z({x:x.xmin,y:x.ymax,spatialReference:I}),blockWidth:f,blockHeight:u,pyramidBlockWidth:f,pyramidBlockHeight:u,compression:o,pyramidScalingFactor:w}),C=new Q.Z({x:x.width/n,y:x.height/r,spatialReference:I}),S=new q.Z({width:n,height:r,extent:x,isPseudoSpatialReference:v,spatialReference:I,bandCount:s,pixelType:c,pixelSize:C,noDataValue:p,storageInfo:_}),T=me(e,"datafile"),R=me(e,"IndexFile");return{rasterInfo:S,files:{mrf:this.url,index:R||this.url.replace(".mrf",".idx"),data:T||this.url.replace(".mrf",Ae.get(o).blobExtension)}}}async _fetchAuxiliaryData(e){try{const{data:t}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:e?.signal});return Ce(t)}catch{return null}}};(0,n._)([(0,f.Cb)()],Ze.prototype,"_files",void 0),(0,n._)([(0,f.Cb)()],Ze.prototype,"_storageIndex",void 0),(0,n._)([(0,f.Cb)({type:String,json:{write:!0}})],Ze.prototype,"datasetFormat",void 0),Ze=(0,n._)([(0,y.j)("esri.layers.support.rasterIO.MRFRaster")],Ze);const Ne=Ze;var Le=i(58424),He=i(92217);const We=(e,t)=>{const i=e.get(t);return i&&i.values},Je=(e,t)=>{const i=e.get(t);return i&&i.values[0]};let je=class extends te{constructor(){super(...arguments),this._files=null,this._headerInfo=null,this._bufferSize=1048576,this.datasetFormat="TIFF"}async open(e){await this.init();const t=e?(0,o.Wg)(e.signal):null,{data:i}=await this.request(this.url,{range:{from:0,to:this._bufferSize},responseType:"array-buffer",signal:t});if(!i)throw new a.Z("tiffraster:open","failed to open url "+this.url);this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const{littleEndian:n,firstIFD:r,isBigTiff:s}=(0,Le.cK)(i),l=[];await this._readIFDs(l,i,n,r,0,s?8:4,t);const c=(0,Le.FI)(l),{width:h,height:f,tileWidth:u,tileHeight:d,planes:p,pixelType:m,compression:y,firstPyramidLevel:g,maximumPyramidLevel:x,pyramidBlockWidth:v,pyramidBlockHeight:b,tileBoundary:w,affine:I,metadata:_}=c;let C=Ie(c.extent.spatialReference?.wkt||c.extent.spatialReference?.wkid),S=!1;null==C&&(S=!0,C=new D.Z({wkid:3857}));const T=new z.Z({...c.extent,spatialReference:C}),R=new Q.Z(T?{x:T.xmin,y:T.ymax,spatialReference:C}:{x:0,y:0}),k=new $.Z({blockWidth:u,blockHeight:d,pyramidBlockWidth:v,pyramidBlockHeight:b,compression:y,origin:R,firstPyramidLevel:g,maximumPyramidLevel:x,blockBoundary:w}),P=new Q.Z({x:(T.xmax-T.xmin)/h,y:(T.ymax-T.ymin)/f,spatialReference:C}),M=_?{BandProperties:_.bandProperties,DataType:_.dataType}:{},O=new q.Z({width:h,height:f,bandCount:p,pixelType:m,compression:y,pixelSize:P,storageInfo:k,spatialReference:C,isPseudoSpatialReference:S,keyProperties:M,extent:T,statistics:_?_.statistics:null});if(I?.length&&(O.nativeExtent=new z.Z({xmin:-.5,ymin:.5-f,xmax:h-.5,ymax:.5,spatialReference:C}),O.transform=new be.Z({polynomialOrder:1,forwardCoefficients:[I[2]+I[0]/2,I[5]-I[3]/2,I[0],I[3],-I[1],-I[4]]}),O.extent=O.transform.forwardTransform(O.nativeExtent),O.pixelSize=new Q.Z({x:(T.xmax-T.xmin)/h,y:(T.ymax-T.ymin)/f,spatialReference:C}),k.origin.x=-.5,k.origin.y=.5),!this.ioConfig.skipExtensions?.includes("aux.xml")){const t=await this._fetchAuxiliaryData(e);if(null!=t){if(O.statistics=t.statistics??O.statistics,O.histograms=t.histograms,t.histograms&&(0,o.Wi)(O.statistics)&&(O.statistics=(0,he.Oh)(t.histograms)),t.transform&&!I){O.transform=t.transform,O.nativeExtent=O.extent;const e=O.transform.forwardTransform(O.nativeExtent);O.pixelSize=new Q.Z({x:(e.xmax-e.xmin)/h,y:(e.ymax-e.ymin)/f,spatialReference:C}),O.extent=e}O.spatialReference||(O.spatialReference=t.spatialReference)}}if(this._set("rasterInfo",O),this._headerInfo={littleEndian:n,isBigTiff:s,ifds:l,...c},!this._headerInfo.isSupported)throw new a.Z("tiffraster:open","this tiff is not supported: "+this._headerInfo.message);this.updateTileInfo()}async fetchRawTile(e,t,i){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};if(!this._headerInfo?.isSupported||this.isBlockOutside(e,t,i))return null;const r=this._getTileLocation(e,t,i);if(!r)return null;const{ranges:s,actualTileWidth:a,actualTileHeight:o,ifd:l}=r,c=s.map((e=>this.request(this.url,{range:e,responseType:"array-buffer",signal:n.signal}))),h=await Promise.all(c),f=h.map((e=>e.data.byteLength)).reduce(((e,t)=>e+t)),u=1===h.length?h[0].data:new ArrayBuffer(f),d=[0],p=[0];if(h.length>1){const e=new Uint8Array(u);for(let t=0,i=0;t<h.length;t++){const n=h[t].data;e.set(new Uint8Array(n),i),d[t]=i,i+=n.byteLength,p[t]=n.byteLength}}const{blockWidth:m,blockHeight:y}=this.getBlockWidthHeight(e),g=await this.decodePixelBlock(u,{format:"tiff",customOptions:{headerInfo:this._headerInfo,ifd:l,offsets:d,sizes:p},width:m,height:y,planes:null,pixelType:null});let x,v,b;if(a!==m||o!==y){let e=g.mask;if(e)for(x=0;x<y;x++)if(b=x*m,x<o)for(v=a;v<m;v++)e[b+v]=0;else for(v=0;v<m;v++)e[b+v]=0;else for(e=new Uint8Array(m*y),g.mask=e,x=0;x<o;x++)for(b=x*m,v=0;v<a;v++)e[b+v]=1}return g}async _readIFDs(e,t,i,n,r){let s=arguments.length>5&&void 0!==arguments[5]?arguments[5]:4,a=arguments.length>6?arguments[6]:void 0;if(!n)return null;(n>=t.byteLength||n<0)&&(t=(await this.request(this.url,{range:{from:n+r,to:n+r+this._bufferSize},responseType:"array-buffer",signal:a})).data,r=n+r,n=0);const o=await this._readIFD(t,i,n,r,He.Z.TIFF_TAGS,s,a);if(e.push(o.ifd),!o.nextIFD)return null;await this._readIFDs(e,t,i,o.nextIFD-r,r,s,a)}async _readIFD(e,t,i,n){let r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:He.Z.TIFF_TAGS,s=arguments.length>5&&void 0!==arguments[5]?arguments[5]:4,a=arguments.length>6?arguments[6]:void 0;if(!e)return null;const o=(0,Le.vr)(e,t,i,n,r,s);if(o.success){const i=[];if(o.ifd.forEach((e=>{e.values||i.push(e)})),i.length>0){const r=i.map((e=>e.offlineOffsetSize)),s=Math.min.apply(null,r.map((e=>e[0])));if(Math.min.apply(null,r.map((e=>e[0]+e[1])))-s<=this._bufferSize){const{data:r}=await this.request(this.url,{range:{from:s,to:s+this._bufferSize},responseType:"array-buffer",signal:a});e=r,n=s,i.forEach((i=>(0,Le.Dq)(e,t,i,n)))}}if(o.ifd.has("GEOKEYDIRECTORY")){const i=o.ifd.get("GEOKEYDIRECTORY"),r=i.values;if(r&&r.length>4){const s=r[0]+"."+r[1]+"."+r[2],o=await this._readIFD(e,t,i.valueOffset+6-n,n,He.Z.GEO_KEYS,2,a);i.data=o.ifd,i.data&&i.data.set("GEOTIFFVersion",{id:0,type:2,valueCount:1,valueOffset:null,values:[s]})}}return o}if(o.requiredBufferSize&&o.requiredBufferSize!==e.byteLength){const i=await this.request(this.url,{range:{from:n,to:n+o.requiredBufferSize+4},responseType:"array-buffer",signal:a});return(e=i.data).byteLength<o.requiredBufferSize?null:this._readIFD(e,t,0,n,He.Z.TIFF_TAGS,4,a)}}_getTileLocation(e,t,i){const{firstPyramidLevel:n,blockBoundary:r}=this.rasterInfo.storageInfo,s=0===e?0:e-(n-1),a=this._headerInfo.ifds[s];if(!a)return null;const o=(0,Le.If)(a,this._headerInfo),l=We(a,"TILEOFFSETS");if(void 0===l)return null;const c=We(a,"TILEBYTECOUNTS"),{minRow:h,minCol:f,maxRow:u,maxCol:d}=r[s];if(t>u||i>d||t<h||i<f)return null;const p=Je(a,"IMAGEWIDTH"),m=Je(a,"IMAGELENGTH"),y=Je(a,"TILEWIDTH"),g=Je(a,"TILELENGTH"),x=o?this.rasterInfo.bandCount:1,v=x*t*(d+1)+i,b=[{from:l[v],to:l[v+x-1]+c[v+x-1]-1}];if(o){let e=!0;for(let t=0;t<x;t++)if(l[v+t]+c[v+t]!==l[v+t+1]){e=!1;break}if(!e)for(let t=0;t<x;t++)b[t]={from:l[v+t],to:l[v+t]+c[v+t]-1}}const w=l[v],I=c[v];return null==w||null==I?null:{ranges:b,ifd:a,actualTileWidth:i===d?p%y:y,actualTileHeight:t===u?m%g:g}}async _fetchAuxiliaryData(e){try{const{data:t}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:e?.signal});return Ce(t)}catch{return null}}};(0,n._)([(0,f.Cb)()],je.prototype,"_files",void 0),(0,n._)([(0,f.Cb)()],je.prototype,"_headerInfo",void 0),(0,n._)([(0,f.Cb)()],je.prototype,"_bufferSize",void 0),(0,n._)([(0,f.Cb)({type:String,json:{write:!0}})],je.prototype,"datasetFormat",void 0),je=(0,n._)([(0,y.j)("esri.layers.support.rasterDatasets.TIFFRaster")],je);const qe=je,$e=new Map;$e.set("CRF",{desc:"Cloud Raster Format",constructor:ce}),$e.set("MRF",{desc:"Meta Raster Format",constructor:Ne}),$e.set("TIFF",{desc:"GeoTIFF",constructor:qe}),$e.set("RasterTileServer",{desc:"Raster Tile Server",constructor:Fe}),$e.set("JPG",{desc:"JPG Raster Format",constructor:Te}),$e.set("PNG",{desc:"PNG Raster Format",constructor:Te}),$e.set("GIF",{desc:"GIF Raster Format",constructor:Te}),$e.set("BMP",{desc:"BMP Raster Format",constructor:Te});var Ge=i(81085);let Ue=class extends((0,x.h)((0,H.M)((0,Z.q)((0,N.I)((0,v.N)(A((0,W.n)((0,L.Q)((0,l.R)(g.Z)))))))))){constructor(){super(...arguments),this.bandIds=null,this.interpolation=null,this.legendEnabled=!0,this.isReference=null,this.listMode="show",this.sourceJSON=null,this.version=null,this.title=null,this.type="imagery-tile",this.operationalLayerType="ArcGISTiledImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.fields=null}normalizeCtorArgs(e,t){return"string"==typeof e?{url:e,...t}:e}load(e){const t=(0,o.pC)(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},e).catch(c.r9).then((()=>this._openRaster(t)))),Promise.resolve(this)}get defaultPopupTemplate(){return this.createPopupTemplate()}get rasterFields(){let e=[new J.Z({name:"Raster.ServicePixelValue",alias:"Pixel Value",domain:null,editable:!1,length:50,type:"string"})];const t=this.rasterInfo?.attributeTable?.fields;if(t){const i=t.filter((e=>"oid"!==e.type&&"value"!==e.name.toLowerCase())).map((e=>{const t=e.clone();return t.name="Raster."+e.name,t}));e=e.concat(i)}const i=this.rasterInfo.dataType;if(("vector-magdir"===i||"vector-uv"===i)&&(0,o.pC)(this.rasterInfo.multidimensionalInfo)){const t=this.rasterInfo.multidimensionalInfo.variables[0].unit?.trim(),i="Magnitude"+(t?` (${t})`:"");e.push(new J.Z({name:"Raster.Magnitude",alias:i,domain:null,editable:!1,type:"double"})),e.push(new J.Z({name:"Raster.Direction",alias:"Direction (\xb0)",domain:null,editable:!1,type:"double"}))}return e}set renderer(e){this._set("renderer",e),this.updateRenderer()}readRenderer(e,t,i){const n=t&&t.layerDefinition&&t.layerDefinition.drawingInfo&&t.layerDefinition.drawingInfo.renderer,r=(0,s.ij)(n,i)||void 0;if(null!=r)return r}createPopupTemplate(e){return(0,Ge.eZ)({fields:this.rasterFields,title:this.title},e)}write(e,t){const{raster:i}=this;if(this.loaded?"RasterTileServer"===i.datasetFormat&&("Raster"===i.tileType||"Map"===i.tileType):this.url&&/\/ImageServer(\/|\/?$)/i.test(this.url))return super.write(e,t);if(t&&t.messages){const e=`${t.origin}/${t.layerContainerType||"operational-layers"}`;t.messages.push(new a.Z("layer:unsupported",`Layers (${this.title}, ${this.id}) of type '${this.declaredClass}' are not supported in the context of '${e}'`,{layer:this}))}return null}async _openRaster(e){this.raster?(this.raster.rasterInfo||await this.raster.open(),this.url=this.raster.url):this.raster=await class{static get supportedFormats(){const e=new Set;return $e.forEach(((t,i)=>e.add(i))),e}static async open(e){const{url:t,ioConfig:i,sourceJSON:n}=e;let r=e.datasetFormat;null==r&&t.lastIndexOf(".")&&(r=t.slice(t.lastIndexOf(".")+1).toUpperCase()),"OVR"===r||"TIF"===r?r="TIFF":"JPG"!==r&&"JPEG"!==r&&"JFIF"!==r||(r="JPG"),t.toLowerCase().includes("/imageserver")&&!t.toLowerCase().includes("/wcsserver")&&(r="RasterTileServer");const s={url:t,sourceJSON:n,datasetFormat:r,ioConfig:i||{bandIds:null,sampling:null}};let o,l;if(this.supportedFormats.has(r)){if("CRF"===r&&!i.enableCRF)throw new a.Z("rasterfactory:open",`cannot open raster: ${t}`);return o=$e.get(r).constructor,l=new o(s),await l.open({signal:e.signal}),l}if(r)throw new a.Z("rasterfactory:open","not a supported format "+r);const c=Array.from($e.keys());let h=0;const f=()=>(r=c[h++],r&&("CRF"!==r||i.enableCRF)?(o=$e.get(r).constructor,l=new o(s),l.open({signal:e.signal}).then((()=>l)).catch((()=>f()))):null);return f()}static register(e,t,i){$e.has(e.toUpperCase())||$e.set(e.toUpperCase(),{desc:t,constructor:i})}}.open({url:this.url,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:e});const{rasterInfo:t}=this.raster;if(!t)throw new a.Z("imagery-tile-layer:load","cannot load resources on "+this.url);if(this.sourceJSON=this.sourceJSON||this.raster.sourceJSON,null!=this.sourceJSON){const e="Map"===this.raster.tileType&&null!=this.sourceJSON.minLOD&&null!=this.sourceJSON.maxLOD?this.sourceJSON:{...this.sourceJSON,minScale:0,maxScale:0};this.read(e,{origin:"service"})}null==this.title&&(this.title=this.raster.datasetName),"Map"===this.raster.tileType&&(this.popupEnabled=!1),this._configDefaultSettings(),this.own((0,h.YP)((()=>this.customParameters),(e=>{this.raster.ioConfig.customFetchParameters=e})))}};(0,n._)([(0,f.Cb)({type:[d.z8],json:{write:{overridePolicy(){return{enabled:!this.loaded||"Raster"===this.raster.tileType||"0,1,2"!==this.bandIds?.join(",")}}}}})],Ue.prototype,"bandIds",void 0),(0,n._)([(0,f.Cb)({json:{write:{overridePolicy(){return{enabled:!this.loaded||"Raster"===this.raster.tileType||"bilinear"!==this.interpolation}}}}}),(0,p.J)(j.c)],Ue.prototype,"interpolation",void 0),(0,n._)([(0,f.Cb)({json:{write:!0}})],Ue.prototype,"multidimensionalDefinition",void 0),(0,n._)([(0,f.Cb)(S.rn)],Ue.prototype,"legendEnabled",void 0),(0,n._)([(0,f.Cb)({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],Ue.prototype,"isReference",void 0),(0,n._)([(0,f.Cb)({type:["show","hide"]})],Ue.prototype,"listMode",void 0),(0,n._)([(0,f.Cb)({json:{read:!0,write:!0}})],Ue.prototype,"blendMode",void 0),(0,n._)([(0,f.Cb)()],Ue.prototype,"sourceJSON",void 0),(0,n._)([(0,f.Cb)({readOnly:!0,json:{origins:{service:{read:{source:"currentVersion"}}}}})],Ue.prototype,"version",void 0),(0,n._)([(0,f.Cb)()],Ue.prototype,"title",void 0),(0,n._)([(0,f.Cb)({readOnly:!0,json:{read:!1}})],Ue.prototype,"type",void 0),(0,n._)([(0,f.Cb)({type:["ArcGISTiledImageServiceLayer"]})],Ue.prototype,"operationalLayerType",void 0),(0,n._)([(0,f.Cb)({type:Boolean,value:!0,json:{read:{source:"disablePopup",reader:(e,t)=>!t.disablePopup},write:{target:"disablePopup",overridePolicy(){return{enabled:!this.loaded||"Raster"===this.raster.tileType}},writer(e,t,i){t[i]=!e}}}})],Ue.prototype,"popupEnabled",void 0),(0,n._)([(0,f.Cb)({type:r.Z,json:{read:{source:"popupInfo"},write:{target:"popupInfo",overridePolicy(){return{enabled:!this.loaded||"Raster"===this.raster.tileType}}}}})],Ue.prototype,"popupTemplate",void 0),(0,n._)([(0,f.Cb)({readOnly:!0})],Ue.prototype,"defaultPopupTemplate",null),(0,n._)([(0,f.Cb)({readOnly:!0,type:[J.Z]})],Ue.prototype,"fields",void 0),(0,n._)([(0,f.Cb)({readOnly:!0,type:[J.Z]})],Ue.prototype,"rasterFields",null),(0,n._)([(0,f.Cb)({types:s.dr,json:{name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy(){const e="raster-stretch"===this.renderer?.type&&"none"===this.renderer.stretchType&&!this.renderer.useGamma;return{enabled:!this.loaded||"Raster"===this.raster.tileType||!e}}},origins:{"web-scene":{types:s.FK,name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:e=>({enabled:e&&"vector-field"!==e.type&&"flow"!==e.type})}}}}})],Ue.prototype,"renderer",null),(0,n._)([(0,m.r)("renderer")],Ue.prototype,"readRenderer",null),Ue=(0,n._)([(0,y.j)("esri.layers.ImageryTileLayer")],Ue);const Ve=Ue},23638:(e,t,i)=>{i.d(t,{y:()=>S});var n,r=i(27366),s=i(76200),a=i(85015),o=i(59896),l=i(10064),c=i(41691),h=i(32718),f=i(16054),u=i(27546),d=i(66978),p=i(94172),m=i(99346),y=i(35995),g=i(49861),x=i(63780),v=(i(93169),i(89125)),b=i(69912),w=i(84652);class I{constructor(){this.location={left:0,top:0,width:0,height:0},this._allAvailability="unknown",this.byteSize=40}getAvailability(e,t){if("unknown"!==this._allAvailability)return this._allAvailability;const i=(e-this.location.top)*this.location.width+(t-this.location.left),n=i%8,r=i>>3,s=this._tileAvailabilityBitSet;return r<0||r>s.length?"unknown":s[r]&1<<n?"available":"unavailable"}_updateFromData(e){const t=this.location.width,i=this.location.height;let n=!0,r=!0;const s=Math.ceil(t*i/8),a=new Uint8Array(s);let o=0;for(let l=0;l<e.length;l++){const t=l%8;e[l]?(r=!1,a[o]|=1<<t):n=!1,7===t&&++o}r?this._allAvailability="unavailable":n?this._allAvailability="available":(this._allAvailability="unknown",this._tileAvailabilityBitSet=a,this.byteSize+=a.length)}static fromDefinition(e,t){const i=e.service.request||s.default,{row:n,col:r,width:a,height:o}=e,c={query:{f:"json"}};return t=t?{...c,...t}:c,i(function(e){let t;if("vector-tile"===e.service.type)t=`${e.service.url}/tilemap/${e.level}/${e.row}/${e.col}/${e.width}/${e.height}`;else{const i=e.service.tileServers;t=`${i&&i.length?i[e.row%i.length]:e.service.url}/tilemap/${e.level}/${e.row}/${e.col}/${e.width}/${e.height}`}const i=e.service.query;return i&&(t=`${t}?${i}`),t}(e),t).then((e=>e.data)).catch((e=>{if(e&&e.details&&422===e.details.httpStatus)return{location:{top:n,left:r,width:a,height:o},valid:!0,data:(0,x.a9)(a*o,0)};throw e})).then((e=>{if(e.location&&(e.location.top!==n||e.location.left!==r||e.location.width!==a||e.location.height!==o))throw new l.Z("tilemap:location-mismatch","Tilemap response for different location than requested",{response:e,definition:{top:n,left:r,width:a,height:o}});return I.fromJSON(e)}))}static fromJSON(e){I._validateJSON(e);const t=new I;return t.location=Object.freeze((0,w.d9)(e.location)),t._updateFromData(e.data),Object.freeze(t)}static _validateJSON(e){if(!e||!e.location)throw new l.Z("tilemap:missing-location","Location missing from tilemap response");if(!1===e.valid)throw new l.Z("tilemap:invalid","Tilemap response was marked as invalid");if(!e.data)throw new l.Z("tilemap:missing-data","Data missing from tilemap response");if(!Array.isArray(e.data))throw new l.Z("tilemap:data-mismatch","Data must be an array of numbers");if(e.data.length!==e.location.width*e.location.height)throw new l.Z("tilemap:data-mismatch","Number of data items does not match width/height of tilemap")}}function _(e){return`${e.level}/${e.row}/${e.col}/${e.width}/${e.height}`}const C=h.Z.getLogger("esri.layers.support.TilemapCache");let S=n=class extends((0,c.p)(a.Z)){constructor(e){super(e),this._pendingTilemapRequests={},this._availableLevels={},this.levels=5,this.cacheByteSize=2*o.Y8.MEGABYTES,this.request=s.default,this._prefetchingEnabled=!0}initialize(){this._tilemapCache=new f.Z(this.cacheByteSize),this.own([(0,p.YP)((()=>{const{layer:e}=this;return[e?.parsedUrl,e?.tileServers,e?.apiKey,e?.customParameters]}),(()=>this._initializeTilemapDefinition())),(0,p.YP)((()=>this.layer?.tileInfo?.lods),(e=>this._initializeAvailableLevels(e)),p.tX)]),this._initializeTilemapDefinition()}castLevels(e){return e<=2?(C.error("Minimum levels for Tilemap is 3, but got ",e),3):e}get size(){return 1<<this.levels}fetchTilemap(e,t,i,n){if(!this._availableLevels[e])return Promise.reject(new l.Z("tilemap-cache:level-unavailable",`Level ${e} is unavailable in the service`));const r=this._tmpTilemapDefinition,s=this._tilemapFromCache(e,t,i,r);if(s)return Promise.resolve(s);const a=n&&n.signal;return n={...n,signal:null},new Promise(((e,t)=>{(0,d.fu)(a,(()=>t((0,d.zE)())));const i=_(r);let s=this._pendingTilemapRequests[i];if(!s){s=I.fromDefinition(r,n).then((e=>(this._tilemapCache.put(i,e,e.byteSize),e)));const e=()=>delete this._pendingTilemapRequests[i];this._pendingTilemapRequests[i]=s,s.then(e,e)}s.then(e,t)}))}getAvailability(e,t,i){if(!this._availableLevels[e])return"unavailable";const n=this._tilemapFromCache(e,t,i,this._tmpTilemapDefinition);return n?n.getAvailability(t,i):"unknown"}fetchAvailability(e,t,i,n){return this._availableLevels[e]?this.fetchTilemap(e,t,i,n).catch((e=>e)).then((n=>{if(n instanceof I){const r=n.getAvailability(t,i);if("unavailable"===r)throw new l.Z("tile-map:tile-unavailable","Tile is not available",{level:e,row:t,col:i});return r}if((0,d.D_)(n))throw n;return"unknown"})):Promise.reject(new l.Z("tilemap-cache:level-unavailable",`Level ${e} is unavailable in the service`))}fetchAvailabilityUpsample(e,t,i,n,r){n.level=e,n.row=t,n.col=i;const s=this.layer.tileInfo;s.updateTileInfo(n);const a=this.fetchAvailability(e,t,i,r).catch((e=>{if((0,d.D_)(e))throw e;if(s.upsampleTile(n))return this.fetchAvailabilityUpsample(n.level,n.row,n.col,n);throw e}));return this._fetchAvailabilityUpsamplePrefetch(n.id,e,t,i,r,a),a}async _fetchAvailabilityUpsamplePrefetch(e,t,i,r,s,a){if(!this._prefetchingEnabled)return;const o=`prefetch-${e}`;if(this.handles.has(o))return;const l=new AbortController;a.then((()=>l.abort()),(()=>l.abort()));let c=!1;const h={remove(){c||(c=!0,l.abort())}};if(this.handles.add(h,o),await(0,m.MU)(10,l.signal).catch((()=>{})),c||(c=!0,this.handles.remove(o)),(0,d.Hc)(l))return;const f={id:e,level:t,row:i,col:r},u={...s,signal:l.signal},p=this.layer.tileInfo;for(let d=0;n._prefetches.length<n._maxPrefetch&&p.upsampleTile(f);++d){const e=this.fetchAvailability(f.level,f.row,f.col,u);n._prefetches.push(e);const t=()=>{n._prefetches.removeUnordered(e)};e.then(t,t)}}_initializeTilemapDefinition(){if(!this.layer.parsedUrl)return;const{parsedUrl:e,apiKey:t,customParameters:i}=this.layer;this._tilemapCache.clear(),this._tmpTilemapDefinition={service:{url:e.path,query:(0,y.B7)({...e.query,...i,token:t??e.query?.token}),tileServers:this.layer.tileServers,request:this.request,type:this.layer.type},width:this.size,height:this.size,level:0,row:0,col:0}}_tilemapFromCache(e,t,i,n){n.level=e,n.row=t-t%this.size,n.col=i-i%this.size;const r=_(n);return this._tilemapCache.get(r)}_initializeAvailableLevels(e){this._availableLevels={},e&&e.forEach((e=>this._availableLevels[e.level]=!0))}get test(){const e=this;return{get prefetchingEnabled(){return e._prefetchingEnabled},set prefetchingEnabled(t){e._prefetchingEnabled=t},hasTilemap:(t,i,n)=>!!e._tilemapFromCache(t,i,n,e._tmpTilemapDefinition)}}};S._maxPrefetch=4,S._prefetches=new u.Z({initialSize:n._maxPrefetch}),(0,r._)([(0,g.Cb)({constructOnly:!0,type:Number})],S.prototype,"levels",void 0),(0,r._)([(0,v.p)("levels")],S.prototype,"castLevels",null),(0,r._)([(0,g.Cb)({readOnly:!0,type:Number})],S.prototype,"size",null),(0,r._)([(0,g.Cb)({constructOnly:!0,type:Number})],S.prototype,"cacheByteSize",void 0),(0,r._)([(0,g.Cb)({constructOnly:!0})],S.prototype,"layer",void 0),(0,r._)([(0,g.Cb)({constructOnly:!0})],S.prototype,"request",void 0),S=n=(0,r._)([(0,b.j)("esri.layers.support.TilemapCache")],S)},55635:(e,t,i)=>{i.d(t,{OE:()=>f,Gc:()=>p,Qg:()=>u,Rq:()=>l,gX:()=>d,z2:()=>c,ET:()=>h,Vx:()=>y});i(59486);var n=i(92026);var r=i(80394),s=i(7882);const a=new Map,o=new class{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:15e3,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:5e3;this._timer=null,this._cachedBlocks=new Map,this._size=-1,this._duration=e,this._interval=Math.min(e,t)}decreaseRefCount(e,t){const i=e+"/"+t,n=this._cachedBlocks;if(n.has(i)){const e=n.get(i);return e.refCount--,e.refCount<=0&&(n.delete(i),e.controller&&e.controller.abort()),e.refCount}return 0}getBlock(e,t){const i=e+"/"+t,n=this._cachedBlocks;if(n.has(i)){const e=n.get(i);return e.ts=Date.now(),e.refCount++,n.delete(i),n.set(i,e),e.block}return null}putBlock(e,t,i){let n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;const r=this._cachedBlocks,s=e+"/"+t;if(r.has(s)){const e=r.get(s);e.ts=Date.now(),e.refCount++}else r.set(s,{block:i,ts:Date.now(),refCount:1,controller:n});this._trim(),this._updateTimer()}deleteBlock(e,t){const i=this._cachedBlocks,n=e+"/"+t;i.has(n)&&i.delete(n)}updateMaxSize(e){this._size=e,this._trim()}empty(){this._cachedBlocks.clear(),this._clearTimer()}getCurrentSize(){return this._cachedBlocks.size}_updateTimer(){if(null!=this._timer)return;const e=this._cachedBlocks;this._timer=setInterval((()=>{const t=Array.from(e),i=Date.now();for(let n=0;n<t.length&&t[n][1].ts<=i-this._duration;n++)e.delete(t[n][0]);0===e.size&&this._clearTimer()}),this._interval)}_trim(){const e=this._cachedBlocks;if(-1===this._size||this._size>=e.size)return;const t=Array.from(e);for(let i=0;i<t.length-this._size;i++)e.delete(t[i][0])}_clearTimer(){null!=this._timer&&(clearInterval(this._timer),this._timer=null)}};function l(e,t){return null==t?e:`${e}?sliceId=${t}`}function c(e,t){const i={extent:null,rasterInfo:t,cache:new Map};if(a.has(e)){const t=a.get(e);return t.push(i),t.length-1}return a.set(e,[i]),0}function h(e,t){if(a.has(e)){const i=a.get(e);i[t]=null,i.some((e=>null!=e))||a.delete(e)}}function f(e,t,i){if(!a.has(e))return null==t?o.decreaseRefCount(e,i):0;const n=a.get(e);if(null==n[t])return o.decreaseRefCount(e,i);const r=n[t].cache;if(r.has(i)){const e=r.get(i);if(e.refCount--,0===e.refCount){r.delete(i);for(let e=0;e<n.length;e++)n[e]&&n[e].cache.has(i)&&n[e].cache.delete(i);e.controller&&e.controller.abort()}return e.refCount}return 0}function u(e,t,i){if(!a.has(e))return null==t?o.getBlock(e,i):null;const n=a.get(e);if(null==n[t]){for(let e=0;e<n.length;e++)if(n[e]&&n[e].cache.has(i)){const t=n[e].cache.get(i);return t.refCount++,t.block}return o.getBlock(e,i)}const r=n[t].cache;if(r.has(i)){const e=r.get(i);return e.refCount++,e.block}for(let s=0;s<n.length;s++)if(s!==t&&n[s]&&n[s]&&n[s].cache.has(i)){const e=n[s].cache.get(i);return e.refCount++,r.set(i,e),e.block}return null}function d(e,t,i,n){let r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null;if(!a.has(e))return void(null==t&&o.putBlock(e,i,n,r));const s=a.get(e);if(null==s[t])return void o.putBlock(e,i,n,r);const l={refCount:1,block:n,isResolved:!1,isRejected:!1,controller:r};n.then((()=>l.isResolved=!0)).catch((()=>l.isRejected=!0)),s[t].cache.set(i,l)}function p(e,t,i){if(!a.has(e))return void(null==t&&o.deleteBlock(e,i));const n=a.get(e);null!=n[t]?n[t].cache.delete(i):o.deleteBlock(e,i)}function m(e,t){if(!a.has(e))return null;const i=a.get(e);return null==i[t]?null:i[t]}function y(e,t,i,a,o,l){let c=arguments.length>6&&void 0!==arguments[6]?arguments[6]:null;const h=m(e,t),f=h.extent,{cache:u,rasterInfo:d}=h;if(f&&f.xmin===i.xmin&&f.xmax===i.xmax&&f.ymin===i.ymin&&f.ymax===i.ymax)return;const p=i.clone().normalize(),{spatialReference:y,transform:g}=d,x=new Set;for(let m=0;m<p.length;m++){const e=p[m];if(e.xmax-e.xmin<=a||e.ymax-e.ymin<=a)continue;let t=(0,r.tB)(e,y,c);(0,n.pC)(g)&&(t=g.inverseTransform(t));const i=new s.Z({x:a,y:a,spatialReference:e.spatialReference});if(null==o&&!(o=(0,r.VO)(i,y,e,c)))return;const{pyramidLevel:h,pyramidResolution:f,excessiveReading:u}=(0,r.kr)(o,d,l||"closest");if(u)return;const{storageInfo:v}=d,{origin:b}=v,w={x:Math.max(0,Math.floor((t.xmin-b.x)/f.x)),y:Math.max(0,Math.floor((b.y-t.ymax)/f.y))},I=Math.ceil((t.xmax-t.xmin)/f.x-.1),_=Math.ceil((t.ymax-t.ymin)/f.y-.1),C=h>0?v.pyramidBlockWidth:v.blockWidth,S=h>0?v.pyramidBlockHeight:v.blockHeight,T=1,R=Math.max(0,Math.floor(w.x/C)-T),k=Math.max(0,Math.floor(w.y/S)-T),P=Math.floor((w.x+I-1)/C)+T,M=Math.floor((w.y+_-1)/S)+T;for(let n=k;n<=M;n++)for(let e=R;e<=P;e++)x.add(`${h}/${n}/${e}`)}u.forEach(((e,t)=>{if(!x.has(t)){const e=u.get(t);(null==e||e.isResolved||e.isRejected)&&u.delete(t)}})),h.extent={xmin:i.xmin,ymin:i.ymin,xmax:i.xmax,ymax:i.ymax}}},32935:(e,t,i)=>{i.d(t,{Z:()=>l});var n=i(27366),r=i(46784),s=i(49861),a=(i(63780),i(93169),i(25243),i(69912));let o=class extends r.wq{get affectsPixelSize(){return!1}forwardTransform(e){return e}inverseTransform(e){return e}};(0,n._)([(0,s.Cb)()],o.prototype,"affectsPixelSize",null),(0,n._)([(0,s.Cb)({json:{write:!0}})],o.prototype,"spatialReference",void 0),o=(0,n._)([(0,a.j)("esri.layers.support.rasterTransforms.BaseRasterTransform")],o);const l=o},3089:(e,t,i)=>{i.d(t,{Z:()=>c});var n=i(27366),r=i(49861),s=(i(63780),i(93169),i(25243),i(27135)),a=i(69912),o=i(32935);let l=class extends o.Z{constructor(){super(...arguments),this.type="gcs-shift",this.tolerance=1e-8}forwardTransform(e){return"point"===(e=e.clone()).type?(e.x>180+this.tolerance&&(e.x-=360),e):(e.xmin>=180-this.tolerance?(e.xmax-=360,e.xmin-=360):e.xmax>180+this.tolerance&&(e.xmin=-180,e.xmax=180),e)}inverseTransform(e){return"point"===(e=e.clone()).type?(e.x<-this.tolerance&&(e.x+=360),e):(e.xmin<-this.tolerance&&(e.xmin+=360,e.xmax+=360),e)}};(0,n._)([(0,s.J)({GCSShiftXform:"gcs-shift"})],l.prototype,"type",void 0),(0,n._)([(0,r.Cb)()],l.prototype,"tolerance",void 0),l=(0,n._)([(0,a.j)("esri.layers.support.rasterTransforms.GCSShiftTransform")],l);const c=l},69405:(e,t,i)=>{i.d(t,{Z:()=>m});var n=i(27366),r=(i(59486),i(49861)),s=(i(63780),i(93169),i(25243),i(27135)),a=i(38511),o=i(69912),l=i(31201),c=i(32935),h=i(7882),f=i(53866);function u(e,t,i){const{x:n,y:r}=t;if(i<2)return{x:e[0]+n*e[2]+r*e[4],y:e[1]+n*e[3]+r*e[5]};if(2===i){const t=n*n,i=r*r,s=n*r;return{x:e[0]+n*e[2]+r*e[4]+t*e[6]+s*e[8]+i*e[10],y:e[1]+n*e[3]+r*e[5]+t*e[7]+s*e[9]+i*e[11]}}const s=n*n,a=r*r,o=n*r,l=s*n,c=s*r,h=n*a,f=r*a;return{x:e[0]+n*e[2]+r*e[4]+s*e[6]+o*e[8]+a*e[10]+l*e[12]+c*e[14]+h*e[16]+f*e[18],y:e[1]+n*e[3]+r*e[5]+s*e[7]+o*e[9]+a*e[11]+l*e[13]+c*e[15]+h*e[17]+f*e[19]}}function d(e,t,i){const{xmin:n,ymin:r,xmax:s,ymax:a,spatialReference:o}=t;let l=[];if(i<2)l.push({x:n,y:a}),l.push({x:s,y:a}),l.push({x:n,y:r}),l.push({x:s,y:r});else{let e=10;for(let t=0;t<e;t++)l.push({x:n,y:r+(a-r)*t/(e-1)}),l.push({x:s,y:r+(a-r)*t/(e-1)});e=8;for(let t=1;t<=e;t++)l.push({x:n+(s-n)*t/e,y:r}),l.push({x:n+(s-n)*t/e,y:a})}l=l.map((t=>u(e,t,i)));const c=l.map((e=>e.x)),h=l.map((e=>e.y));return new f.Z({xmin:Math.min.apply(null,c),xmax:Math.max.apply(null,c),ymin:Math.min.apply(null,h),ymax:Math.max.apply(null,h),spatialReference:o})}let p=class extends c.Z{constructor(){super(...arguments),this.polynomialOrder=1,this.type="polynomial"}readForwardCoefficients(e,t){const{coeffX:i,coeffY:n}=t;if(!i?.length||!n?.length||i.length!==n.length)return null;const r=[];for(let s=0;s<i.length;s++)r.push(i[s]),r.push(n[s]);return r}writeForwardCoefficients(e,t,i){const n=[],r=[];for(let s=0;s<e?.length;s++)s%2==0?n.push(e[s]):r.push(e[s]);t.coeffX=n,t.coeffY=r}get inverseCoefficients(){let e=this._get("inverseCoefficients");const t=this._get("forwardCoefficients");return!e&&t&&this.polynomialOrder<2&&(e=function(e){const[t,i,n,r,s,a]=e,o=n*a-s*r,l=s*r-n*a;return[(s*i-t*a)/o,(n*i-t*r)/l,a/o,r/l,-s/o,-n/l]}(t)),e}set inverseCoefficients(e){this._set("inverseCoefficients",e)}readInverseCoefficients(e,t){const{inverseCoeffX:i,inverseCoeffY:n}=t;if(!i?.length||!n?.length||i.length!==n.length)return null;const r=[];for(let s=0;s<i.length;s++)r.push(i[s]),r.push(n[s]);return r}writeInverseCoefficients(e,t,i){const n=[],r=[];for(let s=0;s<e?.length;s++)s%2==0?n.push(e[s]):r.push(e[s]);t.inverseCoeffX=n,t.inverseCoeffY=r}get affectsPixelSize(){return this.polynomialOrder>0}forwardTransform(e){if("point"===e.type){const t=u(this.forwardCoefficients,e,this.polynomialOrder);return new h.Z({x:t.x,y:t.y,spatialReference:e.spatialReference})}return d(this.forwardCoefficients,e,this.polynomialOrder)}inverseTransform(e){if("point"===e.type){const t=u(this.inverseCoefficients,e,this.polynomialOrder);return new h.Z({x:t.x,y:t.y,spatialReference:e.spatialReference})}return d(this.inverseCoefficients,e,this.polynomialOrder)}};(0,n._)([(0,r.Cb)({json:{write:!0}})],p.prototype,"polynomialOrder",void 0),(0,n._)([(0,r.Cb)()],p.prototype,"forwardCoefficients",void 0),(0,n._)([(0,a.r)("forwardCoefficients",["coeffX","coeffY"])],p.prototype,"readForwardCoefficients",null),(0,n._)([(0,l.c)("forwardCoefficients")],p.prototype,"writeForwardCoefficients",null),(0,n._)([(0,r.Cb)({json:{write:!0}})],p.prototype,"inverseCoefficients",null),(0,n._)([(0,a.r)("inverseCoefficients",["inverseCoeffX","inverseCoeffY"])],p.prototype,"readInverseCoefficients",null),(0,n._)([(0,l.c)("inverseCoefficients")],p.prototype,"writeInverseCoefficients",null),(0,n._)([(0,r.Cb)()],p.prototype,"affectsPixelSize",null),(0,n._)([(0,s.J)({PolynomialXform:"polynomial"})],p.prototype,"type",void 0),p=(0,n._)([(0,o.j)("esri.layers.support.rasterTransforms.PolynomialTransform")],p);const m=p},77960:(e,t,i)=>{i.d(t,{j:()=>d,c:()=>p});var n=i(3089),r=i(27366),s=(i(32718),i(25243),i(63780),i(93169),i(75366),i(27135)),a=i(69912),o=i(32935);let l=class extends o.Z{constructor(){super(...arguments),this.type="identity"}};(0,r._)([(0,s.J)({IdentityXform:"identity"})],l.prototype,"type",void 0),l=(0,r._)([(0,a.j)("esri.layers.support.rasterTransforms.IdentityTransform")],l);const c=l;var h=i(69405);const f={GCSShiftXform:n.Z,IdentityXform:c,PolynomialXform:h.Z},u=Object.keys(f);function d(e){const t=e?.type;return!e||u.includes(t)}function p(e){const t=e?.type;if(!t)return null;const i=f[e?.type];if(i){const t=new i;return t.read(e),t}return null}},71466:(e,t,i)=>{i.d(t,{d:()=>s,h:()=>r});var n=i(22824);const r={type:n.Z,json:{origins:{service:{read:{source:["tileInfo","minScale","maxScale","minLOD","maxLOD"],reader:s}}}}};function s(e,t,i,r){if(!e)return null;const{minScale:s,maxScale:a,minLOD:o,maxLOD:l}=t;if(null!=o&&null!=l)return r&&r.ignoreMinMaxLOD?n.Z.fromJSON(e):n.Z.fromJSON({...e,lods:e.lods.filter((e=>{let{level:t}=e;return null!=t&&t>=o&&t<=l}))});if(0!==s&&0!==a){const t=e=>Math.round(1e4*e)/1e4,i=s?t(s):1/0,r=a?t(a):-1/0;return n.Z.fromJSON({...e,lods:e.lods.filter((e=>{const n=t(e.scale);return n<=i&&n>=r}))})}return n.Z.fromJSON(e)}}}]);
//# sourceMappingURL=3060.12494563.chunk.js.map