{"version":3,"file":"static/js/9570.2a767ef6.chunk.js","mappings":"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","sources":["../node_modules/@esri/calcite-components/dist/esm/src/components/functional/Heading.tsx","../node_modules/@esri/calcite-components/dist/esm/src/components/block/resources.ts","../node_modules/@esri/calcite-components/dist/esm/src/components/block/block.tsx","../node_modules/@esri/calcite-components/dist/esm/src/components/block/block.scss?tag=calcite-block&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/esm/src/components/block-section/resources.ts","../node_modules/@esri/calcite-components/dist/esm/src/components/block-section/block-section.tsx","../node_modules/@esri/calcite-components/dist/esm/src/components/block-section/block-section.scss?tag=calcite-block-section&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/esm/src/utils/conditionalSlot.ts","../node_modules/@esri/calcite-components/dist/esm/src/utils/interactive.tsx","../node_modules/@esri/calcite-components/dist/esm/src/utils/loadable.ts","../node_modules/@esri/calcite-components/dist/esm/src/utils/openCloseComponent.ts","../node_modules/@esri/calcite-components/dist/esm/src/utils/t9n.ts"],"sourcesContent":["import { FunctionalComponent, h, VNode } from \"@stencil/core\";\nimport { JSXBase } from \"@stencil/core/internal\";\n\nexport type HeadingLevel = 1 | 2 | 3 | 4 | 5 | 6;\n\ninterface HeadingProps extends Pick<JSXBase.HTMLAttributes, \"class\" | \"key\"> {\n  level?: HeadingLevel;\n}\n\nexport function constrainHeadingLevel(level: number): HeadingLevel {\n  return Math.min(Math.max(Math.ceil(level), 1), 6) as HeadingLevel;\n}\n\nexport const Heading: FunctionalComponent<HeadingProps> = (props, children): VNode => {\n  const HeadingTag = props.level ? `h${props.level}` : \"div\";\n\n  delete props.level;\n\n  return (\n    <HeadingTag class={props.class} key={props.key}>\n      {children}\n    </HeadingTag>\n  );\n};\n","export const IDS = {\n  content: \"content\",\n  toggle: \"toggle\",\n  header: \"header\",\n};\n\nexport const CSS = {\n  actionsEnd: \"actions-end\",\n  button: \"button\",\n  container: \"container\",\n  content: \"content\",\n  contentStart: \"content-start\",\n  controlContainer: \"control-container\",\n  description: \"description\",\n  header: \"header\",\n  headerContainer: \"header-container\",\n  headerHasText: \"header--has-text\",\n  heading: \"heading\",\n  icon: \"icon\",\n  iconStart: \"icon--start\",\n  iconEnd: \"icon--end\",\n  iconEndContainer: \"icon-end-container\",\n  invalid: \"invalid\",\n  statusIcon: \"status-icon\",\n  summary: \"summary\",\n  title: \"title\",\n  toggle: \"toggle\",\n  toggleIcon: \"toggle-icon\",\n  valid: \"valid\",\n};\n\nexport const SLOTS = {\n  actionsEnd: \"actions-end\",\n  contentStart: \"content-start\",\n  control: \"control\",\n  headerMenuActions: \"header-menu-actions\",\n  icon: \"icon\",\n};\n\nexport const ICONS = {\n  opened: \"chevron-up\",\n  closed: \"chevron-down\",\n  valid: \"check-circle\",\n  invalid: \"exclamation-mark-triangle\",\n} as const;\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport {\n  ConditionalSlotComponent,\n  connectConditionalSlotComponent,\n  disconnectConditionalSlotComponent,\n} from \"../../utils/conditionalSlot\";\nimport {\n  focusFirstTabbable,\n  getSlotted,\n  toAriaBoolean,\n  slotChangeHasAssignedElement,\n} from \"../../utils/dom\";\nimport {\n  InteractiveComponent,\n  InteractiveContainer,\n  updateHostInteraction,\n} from \"../../utils/interactive\";\nimport { connectLocalized, disconnectLocalized, LocalizedComponent } from \"../../utils/locale\";\nimport {\n  connectMessages,\n  disconnectMessages,\n  setUpMessages,\n  T9nComponent,\n  updateMessages,\n} from \"../../utils/t9n\";\nimport { Heading, HeadingLevel } from \"../functional/Heading\";\nimport { Status, Position } from \"../interfaces\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport { onToggleOpenCloseComponent, OpenCloseComponent } from \"../../utils/openCloseComponent\";\nimport {\n  defaultEndMenuPlacement,\n  FlipPlacement,\n  LogicalPlacement,\n  OverlayPositioning,\n} from \"../../utils/floating-ui\";\nimport { FlipContext } from \"../interfaces\";\nimport { IconNameOrString } from \"../icon/interfaces\";\nimport { CSS, ICONS, IDS, SLOTS } from \"./resources\";\nimport { BlockMessages } from \"./assets/block/t9n\";\n\n/**\n * @slot - A slot for adding custom content.\n * @slot actions-end - A slot for adding actionable `calcite-action` elements after the content of the component. It is recommended to use two or fewer actions.\n * @slot icon - [Deprecated] A slot for adding a leading header icon with `calcite-icon`. Use `icon-start` instead.\n * @slot content-start - A slot for adding non-actionable elements before content of the component.\n * @slot control - [Deprecated] A slot for adding a single HTML input element in a header. Use `actions-end` instead.\n * @slot header-menu-actions - A slot for adding an overflow menu with `calcite-action`s inside a dropdown menu.\n */\n@Component({\n  tag: \"calcite-block\",\n  styleUrl: \"block.scss\",\n  shadow: true,\n  assetsDirs: [\"assets\"],\n})\nexport class Block\n  implements\n    ConditionalSlotComponent,\n    InteractiveComponent,\n    LocalizedComponent,\n    T9nComponent,\n    LoadableComponent,\n    OpenCloseComponent\n{\n  // --------------------------------------------------------------------------\n  //\n  //  Public Properties\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * When `true`, the component is collapsible.\n   */\n  @Prop({ reflect: true }) collapsible = false;\n\n  /**\n   * When `true`, interaction is prevented and the component is displayed with lower opacity.\n   */\n  @Prop({ reflect: true }) disabled = false;\n\n  /**\n   * When `true`, displays a drag handle in the header.\n   */\n  @Prop({ reflect: true }) dragHandle = false;\n\n  /**\n   * The component header text.\n   */\n  @Prop() heading!: string;\n\n  /**\n   * Specifies the heading level of the component's `heading` for proper document structure, without affecting visual styling.\n   */\n  @Prop({ reflect: true }) headingLevel: HeadingLevel;\n\n  /** Specifies an icon to display at the end of the component. */\n  @Prop({ reflect: true }) iconEnd: IconNameOrString;\n\n  /** Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`\"rtl\"`). */\n  @Prop({ reflect: true }) iconFlipRtl: FlipContext;\n\n  /** Specifies an icon to display at the start of the component. */\n  @Prop({ reflect: true }) iconStart: IconNameOrString;\n\n  /**\n   * When `true`, a busy indicator is displayed.\n   */\n  @Prop({ reflect: true }) loading = false;\n\n  /**\n   * Specifies the component's fallback menu `placement` when it's initial or specified `placement` has insufficient space available.\n   */\n  @Prop() menuFlipPlacements: FlipPlacement[];\n\n  /**\n   * Determines where the action menu will be positioned.\n   */\n  @Prop({ reflect: true }) menuPlacement: LogicalPlacement = defaultEndMenuPlacement;\n\n  /**\n   * When `true`, expands the component and its contents.\n   */\n  @Prop({ reflect: true, mutable: true }) open = false;\n\n  @Watch(\"open\")\n  openHandler(): void {\n    onToggleOpenCloseComponent(this);\n  }\n\n  /**\n   * Displays a status-related indicator icon.\n   *\n   * @deprecated Use `icon-start` instead.\n   */\n  @Prop({ reflect: true }) status: Status;\n\n  /**\n   * A description for the component, which displays below the heading.\n   */\n  @Prop() description: string;\n\n  /**\n   * Made into a prop for testing purposes only\n   *\n   * @internal\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messages: BlockMessages;\n\n  /**\n   * Use this property to override individual strings used by the component.\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messageOverrides: Partial<BlockMessages>;\n\n  @Watch(\"messageOverrides\")\n  onMessagesChange(): void {\n    /* wired up by t9n util */\n  }\n\n  /**\n   * Determines the type of positioning to use for the overlaid content.\n   *\n   * Using `\"absolute\"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout.\n   *\n   * `\"fixed\"` should be used to escape an overflowing parent container, or when the reference element's `position` CSS property is `\"fixed\"`.\n   *\n   */\n  @Prop({ reflect: true }) overlayPositioning: OverlayPositioning = \"absolute\";\n\n  //--------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Sets focus on the component's first tabbable element.\n   *\n   */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n    focusFirstTabbable(this.el);\n  }\n\n  onBeforeOpen(): void {\n    this.calciteBlockBeforeOpen.emit();\n  }\n\n  onOpen(): void {\n    this.calciteBlockOpen.emit();\n  }\n\n  onBeforeClose(): void {\n    this.calciteBlockBeforeClose.emit();\n  }\n\n  onClose(): void {\n    this.calciteBlockClose.emit();\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteBlockElement;\n\n  @State() defaultMessages: BlockMessages;\n\n  @State() effectiveLocale: string;\n\n  @Watch(\"effectiveLocale\")\n  effectiveLocaleChange(): void {\n    updateMessages(this, this.effectiveLocale);\n  }\n\n  @State() hasContentStart = false;\n\n  @State() hasEndActions = false;\n\n  openTransitionProp = \"margin-top\";\n\n  transitionEl: HTMLElement;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  // --------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    connectConditionalSlotComponent(this);\n    connectLocalized(this);\n    connectMessages(this);\n\n    this.transitionEl = this.el;\n  }\n\n  disconnectedCallback(): void {\n    disconnectLocalized(this);\n    disconnectMessages(this);\n    disconnectConditionalSlotComponent(this);\n  }\n\n  async componentWillLoad(): Promise<void> {\n    await setUpMessages(this);\n    setUpLoadableComponent(this);\n\n    if (this.open) {\n      onToggleOpenCloseComponent(this);\n    }\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n  }\n\n  componentDidRender(): void {\n    updateHostInteraction(this);\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  // --------------------------------------------------------------------------\n\n  /** Fires when the component is requested to be closed and before the closing transition begins. */\n  @Event({ cancelable: false }) calciteBlockBeforeClose: EventEmitter<void>;\n\n  /** Fires when the component is added to the DOM but not rendered, and before the opening transition begins. */\n  @Event({ cancelable: false }) calciteBlockBeforeOpen: EventEmitter<void>;\n\n  /** Fires when the component is closed and animation is complete. */\n  @Event({ cancelable: false }) calciteBlockClose: EventEmitter<void>;\n\n  /** Fires when the component is open and animation is complete. */\n  @Event({ cancelable: false }) calciteBlockOpen: EventEmitter<void>;\n\n  /**\n   * Fires when the component's header is clicked.\n   *\n   * @deprecated Use `openClose` events such as `calciteBlockOpen`, `calciteBlockClose`, `calciteBlockBeforeOpen`, and `calciteBlockBeforeClose` instead.\n   */\n  @Event({ cancelable: false }) calciteBlockToggle: EventEmitter<void>;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  // --------------------------------------------------------------------------\n\n  onHeaderClick = (): void => {\n    this.open = !this.open;\n    this.calciteBlockToggle.emit();\n  };\n\n  private actionsEndSlotChangeHandler = (event: Event): void => {\n    this.hasEndActions = slotChangeHasAssignedElement(event);\n  };\n\n  private handleContentStartSlotChange = (event: Event): void => {\n    this.hasContentStart = slotChangeHasAssignedElement(event);\n  };\n\n  // --------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  // --------------------------------------------------------------------------\n\n  renderScrim(): VNode[] {\n    const { loading } = this;\n    const defaultSlot = <slot />;\n\n    return [loading ? <calcite-scrim loading={loading} /> : null, defaultSlot];\n  }\n\n  private renderLoaderStatusIcon(): VNode[] {\n    const { loading, messages, status } = this;\n\n    const hasSlottedIcon = !!getSlotted(this.el, SLOTS.icon);\n\n    return loading ? (\n      <div class={CSS.icon} key=\"loader\">\n        <calcite-loader inline label={messages.loading} />\n      </div>\n    ) : status ? (\n      <div class={CSS.icon} key=\"status-icon\">\n        <calcite-icon\n          class={{\n            [CSS.statusIcon]: true,\n            [CSS.valid]: status == \"valid\",\n            [CSS.invalid]: status == \"invalid\",\n          }}\n          icon={ICONS[status]}\n          scale=\"s\"\n        />\n      </div>\n    ) : hasSlottedIcon ? (\n      <div class={CSS.icon} key=\"icon-slot\">\n        <slot key=\"icon-slot\" name={SLOTS.icon} />\n      </div>\n    ) : null;\n  }\n\n  private renderActionsEnd(): VNode {\n    return (\n      <div class={CSS.actionsEnd}>\n        <slot name={SLOTS.actionsEnd} onSlotchange={this.actionsEndSlotChangeHandler} />\n      </div>\n    );\n  }\n\n  private renderContentStart(): VNode {\n    const { hasContentStart } = this;\n    return (\n      <div class={CSS.contentStart} hidden={!hasContentStart}>\n        <slot name={SLOTS.contentStart} onSlotchange={this.handleContentStartSlotChange} />\n      </div>\n    );\n  }\n\n  renderTitle(): VNode {\n    const { heading, headingLevel, description } = this;\n    return heading || description ? (\n      <div class={CSS.title}>\n        <Heading class={CSS.heading} level={headingLevel}>\n          {heading}\n        </Heading>\n        {description ? <div class={CSS.description}>{description}</div> : null}\n      </div>\n    ) : null;\n  }\n\n  private renderIcon(position: Extract<\"start\" | \"end\", Position>): VNode {\n    const { iconFlipRtl } = this;\n\n    const flipRtl =\n      iconFlipRtl === \"both\" || position === \"start\"\n        ? iconFlipRtl === \"start\"\n        : iconFlipRtl === \"end\";\n\n    const iconValue = position === \"start\" ? this.iconStart : this.iconEnd;\n    const iconClass = position === \"start\" ? CSS.iconStart : CSS.iconEnd;\n\n    if (!iconValue) {\n      return undefined;\n    }\n\n    /** Icon scale is not variable as the component does not have a scale property */\n    return (\n      <calcite-icon\n        class={iconClass}\n        flipRtl={flipRtl}\n        icon={iconValue}\n        key={iconValue}\n        scale=\"s\"\n      />\n    );\n  }\n\n  render(): VNode {\n    const {\n      collapsible,\n      el,\n      loading,\n      open,\n      heading,\n      messages,\n      description,\n      menuFlipPlacements,\n      menuPlacement,\n    } = this;\n\n    const toggleLabel = open ? messages.collapse : messages.expand;\n\n    const headerContent = (\n      <header\n        class={{ [CSS.header]: true, [CSS.headerHasText]: !!(heading || description) }}\n        id={IDS.header}\n      >\n        {this.renderIcon(\"start\")}\n        {this.renderContentStart()}\n        {this.renderLoaderStatusIcon()}\n        {this.renderTitle()}\n      </header>\n    );\n\n    const hasControl = !!getSlotted(el, SLOTS.control);\n    const hasMenuActions = !!getSlotted(el, SLOTS.headerMenuActions);\n    const collapseIcon = open ? ICONS.opened : ICONS.closed;\n\n    const headerNode = (\n      <div class={CSS.headerContainer}>\n        {this.dragHandle ? <calcite-handle label={heading} /> : null}\n        {collapsible ? (\n          <button\n            aria-controls={IDS.content}\n            aria-describedby={IDS.header}\n            aria-expanded={collapsible ? toAriaBoolean(open) : null}\n            class={CSS.toggle}\n            id={IDS.toggle}\n            onClick={this.onHeaderClick}\n            title={toggleLabel}\n          >\n            {headerContent}\n            <div class={CSS.iconEndContainer}>\n              {this.renderIcon(\"end\")}\n              <calcite-icon class={CSS.toggleIcon} icon={collapseIcon} scale=\"s\" />\n            </div>\n          </button>\n        ) : this.iconEnd ? (\n          <div>\n            {headerContent}\n            <div class={CSS.iconEndContainer}>{this.renderIcon(\"end\")}</div>\n          </div>\n        ) : (\n          headerContent\n        )}\n        {hasControl ? (\n          <div aria-labelledby={IDS.header} class={CSS.controlContainer}>\n            <slot name={SLOTS.control} />\n          </div>\n        ) : null}\n        {hasMenuActions ? (\n          <calcite-action-menu\n            flipPlacements={menuFlipPlacements ?? [\"top\", \"bottom\"]}\n            label={messages.options}\n            overlayPositioning={this.overlayPositioning}\n            placement={menuPlacement}\n          >\n            <slot name={SLOTS.headerMenuActions} />\n          </calcite-action-menu>\n        ) : null}\n        {this.renderActionsEnd()}\n      </div>\n    );\n\n    return (\n      <Host>\n        <InteractiveContainer disabled={this.disabled}>\n          <article\n            aria-busy={toAriaBoolean(loading)}\n            class={{\n              [CSS.container]: true,\n            }}\n          >\n            {headerNode}\n            <section\n              aria-labelledby={IDS.toggle}\n              class={CSS.content}\n              hidden={!open}\n              id={IDS.content}\n            >\n              {this.renderScrim()}\n            </section>\n          </article>\n        </InteractiveContainer>\n      </Host>\n    );\n  }\n}\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-block-padding: Specifies the padding of the block `default` slot.\n */\n\n:host {\n  @extend %component-host;\n  @extend %component-spacing;\n  @apply transition-margin ease-cubic border-color-3 flex flex-shrink-0 flex-grow-0\n    flex-col border-0 border-b border-solid p-0;\n  flex-basis: auto;\n  transition-duration: var(--calcite-animation-timing);\n}\n\n@include disabled();\n\n@import \"../../assets/styles/animation\";\n@import \"../../assets/styles/header\";\n\n.header {\n  @apply justify-start;\n}\n\n.header--has-text {\n  padding: var(--calcite-spacing-md);\n}\n\n.header,\n.toggle {\n  grid-area: header;\n}\n\n.header-container {\n  @apply grid items-stretch;\n  grid-template: auto / auto 1fr auto auto;\n  grid-template-areas: \"handle header control menu actions-end\";\n  grid-column: header-start / actions-end;\n  grid-row: 1 / 2;\n}\n\n.content-start,\n.icon,\n.icon--start,\n.icon--end {\n  margin-inline-end: var(--calcite-spacing-md);\n}\n\n.icon {\n  & calcite-loader {\n    margin-inline-end: var(--calcite-spacing-xxxs);\n  }\n}\n\n.icon--start,\n.icon--end {\n  @apply text-color-3;\n}\n\n.actions-end {\n  grid-area: actions-end;\n}\n\n.toggle {\n  @apply font-sans\n    focus-base\n    m-0\n    flex\n    cursor-pointer\n    flex-nowrap\n    items-center\n    justify-between\n    border-none\n    p-0;\n\n  text-align: initial;\n  background-color: transparent;\n\n  &:hover {\n    @apply bg-foreground-2;\n  }\n  &:focus {\n    @apply focus-inset;\n  }\n}\n\ncalcite-loader[inline] {\n  grid-area: control;\n  @apply self-center;\n}\n\ncalcite-handle {\n  grid-area: handle;\n}\n\n.title {\n  @apply m-0;\n}\n\n.header .title .heading {\n  @apply text-n1\n    text-color-2\n    word-break\n    transition-color\n    p-0\n    font-medium\n    leading-tight\n    duration-150\n    ease-in-out;\n}\n\n.description {\n  @apply text-n2-wrap\n    text-color-3\n    word-break\n    mt-0.5\n    p-0;\n}\n\n.icon {\n  @apply flex;\n}\n\n.status-icon.valid {\n  color: theme(\"colors.success\");\n}\n\n.status-icon.invalid {\n  color: theme(\"colors.danger\");\n}\n\n@keyframes spin {\n  0% {\n    transform: rotate(0deg);\n  }\n  50% {\n    transform: rotate(180deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n\n.icon-end-container {\n  @apply flex items-center;\n\n  margin-inline-start: auto;\n}\n\n.toggle-icon {\n  @apply text-color-3\n  transition-color\n  self-center\n  justify-self-end\n  duration-150\n  ease-in-out;\n\n  margin-inline-end: var(--calcite-spacing-md);\n}\n\n.toggle:hover .toggle-icon {\n  @apply text-color-1;\n}\n\n.container {\n  @apply flex flex-col h-full relative;\n}\n\n.content {\n  @apply animate-in flex-1 relative min-h-0;\n  padding-block: var(--calcite-block-padding, var(--calcite-spacing-sm));\n  padding-inline: var(--calcite-block-padding, var(--calcite-spacing-md));\n}\n\n.content-start {\n  @apply text-color-3 flex items-center;\n}\n\n.control-container {\n  @apply m-0 flex;\n  grid-area: control;\n}\n\ncalcite-action-menu {\n  grid-area: menu;\n}\n\n.actions-end {\n  @apply flex items-stretch;\n}\n\n:host([open]) {\n  @apply my-2;\n\n  .header .title .heading {\n    @apply text-color-1;\n  }\n}\n\n@include base-component();\n","export const IDS = {\n  content: \"content\",\n  toggle: \"toggle\",\n};\n\nexport const CSS = {\n  chevronIcon: \"chevron-icon\",\n  content: \"content\",\n  iconStart: \"icon--start\",\n  iconEnd: \"icon--end\",\n  invalid: \"invalid\",\n  sectionHeader: \"section-header\",\n  sectionHeaderText: \"section-header__text\",\n  statusIcon: \"status-icon\",\n  switch: \"switch\",\n  toggle: \"toggle\",\n  toggleSwitch: \"toggle--switch\",\n  toggleContainer: \"toggle-container\",\n  toggleSwitchContent: \"toggle--switch__content\",\n  toggleSwitchText: \"toggle--switch__text\",\n  valid: \"valid\",\n};\n\nexport const ICONS = {\n  menuOpen: \"chevron-up\",\n  menuClosed: \"chevron-down\",\n  valid: \"check-circle\",\n  invalid: \"exclamation-mark-triangle\",\n} as const;\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport { focusFirstTabbable, toAriaBoolean } from \"../../utils/dom\";\nimport { isActivationKey } from \"../../utils/key\";\nimport { connectLocalized, disconnectLocalized, LocalizedComponent } from \"../../utils/locale\";\nimport {\n  connectMessages,\n  disconnectMessages,\n  setUpMessages,\n  T9nComponent,\n  updateMessages,\n} from \"../../utils/t9n\";\nimport { FlipContext, Status } from \"../interfaces\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport { IconNameOrString } from \"../icon/interfaces\";\nimport { BlockSectionMessages } from \"./assets/block-section/t9n\";\nimport { BlockSectionToggleDisplay } from \"./interfaces\";\nimport { CSS, ICONS, IDS } from \"./resources\";\n\n/**\n * @slot - A slot for adding custom content.\n */\n@Component({\n  tag: \"calcite-block-section\",\n  styleUrl: \"block-section.scss\",\n  shadow: true,\n  assetsDirs: [\"assets\"],\n})\nexport class BlockSection implements LocalizedComponent, T9nComponent, LoadableComponent {\n  // --------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  // --------------------------------------------------------------------------\n\n  /** Specifies an icon to display at the end of the component. */\n  @Prop({ reflect: true }) iconEnd: IconNameOrString;\n\n  /** Displays the `iconStart` and/or `iconEnd` as flipped when the element direction is right-to-left (`\"rtl\"`). */\n  @Prop({ reflect: true }) iconFlipRtl: FlipContext;\n\n  /** Specifies an icon to display at the start of the component. */\n  @Prop({ reflect: true }) iconStart: IconNameOrString;\n\n  /**\n   * When `true`, expands the component and its contents.\n   */\n  @Prop({ reflect: true, mutable: true }) open = false;\n\n  /**\n   * Displays a status-related indicator icon.\n   *\n   * @deprecated Use `icon-start` instead.\n   */\n  @Prop({ reflect: true }) status: Status;\n\n  /**\n   * The component header text.\n   */\n  @Prop() text: string;\n\n  /**\n   * Specifies how the component's toggle is displayed, where:\n   *\n   * `\"button\"` sets the toggle to a selectable header, and\n   *\n   * `\"switch\"` sets the toggle to a switch.\n   */\n  @Prop({ reflect: true }) toggleDisplay: BlockSectionToggleDisplay = \"button\";\n\n  /**\n   * Made into a prop for testing purposes only\n   *\n   * @internal\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messages: BlockSectionMessages;\n\n  /**\n   * Use this property to override individual strings used by the component.\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messageOverrides: Partial<BlockSectionMessages>;\n\n  @Watch(\"messageOverrides\")\n  onMessagesChange(): void {\n    /* wired up by t9n util */\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Sets focus on the component's first tabbable element.\n   *\n   */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n    focusFirstTabbable(this.el);\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteBlockSectionElement;\n\n  @State() effectiveLocale: string;\n\n  @Watch(\"effectiveLocale\")\n  effectiveLocaleChange(): void {\n    updateMessages(this, this.effectiveLocale);\n  }\n\n  @State() defaultMessages: BlockSectionMessages;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * Fires when the header has been clicked.\n   */\n  @Event({ cancelable: false }) calciteBlockSectionToggle: EventEmitter<void>;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  // --------------------------------------------------------------------------\n\n  handleHeaderKeyDown = (event: KeyboardEvent): void => {\n    if (isActivationKey(event.key)) {\n      this.toggleSection();\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  };\n\n  toggleSection = (): void => {\n    this.open = !this.open;\n    this.calciteBlockSectionToggle.emit();\n  };\n\n  // --------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  // --------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    connectLocalized(this);\n    connectMessages(this);\n  }\n\n  async componentWillLoad(): Promise<void> {\n    await setUpMessages(this);\n    setUpLoadableComponent(this);\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n  }\n\n  disconnectedCallback(): void {\n    disconnectLocalized(this);\n    disconnectMessages(this);\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  // --------------------------------------------------------------------------\n  renderStatusIcon(): VNode[] {\n    const { status } = this;\n    const statusIcon = ICONS[status] ?? false;\n    const statusIconClasses = {\n      [CSS.statusIcon]: true,\n      [CSS.valid]: status == \"valid\",\n      [CSS.invalid]: status == \"invalid\",\n    };\n\n    return statusIcon ? (\n      <calcite-icon class={statusIconClasses} icon={statusIcon} scale=\"s\" />\n    ) : null;\n  }\n\n  renderIcon(icon: string): VNode {\n    const { iconFlipRtl } = this;\n\n    if (icon === undefined) {\n      return null;\n    }\n\n    const flipRtlStart = iconFlipRtl === \"both\" || iconFlipRtl === \"start\";\n    const flipRtlEnd = iconFlipRtl === \"both\" || iconFlipRtl === \"end\";\n\n    const isIconStart = icon === this.iconStart;\n\n    /** Icon scale is not variable as the component does not have a scale property */\n    return (\n      <calcite-icon\n        class={isIconStart ? CSS.iconStart : CSS.iconEnd}\n        flipRtl={isIconStart ? flipRtlStart : flipRtlEnd}\n        icon={isIconStart ? this.iconStart : this.iconEnd}\n        key={isIconStart ? this.iconStart : this.iconEnd}\n        scale=\"s\"\n      />\n    );\n  }\n\n  render(): VNode {\n    const { messages, open, text, toggleDisplay } = this;\n    const arrowIcon = open ? ICONS.menuOpen : ICONS.menuClosed;\n\n    const toggleLabel = open ? messages.collapse : messages.expand;\n\n    const headerNode =\n      toggleDisplay === \"switch\" ? (\n        <div\n          class={{\n            [CSS.toggleContainer]: true,\n          }}\n        >\n          <div\n            aria-controls={IDS.content}\n            aria-expanded={toAriaBoolean(open)}\n            class={{\n              [CSS.toggle]: true,\n              [CSS.toggleSwitch]: true,\n            }}\n            id={IDS.toggle}\n            onClick={this.toggleSection}\n            onKeyDown={this.handleHeaderKeyDown}\n            role=\"button\"\n            tabIndex={0}\n            title={toggleLabel}\n          >\n            {this.renderIcon(this.iconStart)}\n            <div class={CSS.toggleSwitchContent}>\n              <span class={CSS.toggleSwitchText}>{text}</span>\n            </div>\n\n            {this.renderIcon(this.iconEnd)}\n            {this.renderStatusIcon()}\n            <calcite-switch checked={open} class={CSS.switch} inert label={toggleLabel} scale=\"s\" />\n          </div>\n        </div>\n      ) : (\n        <div\n          class={{\n            [CSS.toggleContainer]: true,\n          }}\n        >\n          <button\n            aria-controls={IDS.content}\n            aria-expanded={toAriaBoolean(open)}\n            class={{\n              [CSS.sectionHeader]: true,\n              [CSS.toggle]: true,\n            }}\n            id={IDS.toggle}\n            onClick={this.toggleSection}\n          >\n            {this.renderIcon(this.iconStart)}\n            <span class={CSS.sectionHeaderText}>{text}</span>\n            {this.renderIcon(this.iconEnd)}\n            {this.renderStatusIcon()}\n            <calcite-icon class={CSS.chevronIcon} icon={arrowIcon} scale=\"s\" />\n          </button>\n        </div>\n      );\n\n    return (\n      <Host>\n        {headerNode}\n        <section aria-labelledby={IDS.toggle} class={CSS.content} hidden={!open} id={IDS.content}>\n          <slot />\n        </section>\n      </Host>\n    );\n  }\n}\n",":host {\n  @apply bg-foreground-1 text-n1 box-border block;\n\n  color: var(--calcite-color-text-2);\n}\n\n:host([open]) {\n  @apply border-b-color-3\n    border-0\n    border-b\n    border-solid;\n\n  .toggle {\n    color: var(--calcite-color-text-1);\n\n    &:hover {\n      color: var(--calcite-color-text-1);\n    }\n  }\n\n  .chevron-icon {\n    color: var(--calcite-color-text-3);\n\n    &:hover {\n      color: var(--calcite-color-text-1);\n    }\n  }\n}\n\n:host(:last-child) {\n  @apply border-b-0;\n}\n\n.toggle {\n  @apply font-sans w-full border-0 bg-transparent;\n\n  gap: var(--calcite-spacing-md);\n  color: var(--calcite-color-text-2);\n  font-weight: var(--calcite-font-weight-normal);\n\n  &:hover {\n    color: var(--calcite-color-text-1);\n  }\n}\n\n.toggle--switch,\n.section-header {\n  @apply text-n1\n    focus-base\n    mx-0\n    my-1\n    flex\n    cursor-pointer\n    select-none\n    items-center\n    px-0\n    py-2;\n\n  &:focus {\n    @apply focus-outset;\n  }\n  &:hover {\n    color: var(--calcite-color-text-1);\n  }\n}\n\n.section-header__text {\n  @apply my-0\n    flex-auto;\n\n  text-align: initial;\n  word-wrap: anywhere;\n}\n\n.toggle-container {\n  @apply flex items-center relative bg-transparent;\n  word-break: break-word;\n\n  .toggle--switch__content {\n    @apply flex flex-auto items-center;\n  }\n\n  .icon--end,\n  .icon--start,\n  .chevron-icon {\n    @apply flex items-center;\n\n    color: var(--calcite-color-text-3);\n\n    &:hover {\n      color: var(--calcite-color-text-1);\n    }\n  }\n}\n\n.status-icon {\n  @apply flex items-center;\n}\n\n.status-icon.valid {\n  color: theme(\"colors.success\");\n}\n\n.status-icon.invalid {\n  color: theme(\"colors.danger\");\n}\n\n@include base-component();\n","import { forceUpdate } from \"@stencil/core\";\nimport { createObserver, ExtendedMutationObserver } from \"./observers\";\n\n/**\n * Defines interface for components with a dynamically changing slot.\n *\n * @deprecated Use `onSlotchange` event with `slotChangeHasAssignedElement` DOM utility instead.\n *\n * ```\n * <slot onSlotchange={(event) => this.mySlotHasElement = slotChangeHasAssignedElement(event)} />}\n * ```\n */\nexport interface ConditionalSlotComponent {\n  /**\n   * The host element.\n   */\n  readonly el: HTMLElement;\n}\n\nlet mutationObserver: ExtendedMutationObserver;\nconst observerOptions: Pick<Parameters<MutationObserver[\"observe\"]>[1], \"childList\"> = { childList: true };\n\n/**\n * Helper to set up a conditional slot component on connectedCallback.\n *\n * @param component\n * @deprecated Use `onSlotchange` event with `slotChangeHasAssignedElement` DOM utility instead.\n *\n * ```\n * <slot onSlotchange={(event) => this.mySlotHasElement = slotChangeHasAssignedElement(event)} />}\n * ```\n */\nexport function connectConditionalSlotComponent(component: ConditionalSlotComponent): void {\n  if (!mutationObserver) {\n    mutationObserver = createObserver(\"mutation\", processMutations);\n  }\n\n  mutationObserver.observe(component.el, observerOptions);\n}\n\n/**\n * Helper to tear down a conditional slot component on disconnectedCallback.\n *\n * @param component\n * @deprecated Use `onSlotchange` event with `slotChangeHasAssignedElement` DOM utility instead.\n *\n * ```\n * <slot onSlotchange={(event) => this.mySlotHasElement = slotChangeHasAssignedElement(event)} />}\n * ```\n */\nexport function disconnectConditionalSlotComponent(component: ConditionalSlotComponent): void {\n  mutationObserver.unobserve(component.el);\n}\n\nfunction processMutations(mutations: MutationRecord[]): void {\n  mutations.forEach(({ target }) => {\n    forceUpdate(target);\n  });\n}\n","import { JSXAttributes } from \"@stencil/core/internal\";\nimport { FunctionalComponent, h, VNode } from \"@stencil/core\";\n\nexport interface InteractiveComponent {\n  /**\n   * The host element.\n   */\n  readonly el: InteractiveHTMLElement;\n\n  /**\n   * When true, prevents user interaction.\n   *\n   * Notes:\n   *\n   * This prop should use the @Prop decorator and reflect.\n   * The `disabled` Sass mixin must be added to the component's stylesheet.\n   */\n  disabled: boolean;\n}\n\n/**\n * Exported for testing purposes only.\n *\n * @internal\n */\nexport type InteractiveHTMLElement = HTMLElement & Pick<InteractiveComponent, \"disabled\">;\n\nfunction interceptedClick(): void {\n  const { disabled } = this as InteractiveHTMLElement;\n\n  if (!disabled) {\n    HTMLElement.prototype.click.call(this);\n  }\n}\n\nfunction onPointerDown(event: PointerEvent): void {\n  const interactiveElement = event.target as InteractiveHTMLElement;\n\n  if (interactiveElement.disabled) {\n    // prevent click from moving focus on host\n    event.preventDefault();\n  }\n}\n\nconst nonBubblingWhenDisabledMouseEvents = [\"mousedown\", \"mouseup\", \"click\"];\n\nfunction onNonBubblingWhenDisabledMouseEvent(event: MouseEvent): void {\n  const interactiveElement = event.target as InteractiveHTMLElement;\n\n  // prevent disallowed mouse events from being emitted on the disabled host (per https://github.com/whatwg/html/issues/5886)\n  // ⚠ we generally avoid stopping propagation of events, but this is needed to adhere to the intended spec changes above ⚠\n  if (interactiveElement.disabled) {\n    event.stopImmediatePropagation();\n    event.preventDefault();\n  }\n}\n\nconst captureOnlyOptions = { capture: true } as const;\n\n/**\n * This helper updates the host element to prevent keyboard interaction on its subtree and sets the appropriate aria attribute for accessibility.\n *\n * This should be used in the `componentDidRender` lifecycle hook.\n *\n * **Notes**\n *\n * this util is not needed for simple components whose root element or elements are an interactive component (custom element or native control). For those cases, set the `disabled` props on the root components instead.\n * technically, users can override `tabindex` and restore keyboard navigation, but this will be considered user error\n *\n * @param component\n */\nexport function updateHostInteraction(component: InteractiveComponent): void {\n  if (component.disabled) {\n    component.el.setAttribute(\"aria-disabled\", \"true\");\n\n    if (component.el.contains(document.activeElement)) {\n      (document.activeElement as HTMLElement).blur();\n    }\n\n    blockInteraction(component);\n\n    return;\n  }\n\n  restoreInteraction(component);\n\n  component.el.removeAttribute(\"aria-disabled\");\n}\n\nfunction blockInteraction(component: InteractiveComponent): void {\n  component.el.click = interceptedClick;\n  addInteractionListeners(component.el);\n}\n\nfunction addInteractionListeners(element: HTMLElement): void {\n  element.addEventListener(\"pointerdown\", onPointerDown, captureOnlyOptions);\n  nonBubblingWhenDisabledMouseEvents.forEach((event) =>\n    element.addEventListener(event, onNonBubblingWhenDisabledMouseEvent, captureOnlyOptions),\n  );\n}\n\nfunction restoreInteraction(component: InteractiveComponent): void {\n  delete component.el.click; // fallback on HTMLElement.prototype.click\n  removeInteractionListeners(component.el);\n}\n\nfunction removeInteractionListeners(element: HTMLElement): void {\n  element.removeEventListener(\"pointerdown\", onPointerDown, captureOnlyOptions);\n  nonBubblingWhenDisabledMouseEvents.forEach((event) =>\n    element.removeEventListener(event, onNonBubblingWhenDisabledMouseEvent, captureOnlyOptions),\n  );\n}\n\nexport interface InteractiveContainerProps extends JSXAttributes {\n  disabled: boolean;\n}\n\nexport const CSS = {\n  container: \"interaction-container\",\n};\n\nexport const InteractiveContainer: FunctionalComponent<InteractiveContainerProps> = (\n  { disabled },\n  children: VNode[],\n): VNode => (\n  <div class={CSS.container} inert={disabled}>\n    {...children}\n  </div>\n);\n","import { forceUpdate } from \"@stencil/core\";\nimport { isBrowser } from \"./browser\";\n\n/**\n * This helper adds support for knowing when a component has been loaded.\n *\n * Related issue: https://github.com/Esri/calcite-design-system/issues/5369\n * Could be related to Stencil.js issue: https://github.com/ionic-team/stencil/issues/3580\n *\n * Implementing\n *\n * ```\n * export class MyComponent implements LoadableComponent { }\n * ```\n *\n * ```\n *  //--------------------------------------------------------------------------\n *  //\n *  //  Lifecycle\n *  //\n *  //--------------------------------------------------------------------------\n *\n *  componentWillLoad(): void {\n *    setUpLoadableComponent(this);\n *  }\n *\n *  componentDidLoad(): void {\n *    setComponentLoaded(this);\n *  }\n *\n *  // --------------------------------------------------------------------------\n *  //\n *  //  Methods\n *  //\n *  // --------------------------------------------------------------------------\n *\n *  async myMethod(): Promise<void> {\n *    await componentLoaded(this);\n *  }\n * ```\n */\nexport interface LoadableComponent {\n  /**\n   * Stencil lifecycle method.\n   * https://stenciljs.com/docs/component-lifecycle#componentwillload\n   *\n   * Called once just after the component is first connected to the DOM. Since this method is only called once, it's a good place to load data asynchronously and to setup the state without triggering extra re-renders.\n   */\n  componentWillLoad: () => Promise<void> | void;\n\n  /**\n   * Stencil lifecycle method.\n   * https://stenciljs.com/docs/component-lifecycle#componentdidload\n   *\n   * Called once just after the component is fully loaded and the first render() occurs.\n   */\n  componentDidLoad: () => Promise<void> | void;\n}\n\nconst resolveMap = new WeakMap<LoadableComponent, (value: void | PromiseLike<void>) => void>();\n\nconst promiseMap = new WeakMap<LoadableComponent, Promise<void>>();\n\n/**\n * This helper util sets up the component for the ability to know when the component has been loaded.\n *\n * This should be used in the `componentWillLoad` lifecycle hook.\n *\n * ```\n * componentWillLoad(): void {\n *   setUpLoadableComponent(this);\n * }\n * ```\n *\n * @param component\n */\nexport function setUpLoadableComponent(component: LoadableComponent): void {\n  promiseMap.set(component, new Promise((resolve) => resolveMap.set(component, resolve)));\n}\n\n/**\n * This helper util lets the loadable component know that it is now loaded.\n *\n * This should be used in the `componentDidLoad` lifecycle hook.\n *\n * ```\n * componentDidLoad(): void {\n *   setComponentLoaded(this);\n * }\n * ```\n *\n * @param component\n */\nexport function setComponentLoaded(component: LoadableComponent): void {\n  resolveMap.get(component)();\n}\n\n/**\n * This helper util can be used to ensure a component has been loaded (The \"componentDidLoad\" Stencil lifecycle method has been called).\n *\n * Requires requires `LoadableComponent` to be implemented.\n *\n * A component developer can await this method before proceeding with any logic that requires a component to be loaded first.\n *\n * ```\n * async myMethod(): Promise<void> {\n *   await componentLoaded(this);\n * }\n * ```\n *\n * @param component\n * @returns Promise<void>\n */\nexport function componentLoaded(component: LoadableComponent): Promise<void> {\n  return promiseMap.get(component);\n}\n\n/**\n * This helper util can be used to ensuring the component is loaded and rendered by the browser (The \"componentDidLoad\" Stencil lifecycle method has been called and any internal elements are focusable).\n *\n * Requires `LoadableComponent` to be implemented.\n *\n * A component developer can await this method before proceeding with any logic that requires a component to be loaded first and then an internal element be focused.\n *\n * ```\n * async setFocus(): Promise<void> {\n *   await componentFocusable(this);\n *   this.internalElement?.focus();\n * }\n * ```\n *\n * @param component\n * @returns Promise<void>\n */\nexport async function componentFocusable(component: LoadableComponent): Promise<void> {\n  await componentLoaded(component);\n\n  if (!isBrowser()) {\n    return;\n  }\n\n  forceUpdate(component);\n  return new Promise((resolve) => requestAnimationFrame(() => resolve()));\n}\n","import { readTask } from \"@stencil/core\";\nimport { whenTransitionDone } from \"./dom\";\n\n/**\n * Exported for testing purposes only\n */\nexport const internalReadTask = readTask;\n\n/**\n * Defines interface for components with open/close public emitter.\n * All implementations of this interface must handle the following events: `beforeOpen`, `open`, `beforeClose`, `close`.\n */\nexport interface OpenCloseComponent {\n  /**\n   * The host element.\n   */\n  readonly el: HTMLElement;\n\n  /**\n   * When true, the component opens.\n   */\n  open?: boolean;\n\n  /**\n   * When true, the component is open.\n   */\n  opened?: boolean;\n\n  /**\n   *  Specifies the name of transitionProp.\n   */\n  transitionProp?: string;\n\n  /**\n   * Specifies property on which active transition is watched for.\n   */\n  openTransitionProp: string;\n\n  /**\n   * Specifies element that the transition is allowed to emit on.\n   */\n  transitionEl: HTMLElement;\n\n  /**\n   * Defines method for `beforeOpen` event handler.\n   */\n  onBeforeOpen: () => void;\n\n  /**\n   * Defines method for `open` event handler:\n   */\n  onOpen: () => void;\n\n  /**\n   * Defines method for `beforeClose` event handler:\n   */\n  onBeforeClose: () => void;\n\n  /**\n   * Defines method for `close` event handler:\n   */\n  onClose: () => void;\n}\n\nfunction isOpen(component: OpenCloseComponent): boolean {\n  return \"opened\" in component ? component.opened : component.open;\n}\n\n/**\n * Helper to determine globally set transition duration on the given openTransitionProp, which is imported and set in the @Watch(\"open\").\n * Used to emit (before)open/close events both for when the opacity transition is present and when there is none (transition-duration is set to 0).\n *\n * @example\n * import { onToggleOpenCloseComponent, OpenCloseComponent } from \"../../utils/openCloseComponent\";\n *\n * async componentWillLoad() {\n * // When component initially renders, if `open` was set we need to trigger on load as watcher doesn't fire.\n * if (this.open) {\n *    onToggleOpenCloseComponent(this);\n * }\n * @Watch(\"open\")\n * async toggleModal(value: boolean): Promise<void> {\n *    onToggleOpenCloseComponent(this);\n * }\n *\n * @param component - OpenCloseComponent uses `open` prop to emit (before)open/close.\n */\nexport function onToggleOpenCloseComponent(component: OpenCloseComponent): void {\n  internalReadTask((): void => {\n    if (!component.transitionEl) {\n      return;\n    }\n\n    whenTransitionDone(\n      component.transitionEl,\n      component.openTransitionProp,\n      () => {\n        if (isOpen(component)) {\n          component.onBeforeOpen();\n        } else {\n          component.onBeforeClose();\n        }\n      },\n      () => {\n        if (isOpen(component)) {\n          component.onOpen();\n        } else {\n          component.onClose();\n        }\n      },\n    );\n  });\n}\n","import { getAssetPath } from \"@stencil/core\";\nimport { getSupportedLocale, LocalizedComponent } from \"./locale\";\nimport { isBrowser } from \"./browser\";\n\nexport type MessageBundle = Record<string, string>;\n\nexport const componentLangToMessageBundleCache: Record<string, Promise<MessageBundle>> = {};\n\nasync function getMessageBundle(lang: string, component: string): Promise<MessageBundle> {\n  const key = `${component}_${lang}`;\n\n  if (componentLangToMessageBundleCache[key]) {\n    return componentLangToMessageBundleCache[key];\n  }\n\n  componentLangToMessageBundleCache[key] = fetch(getAssetPath(`./assets/${component}/t9n/messages_${lang}.json`))\n    .then((resp) => {\n      if (!resp.ok) {\n        throwMessageFetchError();\n      }\n      return resp.json();\n    })\n    .catch(() => throwMessageFetchError());\n\n  return componentLangToMessageBundleCache[key];\n}\n\nfunction throwMessageFetchError(): never {\n  throw new Error(\"could not fetch component message bundle\");\n}\n\nfunction mergeMessages(component: T9nComponent): void {\n  component.messages = {\n    ...component.defaultMessages,\n    ...component.messageOverrides,\n  };\n}\n\nfunction noop(): void {\n  // intentionally empty\n}\n\n/**\n * This utility sets up the messages used by the component. It should be awaited in the `componentWillLoad` lifecycle hook.\n *\n * @param component\n */\nexport async function setUpMessages(component: T9nComponent): Promise<void> {\n  component.defaultMessages = await fetchMessages(component, component.effectiveLocale);\n  mergeMessages(component);\n}\n\nasync function fetchMessages(component: T9nComponent, lang: string): Promise<MessageBundle> {\n  if (!isBrowser()) {\n    return {};\n  }\n\n  const { el } = component;\n  const tag = el.tagName.toLowerCase();\n  const componentName = tag.replace(\"calcite-\", \"\");\n\n  return getMessageBundle(getSupportedLocale(lang, \"t9n\"), componentName);\n}\n\n/**\n * This utility must be set up for the component to update its default message bundle if the locale changes.\n *\n * It can be set up in **either** of the following ways:\n *\n * 1. called from `LocalizedComponent`'s `onLocaleChange` method or\n * 2. called from a watcher configured to watch `LocalizedComponent`'s `effectiveLocale` prop\n *\n * @param component\n * @param lang\n */\nexport async function updateMessages(component: T9nComponent, lang: string): Promise<void> {\n  component.defaultMessages = await fetchMessages(component, lang);\n  mergeMessages(component);\n}\n\n/**\n * This utility sets up internals for messages support.\n *\n * It needs to be called in `connectedCallback`\n *\n * **Note**: this must be called after `LocalizedComponent`'s `connectLocalized` method.\n *\n * @param component\n */\nexport function connectMessages(component: T9nComponent): void {\n  component.onMessagesChange = defaultOnMessagesChange;\n}\n\n/**\n * This utility tears down internals for messages support.\n *\n * It needs to be called in `disconnectedCallback`\n *\n * @param component\n */\nexport function disconnectMessages(component: T9nComponent): void {\n  // we set this to noop to for watchers triggered when components are disconnected\n  component.onMessagesChange = noop;\n}\n\n/**\n * This interface enables components to support built-in translation strings.\n *\n * **Notes**:\n *\n * This requires `LocalizedComponent` to be implemented.\n * To avoid unnecessary lookups, composite components should set `lang` on internal t9n components.\n */\nexport interface T9nComponent extends LocalizedComponent {\n  el: HTMLElement;\n\n  /**\n   * This property holds all messages used by the component's rendering.\n   *\n   * This prop should use the `@Prop` decorator. It uses `@Prop` decorator for testing purpose only.\n   */\n  messages: MessageBundle;\n\n  /**\n   * This property holds the component's default messages.\n   */\n  defaultMessages: MessageBundle;\n\n  /**\n   * This property holds all user message overrides.\n   *\n   * This prop should use the `@Prop` decorator.\n   */\n  messageOverrides: Partial<MessageBundle>;\n\n  /**\n   * This private method ensures messages are kept in sync.\n   *\n   * This method should be empty and configured to watch for changes on  `messageOverrides` property.\n   *\n   * @Watch(\"messageOverrides\")\n   * onMessagesChange(): void {\n   *  \\/* wired up by t9n util *\\/\n   * }\n   */\n  onMessagesChange: () => void;\n}\n\nfunction defaultOnMessagesChange(this: T9nComponent): void {\n  mergeMessages(this);\n}\n"],"names":["constrainHeadingLevel","level","Math","min","max","ceil","Heading","props","children","HeadingTag","h","class","key","IDS$1","CSS$1","SLOTS","ICONS$1","opened","closed","valid","invalid","Block","openTransitionProp","onHeaderClick","this","open","calciteBlockToggle","emit","actionsEndSlotChangeHandler","event","hasEndActions","slotChangeHasAssignedElement","handleContentStartSlotChange","hasContentStart","defaultEndMenuPlacement","openHandler","onToggleOpenCloseComponent","onMessagesChange","setFocus","componentFocusable","focusFirstTabbable","el","onBeforeOpen","calciteBlockBeforeOpen","onOpen","calciteBlockOpen","onBeforeClose","calciteBlockBeforeClose","onClose","calciteBlockClose","effectiveLocaleChange","updateMessages","effectiveLocale","connectedCallback","connectConditionalSlotComponent","connectLocalized","connectMessages","transitionEl","disconnectedCallback","disconnectLocalized","disconnectMessages","disconnectConditionalSlotComponent","componentWillLoad","setUpMessages","setUpLoadableComponent","componentDidLoad","setComponentLoaded","componentDidRender","updateHostInteraction","renderScrim","loading","defaultSlot","renderLoaderStatusIcon","messages","status","hasSlottedIcon","getSlotted","inline","label","icon","scale","name","renderActionsEnd","onSlotchange","renderContentStart","hidden","renderTitle","heading","headingLevel","description","renderIcon","position","iconFlipRtl","flipRtl","iconValue","iconStart","iconEnd","iconClass","render","collapsible","menuFlipPlacements","menuPlacement","toggleLabel","collapse","expand","headerContent","id","hasControl","hasMenuActions","collapseIcon","headerNode","dragHandle","toAriaBoolean","onClick","title","flipPlacements","options","overlayPositioning","placement","Host","InteractiveContainer","disabled","IDS","CSS","ICONS","menuOpen","menuClosed","BlockSection","handleHeaderKeyDown","isActivationKey","toggleSection","preventDefault","stopPropagation","calciteBlockSectionToggle","renderStatusIcon","statusIcon","statusIconClasses","undefined","flipRtlStart","flipRtlEnd","isIconStart","text","toggleDisplay","arrowIcon","onKeyDown","role","tabIndex","checked","inert","mutationObserver","observerOptions","childList","component","createObserver","processMutations","observe","unobserve","mutations","forEach","target","forceUpdate","interceptedClick","HTMLElement","prototype","click","call","onPointerDown","nonBubblingWhenDisabledMouseEvents","onNonBubblingWhenDisabledMouseEvent","stopImmediatePropagation","captureOnlyOptions","capture","setAttribute","contains","document","activeElement","blur","element","addEventListener","blockInteraction","removeEventListener","restoreInteraction","removeAttribute","resolveMap","WeakMap","promiseMap","set","Promise","resolve","get","componentLoaded","async","isBrowser","requestAnimationFrame","internalReadTask","readTask","isOpen","whenTransitionDone","componentLangToMessageBundleCache","throwMessageFetchError","Error","mergeMessages","defaultMessages","messageOverrides","noop","fetchMessages","lang","componentName","tagName","toLowerCase","replace","fetch","getAssetPath","then","resp","ok","json","catch","getMessageBundle","getSupportedLocale","defaultOnMessagesChange"],"sourceRoot":""}