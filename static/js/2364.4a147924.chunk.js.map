{"version":3,"file":"static/js/2364.4a147924.chunk.js","mappings":"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","sources":["../node_modules/@esri/calcite-components/dist/esm/src/components/alert/resources.ts","../node_modules/@esri/calcite-components/dist/esm/src/components/alert/alert.scss?tag=calcite-alert&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/esm/src/components/alert/alert.tsx","../node_modules/@esri/calcite-components/dist/esm/src/components/alert/AlertManager.ts","../node_modules/@esri/calcite-components/dist/esm/src/utils/component.ts","../node_modules/@esri/calcite-components/dist/esm/src/utils/loadable.ts","../node_modules/@esri/calcite-components/dist/esm/src/utils/openCloseComponent.ts","../node_modules/@esri/calcite-components/dist/esm/src/components/resources.ts","../node_modules/@esri/calcite-components/dist/esm/src/utils/t9n.ts"],"sourcesContent":["export const DURATIONS = {\n  slow: 14000,\n  medium: 10000,\n  fast: 6000,\n};\n\nexport const SLOTS = {\n  actionsEnd: \"actions-end\",\n  title: \"title\",\n  message: \"message\",\n  link: \"link\",\n};\n\nexport const CSS = {\n  actionsEnd: \"actions-end\",\n  close: \"close\",\n  container: \"container\",\n  containerBottom: \"container--bottom\",\n  containerBottomEnd: \"container--bottom-end\",\n  containerBottomStart: \"container--bottom-start\",\n  containerActive: \"container--active\",\n  containerTop: \"container--top\",\n  containerTopEnd: \"container--top-end\",\n  containerTopStart: \"container--top-start\",\n  content: \"content\",\n  contentContainer: \"content-container\",\n  dismissProgress: \"dismiss-progress\",\n  footer: \"footer\",\n  icon: \"icon\",\n  containerEmbedded: \"container--embedded\",\n  queueCount: \"queue-count\",\n  queueCountActive: \"queue-count--active\",\n  textContainer: \"text-container\",\n  focused: \"focused\",\n};\n","/**\n * CSS Custom Properties\n *\n * These properties can be overridden using the component's tag as selector.\n *\n * @prop --calcite-alert-width: Specifies the width of the component.\n * @prop --calcite-alert-background-color: Specifies the component's background color.\n * @prop --calcite-alert-corner-radius: Specifies the component's corner radius.\n * @prop --calcite-alert-shadow: Specifies the component's shadow.\n */\n\n$border-style: 1px solid var(--calcite-color-border-3);\n\n:host {\n  --calcite-internal-alert-edge-distance: theme(\"spacing.8\");\n  @apply block;\n\n  inline-size: var(--calcite-alert-width);\n}\n\n.container {\n  @apply box-border\n  fixed\n  flex\n  items-center\n  justify-center\n  min-w-min\n  mx-auto\n  my-0\n  opacity-0\n  pointer-events-none\n  text-start\n  w-full\n  z-toast;\n\n  --tw-shadow: 0 6px 20px -4px rgba(0, 0, 0, 0.1), 0 4px 12px -2px rgba(0, 0, 0, 0.08);\n  --tw-shadow-colored: 0 6px 20px -4px var(--tw-shadow-color), 0 4px 12px -2px var(--tw-shadow-color);\n  box-shadow: var(\n    --calcite-alert-shadow,\n    (var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow))\n  );\n  background-color: var(--calcite-alert-background-color, var(--calcite-color-foreground-1));\n  border-radius: var(--calcite-alert-corner-radius, var(--calcite-border-radius));\n  border-block-start: 0 solid transparent;\n  border-inline: $border-style;\n  border-block-end: $border-style;\n  max-inline-size: calc(100% - (var(--calcite-internal-alert-edge-distance) * 2));\n  transition:\n    opacity var(--calcite-internal-animation-timing-slow) $easing-function,\n    all var(--calcite-animation-timing) ease-in-out;\n\n  &--bottom,\n  &--top {\n    inset-inline-end: 0;\n    inset-inline-start: 0;\n  }\n  &[class*=\"bottom\"] {\n    transform: translate3d(0, var(--calcite-internal-alert-edge-distance), 0);\n    inset-block-end: var(--calcite-internal-alert-edge-distance);\n  }\n  &[class*=\"top\"] {\n    transform: translate3d(0, calc(-1 * var(--calcite-internal-alert-edge-distance)), 0);\n    inset-block-start: var(--calcite-internal-alert-edge-distance);\n  }\n  &[class*=\"start\"] {\n    inset-inline-start: var(--calcite-internal-alert-edge-distance);\n    inset-inline-end: auto;\n  }\n  &[class*=\"end\"] {\n    inset-inline-end: var(--calcite-internal-alert-edge-distance);\n    inset-inline-start: auto;\n  }\n}\n\n.icon {\n  @apply flex flex-col items-center justify-center p-0;\n  margin-block: auto;\n  margin-inline-end: auto;\n}\n\n.close {\n  @apply bg-transparent border-none cursor-pointer flex items-center justify-end outline-none self-stretch text-color-3;\n  -webkit-appearance: none;\n  border-start-end-radius: var(--calcite-alert-corner-radius, var(--calcite-border-radius));\n  border-end-end-radius: var(--calcite-alert-corner-radius, var(--calcite-border-radius));\n\n  @apply focus-base;\n  &:focus {\n    @apply focus-inset;\n  }\n\n  &:hover,\n  &:focus {\n    @apply text-color-1;\n    background-color: var(--calcite-color-foreground-2);\n  }\n\n  &:active {\n    background-color: var(--calcite-color-foreground-3);\n  }\n}\n\n.queue-count {\n  @apply cursor-default\n  flex\n  font-medium\n  invisible\n  items-center\n  justify-around\n  min-w-min\n  opacity-0\n  overflow-hidden\n  self-stretch\n  text-center\n  text-color-2\n  transition-default;\n  border-inline: 0 solid transparent;\n  border-start-end-radius: 0;\n\n  &--active {\n    @apply visible opacity-100;\n  }\n}\n\n.dismiss-progress {\n  @apply absolute\n  block\n  w-full\n  overflow-hidden;\n  inset-inline: 0;\n  inset-block-start: -2px;\n  block-size: 2px;\n  border-radius: var(--calcite-border-radius) var(--calcite-border-radius) 0 0;\n  &::after {\n    @apply absolute\n    top-0\n    block;\n    block-size: 2px;\n    content: \"\";\n    background-color: var(--calcite-color-transparent-tint);\n    inset-inline-end: 0;\n  }\n}\n\n.actions-end {\n  @apply flex self-stretch;\n}\n\n.text-container {\n  @apply box-border flex flex-auto min-w-0 flex-col break-words;\n}\n\n.footer {\n  @apply flex justify-end pt-px relative self-stretch w-auto;\n  block-size: inherit;\n}\n\n// scale variables\n:host([scale=\"s\"]) {\n  @include slotted(\"title\", \"*\") {\n    @apply text-n1-wrap;\n  }\n  @include slotted(\"message\", \"*\") {\n    @apply text-n2-wrap;\n  }\n  @include slotted(\"link\", \"*\") {\n    @apply text-n2-wrap;\n  }\n  .queue-count {\n    @apply mx-2;\n  }\n  .container {\n    --calcite-internal-alert-min-height: 3.5rem;\n    inline-size: var(--calcite-alert-width, 40em);\n  }\n  .close {\n    padding: theme(\"spacing.3\");\n  }\n  .icon {\n    padding-inline-start: theme(\"spacing.3\");\n  }\n  .text-container {\n    padding-block: theme(\"spacing.2\");\n    padding-inline: theme(\"spacing.3\") theme(\"spacing.2\");\n  }\n}\n\n:host([scale=\"m\"]) {\n  @include slotted(\"title\", \"*\") {\n    @apply text-0-wrap;\n  }\n  @include slotted(\"message\", \"*\") {\n    @apply text-n1-wrap;\n  }\n  @include slotted(\"link\", \"*\") {\n    @apply text-n1-wrap;\n  }\n  .queue-count {\n    @apply mx-3;\n  }\n  .container {\n    --calcite-internal-alert-min-height: 4.1875rem;\n    inline-size: var(--calcite-alert-width, 50em);\n  }\n  .close {\n    padding: theme(\"spacing.4\");\n  }\n  .icon {\n    padding-inline-start: theme(\"spacing.4\");\n  }\n  .text-container {\n    padding-block: theme(\"spacing.3\");\n    padding-inline: theme(\"spacing.4\") theme(\"spacing.3\");\n  }\n}\n\n:host([scale=\"l\"]) {\n  @include slotted(\"title\", \"*\") {\n    @apply text-1-wrap mb-1;\n  }\n  @include slotted(\"message\", \"*\") {\n    @apply text-0-wrap;\n  }\n  @include slotted(\"link\", \"*\") {\n    @apply text-0-wrap;\n  }\n  .queue-count {\n    @apply mx-4;\n  }\n  .container {\n    --calcite-internal-alert-min-height: 5.625rem;\n    inline-size: var(--calcite-alert-width, 60em);\n  }\n  .close {\n    padding: theme(\"spacing.5\");\n  }\n  .icon {\n    padding-inline-start: theme(\"spacing.5\");\n  }\n  .text-container {\n    padding-block: theme(\"spacing.4\");\n    padding-inline: theme(\"spacing.5\") theme(\"spacing.4\");\n  }\n}\n\n:host([open]) {\n  .container--active {\n    @apply border-t-2 opacity-100;\n    pointer-events: initial;\n    &[class*=\"bottom\"] {\n      transform: translate3d(0, calc(-1 * var(--calcite-internal-alert-edge-distance)), inherit);\n    }\n    &[class*=\"top\"] {\n      transform: translate3d(0, var(--calcite-internal-alert-edge-distance), inherit);\n    }\n  }\n}\n\n:host([auto-close]) > .queue-count {\n  border-inline-end: 0 solid transparent;\n}\n\n@include slotted(\"title\", \"*\") {\n  @apply text-0-wrap\n    font-medium;\n\n  color: var(--calcite-color-text-1);\n}\n\n@include slotted(\"message\", \"*\") {\n  @apply text-n1-wrap\n    m-0\n    inline\n    font-normal;\n  margin-inline-end: theme(\"margin.2\");\n  color: var(--calcite-color-text-2);\n}\n\n@include slotted(\"link\", \"*\") {\n  @apply text-color-link inline-flex;\n}\n\n$alert-kinds:\n  \"brand\" var(--calcite-color-brand),\n  \"info\" var(--calcite-color-status-info),\n  \"danger\" var(--calcite-color-status-danger),\n  \"success\" var(--calcite-color-status-success),\n  \"warning\" var(--calcite-color-status-warning);\n\n@each $alert-kind in $alert-kinds {\n  $name: nth($alert-kind, 1);\n  $kind: nth($alert-kind, 2);\n\n  :host([kind=\"#{$name}\"]) {\n    .container {\n      border-block-start-color: $kind;\n\n      & .icon {\n        color: $kind;\n      }\n    }\n  }\n}\n\n$alert-durations:\n  \"fast\" 6000ms,\n  \"medium\" 10000ms,\n  \"slow\" 14000ms;\n\n@each $alert-duration in $alert-durations {\n  $name: nth($alert-duration, 1);\n  $duration: nth($alert-duration, 2);\n\n  :host([auto-close-duration=\"#{$name}\"]) .dismiss-progress:after {\n    animation: dismissProgress $duration ease-out;\n  }\n  :host(:hover[auto-close-duration=\"#{$name}\"]) .dismiss-progress:after,\n  :host(:focus[auto-close-duration=\"#{$name}\"]) .dismiss-progress:after {\n    animation-play-state: paused;\n  }\n}\n\n.container.focused .dismiss-progress::after {\n  animation-play-state: paused;\n}\n\n@keyframes dismissProgress {\n  0% {\n    @apply w-0 opacity-75;\n  }\n  100% {\n    @apply w-full opacity-100;\n  }\n}\n\n/**\n * Conditional styles for when Alert is slotted in Shell\n */\n.container--embedded {\n  @apply absolute;\n}\n\n@include base-component();\n@include calcite-hydrated-hidden();\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Method,\n  Prop,\n  State,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport {\n  getSlotted,\n  setRequestedIcon,\n  slotChangeHasAssignedElement,\n  toAriaBoolean,\n} from \"../../utils/dom\";\nimport { MenuPlacement } from \"../../utils/floating-ui\";\nimport { getIconScale } from \"../../utils/component\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport {\n  connectLocalized,\n  disconnectLocalized,\n  NumberingSystem,\n  NumberStringFormat,\n} from \"../../utils/locale\";\nimport { onToggleOpenCloseComponent, OpenCloseComponent } from \"../../utils/openCloseComponent\";\nimport {\n  connectMessages,\n  disconnectMessages,\n  setUpMessages,\n  T9nComponent,\n  updateMessages,\n} from \"../../utils/t9n\";\nimport { Kind, Scale } from \"../interfaces\";\nimport { KindIcons } from \"../resources\";\nimport { IconNameOrString } from \"../icon/interfaces\";\nimport { AlertMessages } from \"./assets/alert/t9n\";\nimport { AlertDuration, AlertQueue } from \"./interfaces\";\nimport { CSS, DURATIONS, SLOTS } from \"./resources\";\nimport AlertManager from \"./AlertManager\";\n\nconst manager = new AlertManager();\n\n/**\n * Alerts are meant to provide a way to communicate urgent or important information to users, frequently as a result of an action they took in your app. Alerts are positioned\n * at the bottom of the page. Multiple opened alerts will be added to a queue, allowing users to dismiss them in the order they are provided.\n */\n\n/**\n * @slot title - A slot for adding a title to the component.\n * @slot message - A slot for adding main text to the component.\n * @slot link - A slot for adding a `calcite-action` to take from the component such as: \"undo\", \"try again\", \"link to page\", etc.\n * @slot actions-end - A slot for adding `calcite-action`s to the end of the component. It is recommended to use two or fewer actions.\n */\n\n@Component({\n  tag: \"calcite-alert\",\n  styleUrl: \"alert.scss\",\n  shadow: true,\n  assetsDirs: [\"assets\"],\n})\nexport class Alert implements OpenCloseComponent, LoadableComponent, T9nComponent {\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //---------------------------------------------------------------------------\n\n  /**\n   * This internal property, managed by the AlertManager, is used\n   * to inform the component if it is the active open Alert.\n   *\n   * @internal\n   */\n  @Prop() active = false;\n\n  @Watch(\"active\")\n  handleActiveChange(): void {\n    this.clearAutoCloseTimeout();\n    if (this.active && this.autoClose && !this.autoCloseTimeoutId) {\n      this.initialOpenTime = Date.now();\n      this.autoCloseTimeoutId = window.setTimeout(\n        () => this.closeAlert(),\n        DURATIONS[this.autoCloseDuration],\n      );\n    }\n  }\n\n  /**\n   * This internal property, managed by the AlertManager, is used\n   * to inform the component of how many alerts are currently open.\n   *\n   * @internal\n   */\n  @Prop() openAlertCount = 0;\n\n  /** When `true`, displays and positions the component. */\n  @Prop({ reflect: true, mutable: true }) open = false;\n\n  @Watch(\"open\")\n  openHandler(): void {\n    onToggleOpenCloseComponent(this);\n    if (this.open) {\n      manager.registerElement(this.el);\n    } else {\n      manager.unregisterElement(this.el);\n    }\n  }\n\n  /** When `true`, the component closes automatically. Recommended for passive, non-blocking alerts. */\n  @Prop({ reflect: true }) autoClose = false;\n\n  /** Specifies the duration before the component automatically closes - only use with `autoClose`. */\n  @Prop({ reflect: true }) autoCloseDuration: AlertDuration = \"medium\";\n\n  @Watch(\"autoCloseDuration\")\n  updateDuration(): void {\n    if (this.autoClose && this.autoCloseTimeoutId) {\n      this.clearAutoCloseTimeout();\n      this.autoCloseTimeoutId = window.setTimeout(\n        () => this.closeAlert(),\n        DURATIONS[this.autoCloseDuration],\n      );\n    }\n  }\n\n  /**\n   * This internal property, managed by a containing calcite-shell, is used\n   * to inform the component if special configuration or styles are needed\n   *\n   * @internal\n   */\n  @Prop({ mutable: true }) embedded = false;\n\n  /** Specifies the kind of the component, which will apply to top border and icon. */\n  @Prop({ reflect: true }) kind: Extract<\n    \"brand\" | \"danger\" | \"info\" | \"success\" | \"warning\",\n    Kind\n  > = \"brand\";\n\n  /**\n   * When `true`, shows a default recommended icon. Alternatively,\n   * pass a Calcite UI Icon name to display a specific icon.\n   */\n  @Prop({ reflect: true }) icon: IconNameOrString | boolean;\n\n  /** When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`). */\n  @Prop({ reflect: true }) iconFlipRtl = false;\n\n  /** Specifies an accessible name for the component. */\n  @Prop() label!: string;\n\n  /**\n   * Specifies the Unicode numeral system used by the component for localization.\n   */\n  @Prop({ reflect: true }) numberingSystem: NumberingSystem;\n\n  /** Specifies the placement of the component. */\n  @Prop({ reflect: true }) placement: MenuPlacement = \"bottom\";\n\n  /** Specifies the size of the component. */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  /**\n   * Made into a prop for testing purposes only\n   *\n   * @internal\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messages: AlertMessages;\n\n  /**\n   * Use this property to override individual strings used by the component.\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messageOverrides: Partial<AlertMessages>;\n\n  @Watch(\"messageOverrides\")\n  onMessagesChange(): void {\n    /* wired up by t9n util */\n  }\n\n  /** Specifies the ordering priority of the component when opened. */\n  @Prop({ reflect: true }) queue: AlertQueue = \"last\";\n\n  @Watch(\"queue\")\n  handleQueueChange(): void {\n    if (this.open) {\n      manager.unregisterElement(this.el);\n      manager.registerElement(this.el);\n    }\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    connectLocalized(this);\n    connectMessages(this);\n\n    const open = this.open;\n\n    if (open) {\n      manager.registerElement(this.el);\n    }\n\n    this.numberStringFormatter.numberFormatOptions = {\n      locale: this.effectiveLocale,\n      numberingSystem: this.numberingSystem,\n      signDisplay: \"always\",\n    };\n  }\n\n  async componentWillLoad(): Promise<void> {\n    setUpLoadableComponent(this);\n    await setUpMessages(this);\n    if (this.open) {\n      onToggleOpenCloseComponent(this);\n    }\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n  }\n\n  disconnectedCallback(): void {\n    manager.unregisterElement(this.el);\n    this.clearAutoCloseTimeout();\n    disconnectLocalized(this);\n    disconnectMessages(this);\n    this.embedded = false;\n  }\n\n  render(): VNode {\n    const { open, autoClose, label, placement, active, openAlertCount } = this;\n    const role = autoClose ? \"alert\" : \"alertdialog\";\n    const hidden = !open;\n    const effectiveIcon = setRequestedIcon(KindIcons, this.icon, this.kind);\n    const hasQueuedAlerts = openAlertCount > 1;\n\n    return (\n      <Host\n        aria-hidden={toAriaBoolean(hidden)}\n        aria-label={label}\n        calcite-hydrated-hidden={hidden}\n        role={role}\n      >\n        <div\n          class={{\n            [CSS.container]: true,\n            [CSS.containerActive]: active,\n            [`${CSS.container}--${placement}`]: true,\n            [CSS.containerEmbedded]: this.embedded,\n            [CSS.focused]: this.isFocused,\n          }}\n          onPointerEnter={this.autoClose && this.autoCloseTimeoutId ? this.handleMouseOver : null}\n          onPointerLeave={this.autoClose ? this.handleMouseLeave : null}\n          ref={this.setTransitionEl}\n        >\n          {effectiveIcon && this.renderIcon(effectiveIcon)}\n          <div\n            class={CSS.textContainer}\n            onFocusin={this.autoClose && this.autoCloseTimeoutId ? this.handleKeyBoardFocus : null}\n            onFocusout={this.autoClose ? this.handleKeyBoardBlur : null}\n          >\n            <slot name={SLOTS.title} />\n            <slot name={SLOTS.message} />\n            <slot name={SLOTS.link} />\n          </div>\n          {this.renderActionsEnd()}\n          {hasQueuedAlerts ? this.renderQueueCount() : null}\n          {this.renderCloseButton()}\n          {open && active && autoClose ? <div class={CSS.dismissProgress} /> : null}\n        </div>\n      </Host>\n    );\n  }\n\n  private handleKeyBoardFocus = (): void => {\n    this.isFocused = true;\n    this.handleFocus();\n  };\n\n  private handleKeyBoardBlur = (): void => {\n    this.isFocused = false;\n    if (!this.isHovered) {\n      this.handleBlur();\n    }\n  };\n\n  private renderCloseButton(): VNode {\n    return (\n      <button\n        aria-label={this.messages.close}\n        class={CSS.close}\n        key=\"close\"\n        onClick={this.closeAlert}\n        onFocusin={this.autoClose ? this.handleKeyBoardFocus : null}\n        onFocusout={this.autoClose ? this.handleKeyBoardBlur : null}\n        ref={(el) => (this.closeButton = el)}\n        type=\"button\"\n      >\n        <calcite-icon icon=\"x\" scale={getIconScale(this.scale)} />\n      </button>\n    );\n  }\n\n  private renderQueueCount(): VNode {\n    const { openAlertCount } = this;\n    const queueNumber = openAlertCount > 2 ? openAlertCount - 1 : 1;\n    const queueText = this.numberStringFormatter.numberFormatter.format(queueNumber);\n\n    return (\n      <div\n        class={{\n          [CSS.queueCount]: true,\n          [CSS.queueCountActive]: openAlertCount > 1,\n        }}\n        key=\"queue-count\"\n      >\n        <calcite-chip scale={this.scale} value={queueText}>\n          {queueText}\n        </calcite-chip>\n      </div>\n    );\n  }\n\n  private renderActionsEnd(): VNode {\n    return (\n      <div class={CSS.actionsEnd}>\n        <slot name={SLOTS.actionsEnd} onSlotchange={this.actionsEndSlotChangeHandler} />\n      </div>\n    );\n  }\n\n  private renderIcon(icon: IconNameOrString): VNode {\n    return (\n      <div class={CSS.icon}>\n        <calcite-icon flipRtl={this.iconFlipRtl} icon={icon} scale={getIconScale(this.scale)} />\n      </div>\n    );\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  //--------------------------------------------------------------------------\n\n  /** Fires when the component is requested to be closed and before the closing transition begins. */\n  @Event({ cancelable: false }) calciteAlertBeforeClose: EventEmitter<void>;\n\n  /** Fires when the component is closed and animation is complete. */\n  @Event({ cancelable: false }) calciteAlertClose: EventEmitter<void>;\n\n  /** Fires when the component is added to the DOM but not rendered, and before the opening transition begins. */\n  @Event({ cancelable: false }) calciteAlertBeforeOpen: EventEmitter<void>;\n\n  /** Fires when the component is open and animation is complete. */\n  @Event({ cancelable: false }) calciteAlertOpen: EventEmitter<void>;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Sets focus on the component's \"close\" button, the first focusable item.\n   *\n    @returns {Promise<void>}\n   */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n\n    const alertLinkEl: HTMLCalciteLinkElement = getSlotted(this.el, { selector: \"calcite-link\" });\n\n    if (!this.closeButton && !alertLinkEl) {\n      return;\n    } else if (alertLinkEl) {\n      return alertLinkEl.setFocus();\n    } else if (this.closeButton) {\n      this.closeButton.focus();\n    }\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private State/Props\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteAlertElement;\n\n  @State() defaultMessages: AlertMessages;\n\n  @State() effectiveLocale = \"\";\n\n  @Watch(\"effectiveLocale\")\n  effectiveLocaleChange(): void {\n    updateMessages(this, this.effectiveLocale);\n    this.numberStringFormatter.numberFormatOptions = {\n      locale: this.effectiveLocale,\n      numberingSystem: this.numberingSystem,\n      signDisplay: \"always\",\n    };\n  }\n\n  @State() numberStringFormatter = new NumberStringFormat();\n\n  @Watch(\"numberingSystem\")\n  numberingSystemChange(): void {\n    this.numberStringFormatter.numberFormatOptions = {\n      locale: this.effectiveLocale,\n      numberingSystem: this.numberingSystem,\n      signDisplay: \"always\",\n    };\n  }\n\n  @State() hasEndActions = false;\n\n  @State() isFocused = false;\n\n  private autoCloseTimeoutId: number = null;\n\n  private closeButton: HTMLButtonElement;\n\n  private initialOpenTime: number;\n\n  private lastMouseOverBegin: number;\n\n  private totalOpenTime = 0;\n\n  private totalHoverTime = 0;\n\n  private isHovered: boolean;\n\n  openTransitionProp = \"opacity\";\n\n  transitionEl: HTMLDivElement;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  private clearAutoCloseTimeout(): void {\n    window.clearTimeout(this.autoCloseTimeoutId);\n    this.autoCloseTimeoutId = null;\n  }\n\n  private setTransitionEl = (el: HTMLDivElement): void => {\n    this.transitionEl = el;\n  };\n\n  /** close and emit calciteInternalAlertSync event with the updated queue payload */\n  private closeAlert = (): void => {\n    this.open = false;\n    this.clearAutoCloseTimeout();\n  };\n\n  onBeforeOpen(): void {\n    this.calciteAlertBeforeOpen.emit();\n  }\n\n  onOpen(): void {\n    this.calciteAlertOpen.emit();\n  }\n\n  onBeforeClose(): void {\n    this.calciteAlertBeforeClose.emit();\n  }\n\n  onClose(): void {\n    this.calciteAlertClose.emit();\n  }\n\n  private actionsEndSlotChangeHandler = (event: Event): void => {\n    this.hasEndActions = slotChangeHasAssignedElement(event);\n  };\n\n  private handleMouseOver = (): void => {\n    this.isHovered = true;\n    this.handleFocus();\n  };\n\n  private handleMouseLeave = (): void => {\n    this.isHovered = false;\n    if (!this.isFocused) {\n      this.handleBlur();\n    }\n  };\n\n  private handleFocus = (): void => {\n    this.clearAutoCloseTimeout();\n    this.totalOpenTime = Date.now() - this.initialOpenTime;\n    this.lastMouseOverBegin = Date.now();\n  };\n\n  private handleBlur = (): void => {\n    const hoverDuration = Date.now() - this.lastMouseOverBegin;\n    const timeRemaining =\n      DURATIONS[this.autoCloseDuration] - this.totalOpenTime + this.totalHoverTime;\n    this.totalHoverTime = this.totalHoverTime ? hoverDuration + this.totalHoverTime : hoverDuration;\n    this.autoCloseTimeoutId = window.setTimeout(() => this.closeAlert(), timeRemaining);\n  };\n}\n","export const alertQueueTimeoutMs = 300;\n\nexport default class AlertManager {\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n\n  private registeredElements: HTMLCalciteAlertElement[] = [];\n\n  private queueTimeoutId: number = null;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  // --------------------------------------------------------------------------\n\n  registerElement(alert: HTMLCalciteAlertElement): void {\n    const { registeredElements } = this;\n\n    if (!registeredElements.includes(alert)) {\n      switch (alert.queue) {\n        case \"immediate\":\n          registeredElements.unshift(alert);\n          break;\n        case \"next\":\n          registeredElements.splice(1, 0, alert);\n          break;\n        case \"last\":\n          registeredElements.push(alert);\n          break;\n      }\n\n      this.updateAlerts();\n    }\n  }\n\n  unregisterElement(alert: HTMLCalciteAlertElement): void {\n    const { registeredElements } = this;\n\n    const index = registeredElements.indexOf(alert);\n\n    if (index !== -1) {\n      registeredElements.splice(index, 1);\n    }\n\n    alert.active = false;\n    this.updateAlerts();\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  // --------------------------------------------------------------------------\n\n  private updateAlerts(): void {\n    window.clearTimeout(this.queueTimeoutId);\n    this.queueTimeoutId = null;\n\n    this.registeredElements.forEach((alert, index) => {\n      alert.openAlertCount = this.registeredElements.length;\n\n      if (index === 0) {\n        this.queueTimeoutId = window.setTimeout(() => (alert.active = true), alertQueueTimeoutMs);\n      } else {\n        alert.active = false;\n      }\n    });\n  }\n}\n","import { HTMLStencilElement } from \"@stencil/core/internal\";\nimport { Scale } from \"../components/interfaces\";\n\nexport function getIconScale(componentScale: Scale): Extract<Scale, \"s\" | \"m\"> {\n  return componentScale === \"l\" ? \"m\" : \"s\";\n}\n\n/**\n * This util helps us wait for a component to be ready for both lazy-loading (`dist` output) and non-lazy-loading (`components` output) components.\n *\n * Based on https://github.com/ionic-team/ionic-framework/blob/1a8bd6d/core/src/utils/helpers.ts#L60C1-L79C3\n *\n * @param el - the host element to wait for\n */\nexport async function componentOnReady(el: HTMLElement): Promise<void> {\n  await (isStencilEl(el)\n    ? el.componentOnReady()\n    : new Promise<void>((resolve) => requestAnimationFrame(() => resolve())));\n}\n\nfunction isStencilEl(el: HTMLElement): el is HTMLStencilElement {\n  return typeof (el as HTMLStencilElement).componentOnReady === \"function\";\n}\n","import { forceUpdate } from \"@stencil/core\";\nimport { isBrowser } from \"./browser\";\n\n/**\n * This helper adds support for knowing when a component has been loaded.\n *\n * Related issue: https://github.com/Esri/calcite-design-system/issues/5369\n * Could be related to Stencil.js issue: https://github.com/ionic-team/stencil/issues/3580\n *\n * Implementing\n *\n * ```\n * export class MyComponent implements LoadableComponent { }\n * ```\n *\n * ```\n *  //--------------------------------------------------------------------------\n *  //\n *  //  Lifecycle\n *  //\n *  //--------------------------------------------------------------------------\n *\n *  componentWillLoad(): void {\n *    setUpLoadableComponent(this);\n *  }\n *\n *  componentDidLoad(): void {\n *    setComponentLoaded(this);\n *  }\n *\n *  // --------------------------------------------------------------------------\n *  //\n *  //  Methods\n *  //\n *  // --------------------------------------------------------------------------\n *\n *  async myMethod(): Promise<void> {\n *    await componentLoaded(this);\n *  }\n * ```\n */\nexport interface LoadableComponent {\n  /**\n   * Stencil lifecycle method.\n   * https://stenciljs.com/docs/component-lifecycle#componentwillload\n   *\n   * Called once just after the component is first connected to the DOM. Since this method is only called once, it's a good place to load data asynchronously and to setup the state without triggering extra re-renders.\n   */\n  componentWillLoad: () => Promise<void> | void;\n\n  /**\n   * Stencil lifecycle method.\n   * https://stenciljs.com/docs/component-lifecycle#componentdidload\n   *\n   * Called once just after the component is fully loaded and the first render() occurs.\n   */\n  componentDidLoad: () => Promise<void> | void;\n}\n\nconst resolveMap = new WeakMap<LoadableComponent, (value: void | PromiseLike<void>) => void>();\n\nconst promiseMap = new WeakMap<LoadableComponent, Promise<void>>();\n\n/**\n * This helper util sets up the component for the ability to know when the component has been loaded.\n *\n * This should be used in the `componentWillLoad` lifecycle hook.\n *\n * ```\n * componentWillLoad(): void {\n *   setUpLoadableComponent(this);\n * }\n * ```\n *\n * @param component\n */\nexport function setUpLoadableComponent(component: LoadableComponent): void {\n  promiseMap.set(component, new Promise((resolve) => resolveMap.set(component, resolve)));\n}\n\n/**\n * This helper util lets the loadable component know that it is now loaded.\n *\n * This should be used in the `componentDidLoad` lifecycle hook.\n *\n * ```\n * componentDidLoad(): void {\n *   setComponentLoaded(this);\n * }\n * ```\n *\n * @param component\n */\nexport function setComponentLoaded(component: LoadableComponent): void {\n  resolveMap.get(component)();\n}\n\n/**\n * This helper util can be used to ensure a component has been loaded (The \"componentDidLoad\" Stencil lifecycle method has been called).\n *\n * Requires requires `LoadableComponent` to be implemented.\n *\n * A component developer can await this method before proceeding with any logic that requires a component to be loaded first.\n *\n * ```\n * async myMethod(): Promise<void> {\n *   await componentLoaded(this);\n * }\n * ```\n *\n * @param component\n * @returns Promise<void>\n */\nexport function componentLoaded(component: LoadableComponent): Promise<void> {\n  return promiseMap.get(component);\n}\n\n/**\n * This helper util can be used to ensuring the component is loaded and rendered by the browser (The \"componentDidLoad\" Stencil lifecycle method has been called and any internal elements are focusable).\n *\n * Requires `LoadableComponent` to be implemented.\n *\n * A component developer can await this method before proceeding with any logic that requires a component to be loaded first and then an internal element be focused.\n *\n * ```\n * async setFocus(): Promise<void> {\n *   await componentFocusable(this);\n *   this.internalElement?.focus();\n * }\n * ```\n *\n * @param component\n * @returns Promise<void>\n */\nexport async function componentFocusable(component: LoadableComponent): Promise<void> {\n  await componentLoaded(component);\n\n  if (!isBrowser()) {\n    return;\n  }\n\n  forceUpdate(component);\n  return new Promise((resolve) => requestAnimationFrame(() => resolve()));\n}\n","import { readTask } from \"@stencil/core\";\nimport { whenTransitionDone } from \"./dom\";\n\n/**\n * Exported for testing purposes only\n */\nexport const internalReadTask = readTask;\n\n/**\n * Defines interface for components with open/close public emitter.\n * All implementations of this interface must handle the following events: `beforeOpen`, `open`, `beforeClose`, `close`.\n */\nexport interface OpenCloseComponent {\n  /**\n   * The host element.\n   */\n  readonly el: HTMLElement;\n\n  /**\n   * When true, the component opens.\n   */\n  open?: boolean;\n\n  /**\n   * When true, the component is open.\n   */\n  opened?: boolean;\n\n  /**\n   *  Specifies the name of transitionProp.\n   */\n  transitionProp?: string;\n\n  /**\n   * Specifies property on which active transition is watched for.\n   */\n  openTransitionProp: string;\n\n  /**\n   * Specifies element that the transition is allowed to emit on.\n   */\n  transitionEl: HTMLElement;\n\n  /**\n   * Defines method for `beforeOpen` event handler.\n   */\n  onBeforeOpen: () => void;\n\n  /**\n   * Defines method for `open` event handler:\n   */\n  onOpen: () => void;\n\n  /**\n   * Defines method for `beforeClose` event handler:\n   */\n  onBeforeClose: () => void;\n\n  /**\n   * Defines method for `close` event handler:\n   */\n  onClose: () => void;\n}\n\nfunction isOpen(component: OpenCloseComponent): boolean {\n  return \"opened\" in component ? component.opened : component.open;\n}\n\n/**\n * Helper to determine globally set transition duration on the given openTransitionProp, which is imported and set in the @Watch(\"open\").\n * Used to emit (before)open/close events both for when the opacity transition is present and when there is none (transition-duration is set to 0).\n *\n * @example\n * import { onToggleOpenCloseComponent, OpenCloseComponent } from \"../../utils/openCloseComponent\";\n *\n * async componentWillLoad() {\n * // When component initially renders, if `open` was set we need to trigger on load as watcher doesn't fire.\n * if (this.open) {\n *    onToggleOpenCloseComponent(this);\n * }\n * @Watch(\"open\")\n * async toggleModal(value: boolean): Promise<void> {\n *    onToggleOpenCloseComponent(this);\n * }\n *\n * @param component - OpenCloseComponent uses `open` prop to emit (before)open/close.\n */\nexport function onToggleOpenCloseComponent(component: OpenCloseComponent): void {\n  internalReadTask((): void => {\n    if (!component.transitionEl) {\n      return;\n    }\n\n    whenTransitionDone(\n      component.transitionEl,\n      component.openTransitionProp,\n      () => {\n        if (isOpen(component)) {\n          component.onBeforeOpen();\n        } else {\n          component.onBeforeClose();\n        }\n      },\n      () => {\n        if (isOpen(component)) {\n          component.onOpen();\n        } else {\n          component.onClose();\n        }\n      },\n    );\n  });\n}\n","export const KindIcons = {\n  brand: \"lightbulb\",\n  danger: \"exclamationMarkTriangle\",\n  info: \"information\",\n  success: \"checkCircle\",\n  warning: \"exclamationMarkTriangle\",\n} as const;\n","import { getAssetPath } from \"@stencil/core\";\nimport { getSupportedLocale, LocalizedComponent } from \"./locale\";\nimport { isBrowser } from \"./browser\";\n\nexport type MessageBundle = Record<string, string>;\n\nexport const componentLangToMessageBundleCache: Record<string, Promise<MessageBundle>> = {};\n\nasync function getMessageBundle(lang: string, component: string): Promise<MessageBundle> {\n  const key = `${component}_${lang}`;\n\n  if (componentLangToMessageBundleCache[key]) {\n    return componentLangToMessageBundleCache[key];\n  }\n\n  componentLangToMessageBundleCache[key] = fetch(getAssetPath(`./assets/${component}/t9n/messages_${lang}.json`))\n    .then((resp) => {\n      if (!resp.ok) {\n        throwMessageFetchError();\n      }\n      return resp.json();\n    })\n    .catch(() => throwMessageFetchError());\n\n  return componentLangToMessageBundleCache[key];\n}\n\nfunction throwMessageFetchError(): never {\n  throw new Error(\"could not fetch component message bundle\");\n}\n\nfunction mergeMessages(component: T9nComponent): void {\n  component.messages = {\n    ...component.defaultMessages,\n    ...component.messageOverrides,\n  };\n}\n\nfunction noop(): void {\n  // intentionally empty\n}\n\n/**\n * This utility sets up the messages used by the component. It should be awaited in the `componentWillLoad` lifecycle hook.\n *\n * @param component\n */\nexport async function setUpMessages(component: T9nComponent): Promise<void> {\n  component.defaultMessages = await fetchMessages(component, component.effectiveLocale);\n  mergeMessages(component);\n}\n\nasync function fetchMessages(component: T9nComponent, lang: string): Promise<MessageBundle> {\n  if (!isBrowser()) {\n    return {};\n  }\n\n  const { el } = component;\n  const tag = el.tagName.toLowerCase();\n  const componentName = tag.replace(\"calcite-\", \"\");\n\n  return getMessageBundle(getSupportedLocale(lang, \"t9n\"), componentName);\n}\n\n/**\n * This utility must be set up for the component to update its default message bundle if the locale changes.\n *\n * It can be set up in **either** of the following ways:\n *\n * 1. called from `LocalizedComponent`'s `onLocaleChange` method or\n * 2. called from a watcher configured to watch `LocalizedComponent`'s `effectiveLocale` prop\n *\n * @param component\n * @param lang\n */\nexport async function updateMessages(component: T9nComponent, lang: string): Promise<void> {\n  component.defaultMessages = await fetchMessages(component, lang);\n  mergeMessages(component);\n}\n\n/**\n * This utility sets up internals for messages support.\n *\n * It needs to be called in `connectedCallback`\n *\n * **Note**: this must be called after `LocalizedComponent`'s `connectLocalized` method.\n *\n * @param component\n */\nexport function connectMessages(component: T9nComponent): void {\n  component.onMessagesChange = defaultOnMessagesChange;\n}\n\n/**\n * This utility tears down internals for messages support.\n *\n * It needs to be called in `disconnectedCallback`\n *\n * @param component\n */\nexport function disconnectMessages(component: T9nComponent): void {\n  // we set this to noop to for watchers triggered when components are disconnected\n  component.onMessagesChange = noop;\n}\n\n/**\n * This interface enables components to support built-in translation strings.\n *\n * **Notes**:\n *\n * This requires `LocalizedComponent` to be implemented.\n * To avoid unnecessary lookups, composite components should set `lang` on internal t9n components.\n */\nexport interface T9nComponent extends LocalizedComponent {\n  el: HTMLElement;\n\n  /**\n   * This property holds all messages used by the component's rendering.\n   *\n   * This prop should use the `@Prop` decorator. It uses `@Prop` decorator for testing purpose only.\n   */\n  messages: MessageBundle;\n\n  /**\n   * This property holds the component's default messages.\n   */\n  defaultMessages: MessageBundle;\n\n  /**\n   * This property holds all user message overrides.\n   *\n   * This prop should use the `@Prop` decorator.\n   */\n  messageOverrides: Partial<MessageBundle>;\n\n  /**\n   * This private method ensures messages are kept in sync.\n   *\n   * This method should be empty and configured to watch for changes on  `messageOverrides` property.\n   *\n   * @Watch(\"messageOverrides\")\n   * onMessagesChange(): void {\n   *  \\/* wired up by t9n util *\\/\n   * }\n   */\n  onMessagesChange: () => void;\n}\n\nfunction defaultOnMessagesChange(this: T9nComponent): void {\n  mergeMessages(this);\n}\n"],"names":["DURATIONS","slow","medium","fast","SLOTS","CSS","manager","constructor","registeredElements","queueTimeoutId","registerElement","alert","this","includes","queue","unshift","splice","push","updateAlerts","unregisterElement","index","indexOf","active","window","clearTimeout","forEach","openAlertCount","length","setTimeout","Alert","handleKeyBoardFocus","isFocused","handleFocus","handleKeyBoardBlur","isHovered","handleBlur","autoCloseTimeoutId","totalOpenTime","totalHoverTime","openTransitionProp","setTransitionEl","el","transitionEl","closeAlert","open","clearAutoCloseTimeout","actionsEndSlotChangeHandler","event","hasEndActions","slotChangeHasAssignedElement","handleMouseOver","handleMouseLeave","Date","now","initialOpenTime","lastMouseOverBegin","hoverDuration","timeRemaining","autoCloseDuration","NumberStringFormat","handleActiveChange","autoClose","openHandler","onToggleOpenCloseComponent","updateDuration","onMessagesChange","handleQueueChange","connectedCallback","connectLocalized","connectMessages","numberStringFormatter","numberFormatOptions","locale","effectiveLocale","numberingSystem","signDisplay","componentWillLoad","setUpLoadableComponent","setUpMessages","componentDidLoad","setComponentLoaded","disconnectedCallback","disconnectLocalized","disconnectMessages","embedded","render","label","placement","role","hidden","effectiveIcon","setRequestedIcon","KindIcons","icon","kind","hasQueuedAlerts","h","Host","key","toAriaBoolean","class","onPointerEnter","onPointerLeave","ref","renderIcon","onFocusin","onFocusout","name","renderActionsEnd","renderQueueCount","renderCloseButton","messages","close","onClick","closeButton","type","scale","getIconScale","queueNumber","queueText","numberFormatter","format","value","onSlotchange","flipRtl","iconFlipRtl","setFocus","componentFocusable","alertLinkEl","getSlotted","selector","focus","effectiveLocaleChange","updateMessages","numberingSystemChange","onBeforeOpen","calciteAlertBeforeOpen","emit","onOpen","calciteAlertOpen","onBeforeClose","calciteAlertBeforeClose","onClose","calciteAlertClose","componentScale","async","componentOnReady","isStencilEl","Promise","resolve","requestAnimationFrame","resolveMap","WeakMap","promiseMap","component","set","get","componentLoaded","isBrowser","forceUpdate","internalReadTask","readTask","isOpen","opened","whenTransitionDone","brand","danger","info","success","warning","componentLangToMessageBundleCache","throwMessageFetchError","Error","mergeMessages","defaultMessages","messageOverrides","noop","fetchMessages","lang","componentName","tagName","toLowerCase","replace","fetch","getAssetPath","then","resp","ok","json","catch","getMessageBundle","getSupportedLocale","defaultOnMessagesChange"],"sourceRoot":""}