{"version":3,"file":"static/js/6492.c3116b81.chunk.js","mappings":";6GAMA,SAASA,EAAaC,GAClB,OAAOC,EAAqBD,GAEhC,SAASE,EAAUF,GACf,OAAOG,EAAsBH,EAAS,aAE1C,SAASI,EAAWJ,GAChB,OAAOG,EAAsBH,EAAS,cAE1C,SAASK,EAAeL,GACpB,OAAIA,EAAQM,aACDN,EAAQM,aAEfN,EAAQO,sBAAsBC,WACvBR,EAAQO,WAAWE,KAEvBT,EAAQO,WAanB,SAASN,EAAqBD,GAE1B,IAAK,IAAIU,EAAWV,EAASU,EAAUA,EAAWL,EAAeK,GAC7D,GAAMA,aAAoBC,SAGiB,SAAvCC,iBAAiBF,GAAUG,QAC3B,OAAO,KAGf,IAAK,IAAIH,EAAWL,EAAeL,GAAUU,EAAUA,EAAWL,EAAeK,GAAW,CACxF,KAAMA,aAAoBC,SACtB,SAEJ,MAAMG,EAAQF,iBAAiBF,GAE/B,GAAsB,aAAlBI,EAAMD,QAAV,CAGA,GAAuB,WAAnBC,EAAMC,UAA0C,SAAjBD,EAAME,OACrC,OAAON,EAEX,GAAyB,SAArBA,EAASO,QACT,OAAOP,GAGf,OAAO,KAEX,SAASP,EAAsBH,EAASkB,GACpC,IAAIC,EAAQnB,EAAQkB,GAChBE,EAAmBnB,EAAqBD,GAC5C,MAAMqB,EA1CV,SAA4BrB,GACxB,MAAMqB,EAAS,IAAIC,IACnB,IAAIC,EAAevB,EAAQwB,cAC3B,KAAOD,GACHF,EAAOI,IAAIF,GACXA,EAAeA,EAAahB,WACtBgB,EAAahB,WAAWiB,cACxB,KAEV,OAAOH,EAiCQK,CAAmB1B,GAClC,KAAOoB,IAAqBC,EAAOM,IAAIP,EAAiBI,gBACpDL,GAASC,EAAiBF,GAC1BE,EAAmBnB,EAAqBmB,GAE5C,OAAOD","sources":["../node_modules/@esri/calcite-components/dist/esm/composed-offset-position.esm-bbcebb75.js"],"sourcesContent":["/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-components/blob/master/LICENSE.md for details.\n * v1.4.2\n */\n/* eslint-disable @typescript-eslint/ban-types */\nfunction offsetParent(element) {\n    return offsetParentPolyfill(element);\n}\nfunction offsetTop(element) {\n    return offsetTopLeftPolyfill(element, 'offsetTop');\n}\nfunction offsetLeft(element) {\n    return offsetTopLeftPolyfill(element, 'offsetLeft');\n}\nfunction flatTreeParent(element) {\n    if (element.assignedSlot) {\n        return element.assignedSlot;\n    }\n    if (element.parentNode instanceof ShadowRoot) {\n        return element.parentNode.host;\n    }\n    return element.parentNode;\n}\nfunction ancestorTreeScopes(element) {\n    const scopes = new Set();\n    let currentScope = element.getRootNode();\n    while (currentScope) {\n        scopes.add(currentScope);\n        currentScope = currentScope.parentNode\n            ? currentScope.parentNode.getRootNode()\n            : null;\n    }\n    return scopes;\n}\nfunction offsetParentPolyfill(element) {\n    // Do an initial walk to check for display:none ancestors.\n    for (let ancestor = element; ancestor; ancestor = flatTreeParent(ancestor)) {\n        if (!(ancestor instanceof Element)) {\n            continue;\n        }\n        if (getComputedStyle(ancestor).display === 'none') {\n            return null;\n        }\n    }\n    for (let ancestor = flatTreeParent(element); ancestor; ancestor = flatTreeParent(ancestor)) {\n        if (!(ancestor instanceof Element)) {\n            continue;\n        }\n        const style = getComputedStyle(ancestor);\n        // Display:contents nodes aren't in the layout tree so they should be skipped.\n        if (style.display === 'contents') {\n            continue;\n        }\n        if (style.position !== 'static' || style.filter !== 'none') {\n            return ancestor;\n        }\n        if (ancestor.tagName === 'BODY') {\n            return ancestor;\n        }\n    }\n    return null;\n}\nfunction offsetTopLeftPolyfill(element, offsetTopOrLeft) {\n    let value = element[offsetTopOrLeft];\n    let nextOffsetParent = offsetParentPolyfill(element);\n    const scopes = ancestorTreeScopes(element);\n    while (nextOffsetParent && !scopes.has(nextOffsetParent.getRootNode())) {\n        value -= nextOffsetParent[offsetTopOrLeft];\n        nextOffsetParent = offsetParentPolyfill(nextOffsetParent);\n    }\n    return value;\n}\n\nexport { offsetLeft, offsetParent, offsetTop };\n"],"names":["offsetParent","element","offsetParentPolyfill","offsetTop","offsetTopLeftPolyfill","offsetLeft","flatTreeParent","assignedSlot","parentNode","ShadowRoot","host","ancestor","Element","getComputedStyle","display","style","position","filter","tagName","offsetTopOrLeft","value","nextOffsetParent","scopes","Set","currentScope","getRootNode","add","ancestorTreeScopes","has"],"sourceRoot":""}