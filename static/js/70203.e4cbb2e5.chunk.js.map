{"version":3,"file":"static/js/70203.e4cbb2e5.chunk.js","mappings":"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","sources":["../node_modules/@esri/calcite-components/dist/chunks/global.js","../node_modules/@esri/calcite-components/dist/components/calcite-date-picker-month-header/customElement.js","../node_modules/lit-html/src/async-directive.ts","../node_modules/lit-html/src/directives/ref.ts"],"sourcesContent":["/*! All material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\nv3.2.1 */\nconst calciteContainerSizeWidthXxs = { max: \"320px\" };\nconst calciteContainerSizeWidthXs = { max: \"476px\" };\nconst calciteContainerSizeWidthSm = { max: \"768px\" };\nconst calciteContainerSizeWidthMd = { max: \"1152px\" };\nconst calciteSpacingFixedSm = \"8px\";\nconst calciteSpacingFixedMd = \"12px\";\nconst calciteSpacingFixedXl = \"16px\";\nconst calciteSpacingBase = \"2px\";\nconst calciteSpacingXxs = \"0.25rem\";\nconst calciteSpacingSm = \"0.5rem\";\nexport {\n  calciteContainerSizeWidthXs as a,\n  calciteContainerSizeWidthSm as b,\n  calciteContainerSizeWidthXxs as c,\n  calciteContainerSizeWidthMd as d,\n  calciteSpacingXxs as e,\n  calciteSpacingBase as f,\n  calciteSpacingSm as g,\n  calciteSpacingFixedXl as h,\n  calciteSpacingFixedMd as i,\n  calciteSpacingFixedSm as j\n};\n","/*! All material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\nv3.2.1 */\nimport { c as customElement } from \"../../chunks/runtime.js\";\nimport { live } from \"lit-html/directives/live.js\";\nimport { e as calciteSpacingXxs, f as calciteSpacingBase, g as calciteSpacingSm } from \"../../chunks/global.js\";\nimport { html, nothing } from \"lit\";\nimport { createRef, ref } from \"lit-html/directives/ref.js\";\nimport { LitElement, createEvent, safeClassMap } from \"@arcgis/lumina\";\nimport { b as dateFromRange, n as nextMonth, p as prevMonth, g as formatCalendarYear, h as parseCalendarYear, j as getDateInMonth, i as inRange, k as hasSameMonthAndYear, l as getOrder } from \"../../chunks/date.js\";\nimport { l as closestElementCrossShadowBoundary, A as getTextWidth } from \"../../chunks/dom.js\";\nimport { i as isActivationKey } from \"../../chunks/key.js\";\nimport { n as numberStringFormatter } from \"../../chunks/locale.js\";\nimport { css } from \"@lit/reactive-element/css-tag.js\";\nconst styles = css`:host{display:block}.header{display:flex;block-size:100%;align-items:center;justify-content:space-between}.chevron-container{display:flex;align-items:center}:host([scale=s]){block-size:24px;margin:var(--calcite-spacing-xs);margin-inline-start:var(--calcite-spacing-sm)}:host([scale=s]) .chevron-container,:host([scale=s]) .chevron{min-inline-size:24px;block-size:24px}:host([scale=m]){block-size:32px;margin:var(--calcite-spacing-sm);margin-inline-start:var(--calcite-spacing-sm-plus)}:host([scale=m]) .chevron-container,:host([scale=m]) .chevron{min-inline-size:32px;block-size:32px;--calcite-internal-action-padding-block: var(--calcite-spacing-xxs)}:host([scale=l]){block-size:44px;margin:var(--calcite-spacing-xs);margin-inline-start:var(--calcite-spacing-sm)}:host([scale=l]) .chevron-container,:host([scale=l]) .chevron{min-inline-size:44px;block-size:44px;--calcite-internal-action-padding-block: var(--calcite-spacing-sm-plus)}.chevron{box-sizing:content-box;display:flex;block-size:100%;inline-size:100%;flex-grow:0;cursor:pointer;align-items:center;justify-content:center;border-style:none;outline-color:transparent;transition-property:background-color,block-size,border-color,box-shadow,color,inset-block-end,inset-block-start,inset-inline-end,inset-inline-start,inset-size,opacity,outline-color,transform;transition-duration:var(--calcite-animation-timing);transition-timing-function:ease-in-out;--calcite-internal-action-padding-block: 0;--calcite-action-background-color: var(--calcite-date-picker-header-action-background-color);--calcite-action-background-color-hover: var(--calcite-date-picker-header-action-background-color-hover);--calcite-action-background-color-press: var(--calcite-date-picker-header-action-background-color-press);--calcite-action-text-color: var(--calcite-date-picker-header-action-text-color);--calcite-action-text-color-press: var(--calcite-date-picker-header-action-text-color-press)}.chevron:focus{outline:2px solid var(--calcite-color-focus, var(--calcite-ui-focus-color, var(--calcite-color-brand)));outline-offset:calc(-2px*(1 - (2*clamp(0,var(--calcite-offset-invert-focus),1))))}.chevron[aria-disabled=true]{pointer-events:none}.month-year-container{display:flex;block-size:100%;inline-size:100%;flex:1 1 auto;align-items:center;justify-content:flex-start;text-align:center;line-height:1;gap:var(--calcite-spacing-xxs)}.month-year-container.range-calendar{justify-content:center}.year-container{position:relative;display:flex;block-size:100%}.suffix{display:flex;align-items:center}.year,.suffix{margin-inline:var(--calcite-spacing-xxs);font-weight:var(--calcite-font-weight-medium);color:var(--calcite-date-picker-year-text-color, var(--calcite-color-text-1));font-size:var(--calcite-font-size-md);line-height:var(--calcite-font-line-height-fixed-lg)}.year{position:relative;display:inline-block;border-style:none;background-color:transparent;text-align:center;font-family:inherit;outline-color:transparent;inline-size:44px}.year:hover{transition-duration:.1s;transition-timing-function:cubic-bezier(.4,0,.2,1);transition-property:outline-color;outline:2px solid var(--calcite-color-border-2);outline-offset:-2px}.year:focus{outline:2px solid var(--calcite-color-focus, var(--calcite-ui-focus-color, var(--calcite-color-brand)));outline-offset:calc(-2px*(1 - (2*clamp(0,var(--calcite-offset-invert-focus),1))))}.month-select{--calcite-select-internal-border-width: 0;--calcite-select-internal-icon-border-inline-end-width: 0;--calcite-select-spacing-inline: var(--calcite-spacing-xxs);--calcite-select-font-size: var(--calcite-date-picker-month-select-font-size, var(--calcite-font-size-md));--calcite-select-text-color: var(--calcite-date-picker-month-select-text-color, var(--calcite-color-text-1));--calcite-select-icon-color: var(--calcite-date-picker-month-select-icon-color);--calcite-select-icon-color-hover: var(--calcite-date-picker-month-select-icon-color-hover);--calcite-internal-select-spacing-block: var(--calcite-spacing-xxs);--calcite-internal-select-icon-container-padding-inline: var(--calcite-spacing-xxs);--calcite-internal-select-line-height: var(--calcite-font-line-height-fixed-lg);--calcite-internal-select-font-weight: var(--calcite-font-weight-medium)}:host([scale=s]) .month-year-container .month-select{--calcite-select-spacing-inline: var(--calcite-spacing-base);--calcite-select-font-size: var(--calcite-date-picker-month-select-font-size, var(--calcite-font-size));--calcite-internal-select-spacing-block: var(--calcite-spacing-base);--calcite-internal-select-icon-container-padding-inline: var(--calcite-spacing-base);--calcite-internal-select-block-size: 24px;--calcite-internal-select-line-height: var(--calcite-font-line-height-fixed-base)}:host([scale=s]) .month-year-container .year{inline-size:40px}:host([scale=s]) .month-year-container .year,:host([scale=s]) .month-year-container .suffix{font-size:var(--calcite-font-size);line-height:var(--calcite-font-line-height-fixed-base)}:host([scale=l]) .month-year-container .month-select{--calcite-select-spacing-inline: var(--calcite-spacing-sm);--calcite-select-font-size: var(--calcite-date-picker-month-select-font-size, var(--calcite-font-size-lg));--calcite-internal-select-spacing-block: var(--calcite-spacing-sm);--calcite-internal-select-icon-container-padding-inline: var(--calcite-spacing-sm);--calcite-internal-select-block-size: 44px;--calcite-internal-select-line-height: var(--calcite-font-line-height-fixed-xl)}:host([scale=l]) .month-year-container .year{inline-size:48px}:host([scale=l]) .month-year-container .year,:host([scale=l]) .month-year-container .suffix{font-size:var(--calcite-font-size-lg);line-height:var(--calcite-font-line-height-fixed-xl)}:host([hidden]){display:none}[hidden]{display:none}`;\nconst CSS = {\n  header: \"header\",\n  chevron: \"chevron\",\n  chevronContainer: \"chevron-container\",\n  monthYearContainer: \"month-year-container\",\n  monthPicker: \"month-select\",\n  rangeCalendar: \"range-calendar\",\n  suffix: \"suffix\",\n  yearContainer: \"year-container\"\n};\nconst ICON = {\n  chevronLeft: \"chevron-left\",\n  chevronRight: \"chevron-right\"\n};\nconst ICON_WIDTH_M = 16;\nclass DatePickerMonthHeader extends LitElement {\n  constructor() {\n    super(...arguments);\n    this.monthPickerEl = createRef();\n    this.yearInputEl = createRef();\n    this.calciteInternalDatePickerMonthHeaderSelectChange = createEvent({ cancelable: false });\n  }\n  static {\n    this.properties = { nextMonthDate: [16, {}, { state: true }], prevMonthDate: [16, {}, { state: true }], activeDate: [0, {}, { attribute: false }], headingLevel: [9, {}, { type: Number }], localeData: [0, {}, { attribute: false }], max: [0, {}, { attribute: false }], messages: [0, {}, { attribute: false }], min: [0, {}, { attribute: false }], monthStyle: 1, position: 1, scale: [3, {}, { reflect: true }], selectedDate: [0, {}, { attribute: false }] };\n  }\n  static {\n    this.styles = styles;\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    this.setNextPrevMonthDates();\n  }\n  load() {\n    this.parentDatePickerEl = closestElementCrossShadowBoundary(this.el, \"calcite-date-picker\");\n  }\n  willUpdate(changes) {\n    if (this.hasUpdated && (changes.has(\"activeDate\") || changes.has(\"localeData\"))) {\n      this.setYearSelectMenuWidth();\n    }\n    if (this.hasUpdated && changes.has(\"scale\")) {\n      this.setYearSelectWidthOffset();\n    }\n    if (changes.has(\"min\") || changes.has(\"max\") || changes.has(\"activeDate\")) {\n      this.setNextPrevMonthDates();\n    }\n  }\n  loaded() {\n    this.setYearSelectWidthOffset();\n  }\n  setNextPrevMonthDates() {\n    if (!this.activeDate) {\n      return;\n    }\n    this.nextMonthDate = dateFromRange(nextMonth(this.activeDate), this.min, this.max);\n    this.prevMonthDate = dateFromRange(prevMonth(this.activeDate), this.min, this.max);\n  }\n  onYearKey(event) {\n    const localizedYear = this.parseCalendarYear(event.target.value);\n    switch (event.key) {\n      case \"ArrowDown\":\n        event.preventDefault();\n        this.setYear({ localizedYear, offset: -1 });\n        break;\n      case \"ArrowUp\":\n        event.preventDefault();\n        this.setYear({ localizedYear, offset: 1 });\n        break;\n    }\n  }\n  formatCalendarYear(year) {\n    return numberStringFormatter.localize(`${formatCalendarYear(year, this.localeData)}`);\n  }\n  parseCalendarYear(year) {\n    return numberStringFormatter.localize(`${parseCalendarYear(Number(numberStringFormatter.delocalize(year)), this.localeData)}`);\n  }\n  onYearChange(event) {\n    this.setYear({\n      localizedYear: this.parseCalendarYear(event.target.value)\n    });\n  }\n  onYearInput(event) {\n    this.setYear({\n      localizedYear: this.parseCalendarYear(event.target.value),\n      commit: false\n    });\n  }\n  prevMonthClick(event) {\n    this.handleArrowClick(event, this.prevMonthDate);\n  }\n  prevMonthKeydown(event) {\n    if (isActivationKey(event.key)) {\n      this.prevMonthClick(event);\n    }\n  }\n  nextMonthClick(event) {\n    this.handleArrowClick(event, this.nextMonthDate);\n  }\n  nextMonthKeydown(event) {\n    if (isActivationKey(event.key)) {\n      this.nextMonthClick(event);\n    }\n  }\n  async handleArrowClick(event, date) {\n    event.preventDefault();\n    await this.handlePenultimateValidMonth(event);\n    this.calciteInternalDatePickerMonthHeaderSelectChange.emit(date);\n  }\n  handleMonthChange(event) {\n    const target = event.target;\n    const { abbreviated, wide } = this.localeData.months;\n    const localeMonths = this.monthStyle === \"wide\" ? wide : abbreviated;\n    const monthIndex = localeMonths.indexOf(target.value);\n    let newDate = getDateInMonth(this.activeDate, monthIndex);\n    if (!inRange(newDate, this.min, this.max)) {\n      newDate = dateFromRange(newDate, this.min, this.max);\n    }\n    this.calciteInternalDatePickerMonthHeaderSelectChange.emit(newDate);\n    this.setYearSelectMenuWidth();\n  }\n  getInRangeDate({ localizedYear, offset = 0 }) {\n    const { min, max, activeDate } = this;\n    const parsedYear = Number(numberStringFormatter.delocalize(localizedYear));\n    const length = parsedYear.toString().length;\n    const year = isNaN(parsedYear) ? false : parsedYear + offset;\n    const inRange2 = year && (!min || min.getFullYear() <= year) && (!max || max.getFullYear() >= year);\n    if (year && inRange2 && length === localizedYear.length) {\n      const nextDate = new Date(activeDate);\n      nextDate.setFullYear(year);\n      return dateFromRange(nextDate, min, max);\n    }\n  }\n  setYear({ localizedYear, commit = true, offset = 0 }) {\n    const { yearInputEl: { value: yearInputEl }, activeDate } = this;\n    const inRangeDate = this.getInRangeDate({ localizedYear, offset });\n    if (inRangeDate) {\n      this.calciteInternalDatePickerMonthHeaderSelectChange.emit(inRangeDate);\n    }\n    if (commit) {\n      yearInputEl.value = this.formatCalendarYear((inRangeDate || activeDate).getFullYear());\n    }\n  }\n  setYearSelectWidthOffset() {\n    this.yearSelectWidthOffset = ICON_WIDTH_M + 3 * parseInt(this.getYearSelectPadding());\n    this.setYearSelectMenuWidth();\n  }\n  setYearSelectMenuWidth() {\n    const el = this.monthPickerEl.value;\n    if (!el) {\n      return;\n    }\n    requestAnimationFrame(() => {\n      const computedStyle = getComputedStyle(el);\n      const shorthandFont = `${computedStyle.fontStyle} ${computedStyle.fontVariant} ${computedStyle.fontWeight} ${computedStyle.fontSize}/${computedStyle.lineHeight} ${computedStyle.fontFamily}`;\n      const localeMonths = this.localeData.months[this.monthStyle];\n      const activeLocaleMonth = localeMonths[this.activeDate.getMonth()];\n      const selectedOptionWidth = Math.ceil(getTextWidth(activeLocaleMonth, shorthandFont));\n      el.style.width = `${selectedOptionWidth + this.yearSelectWidthOffset}px`;\n    });\n  }\n  isMonthInRange(index) {\n    const newActiveDate = getDateInMonth(this.activeDate, index);\n    if (!this.min && !this.max || inRange(newActiveDate, this.min, this.max)) {\n      return true;\n    }\n    return hasSameMonthAndYear(newActiveDate, this.max) || hasSameMonthAndYear(newActiveDate, this.min);\n  }\n  async handlePenultimateValidMonth(event) {\n    const target = event.target;\n    const direction = target.getAttribute(\"data-direction\");\n    const isDirectionLeft = direction === \"left\";\n    let isTargetLastValidMonth;\n    if (isDirectionLeft && this.min) {\n      const prevMonthDate = dateFromRange(prevMonth(this.activeDate), this.min, this.max);\n      isTargetLastValidMonth = hasSameMonthAndYear(prevMonthDate, this.min);\n    } else if (this.max) {\n      const nextMonthDate = dateFromRange(nextMonth(this.activeDate), this.min, this.max);\n      isTargetLastValidMonth = hasSameMonthAndYear(nextMonthDate, this.max);\n    }\n    if (isTargetLastValidMonth) {\n      if (!this.position) {\n        const target2 = isDirectionLeft ? this.nextMonthAction : this.prevMonthAction;\n        target2.disabled = false;\n        await target2.setFocus();\n      } else {\n        this.yearInputEl.value.focus();\n      }\n    }\n  }\n  getPx(value) {\n    const num = Number(value.replace(/[rem|px]/g, \"\"));\n    const base = 16;\n    if (value.includes(\"rem\")) {\n      return `${num * base}px`;\n    }\n    return `${num}px`;\n  }\n  getYearSelectPadding() {\n    let padding;\n    switch (this.scale) {\n      case \"l\":\n        padding = calciteSpacingSm;\n        break;\n      case \"s\":\n        padding = calciteSpacingBase;\n        break;\n      default:\n        padding = calciteSpacingXxs;\n        break;\n    }\n    return this.getPx(padding);\n  }\n  render() {\n    return html`<div class=${safeClassMap(CSS.header)}>${this.renderContent()}</div>`;\n  }\n  renderContent() {\n    const { localeData, activeDate } = this;\n    if (!activeDate || !localeData) {\n      return null;\n    }\n    if (this.parentDatePickerEl) {\n      const { numberingSystem, lang: locale } = this.parentDatePickerEl;\n      numberStringFormatter.numberFormatOptions = {\n        useGrouping: false,\n        ...numberingSystem && { numberingSystem },\n        ...locale && { locale }\n      };\n    }\n    const order = getOrder(localeData.unitOrder);\n    const reverse = order.indexOf(\"y\") < order.indexOf(\"m\");\n    return html`${this.position && html`<div class=${safeClassMap({ [CSS.chevronContainer]: true })}>${this.position === \"start\" && this.renderChevron(\"left\") || \"\"}</div>` || \"\"}<div class=${safeClassMap({\n      [CSS.monthYearContainer]: true,\n      [CSS.rangeCalendar]: !!this.position\n    })}>${this.renderMonthYearContainer(reverse)}</div>${!this.position && html`<div class=${safeClassMap({ [CSS.chevronContainer]: true })}>${this.renderChevron(\"left\")}</div>` || \"\"}<div class=${safeClassMap({ [CSS.chevronContainer]: true })}>${this.position !== \"start\" && this.renderChevron(\"right\") || \"\"}</div>`;\n  }\n  renderMonthYearContainer(reverse) {\n    const content = reverse ? [this.renderYearInput(), this.renderMonthPicker()] : [this.renderMonthPicker(), this.renderYearInput()];\n    return content;\n  }\n  renderMonthPicker() {\n    const activeMonth = this.activeDate.getMonth();\n    const monthData = this.localeData.months[this.monthStyle];\n    return html`<calcite-select class=${safeClassMap(CSS.monthPicker)} .label=${this.messages.monthMenu} @calciteSelectChange=${this.handleMonthChange} width=auto ${ref(this.monthPickerEl)}>${monthData.map((month, index) => {\n      return html`<calcite-option .disabled=${!this.isMonthInRange(index)} .selected=${index === activeMonth} .value=${month}>${month}</calcite-option>`;\n    })}</calcite-select>`;\n  }\n  renderYearInput() {\n    const suffix = this.localeData.year?.suffix;\n    const localizedYear = this.formatCalendarYear(this.activeDate.getFullYear());\n    return html`<span class=${safeClassMap(CSS.yearContainer)}><input .ariaLabel=${this.messages.year} class=${safeClassMap({\n      year: true\n    })} inputmode=numeric maxlength=4 minlength=1 @change=${this.onYearChange} @input=${this.onYearInput} @keydown=${this.onYearKey} pattern=\\\\d* type=text .value=${live(localizedYear ?? \"\")} ${ref(this.yearInputEl)}>${suffix && html`<span class=${safeClassMap(CSS.suffix)}>${suffix}</span>` || \"\"}</span>`;\n  }\n  renderChevron(direction) {\n    const isDirectionRight = direction === \"right\";\n    const isDisabled = hasSameMonthAndYear(isDirectionRight ? this.nextMonthDate : this.prevMonthDate, this.activeDate) || !inRange(this.activeDate, this.min, this.max);\n    return html`<calcite-action alignment=center .ariaDisabled=${isDisabled} .ariaLabel=${isDirectionRight ? this.messages.nextMonth : this.messages.prevMonth} class=${safeClassMap(CSS.chevron)} compact data-direction=${direction ?? nothing} .disabled=${isDisabled} .icon=${isDirectionRight ? ICON.chevronRight : ICON.chevronLeft} icon-flip-rtl @click=${isDirectionRight ? this.nextMonthClick : this.prevMonthClick} @keydown=${isDirectionRight ? this.nextMonthKeydown : this.prevMonthKeydown} role=button .scale=${this.scale === \"l\" ? \"l\" : \"m\"} .text=${isDirectionRight ? this.messages.nextMonth : this.messages.prevMonth} ${ref((el) => isDirectionRight ? this.nextMonthAction = el : this.prevMonthAction = el)}></calcite-action>`;\n  }\n}\ncustomElement(\"calcite-date-picker-month-header\", DatePickerMonthHeader);\nexport {\n  DatePickerMonthHeader\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * Overview:\n *\n * This module is designed to add support for an async `setValue` API and\n * `disconnected` callback to directives with the least impact on the core\n * runtime or payload when that feature is not used.\n *\n * The strategy is to introduce a `AsyncDirective` subclass of\n * `Directive` that climbs the \"parent\" tree in its constructor to note which\n * branches of lit-html's \"logical tree\" of data structures contain such\n * directives and thus need to be crawled when a subtree is being cleared (or\n * manually disconnected) in order to run the `disconnected` callback.\n *\n * The \"nodes\" of the logical tree include Parts, TemplateInstances (for when a\n * TemplateResult is committed to a value of a ChildPart), and Directives; these\n * all implement a common interface called `DisconnectableChild`. Each has a\n * `_$parent` reference which is set during construction in the core code, and a\n * `_$disconnectableChildren` field which is initially undefined.\n *\n * The sparse tree created by means of the `AsyncDirective` constructor\n * crawling up the `_$parent` tree and placing a `_$disconnectableChildren` Set\n * on each parent that includes each child that contains a\n * `AsyncDirective` directly or transitively via its children. In order to\n * notify connection state changes and disconnect (or reconnect) a tree, the\n * `_$notifyConnectionChanged` API is patched onto ChildParts as a directive\n * climbs the parent tree, which is called by the core when clearing a part if\n * it exists. When called, that method iterates over the sparse tree of\n * Set<DisconnectableChildren> built up by AsyncDirectives, and calls\n * `_$notifyDirectiveConnectionChanged` on any directives that are encountered\n * in that tree, running the required callbacks.\n *\n * A given \"logical tree\" of lit-html data-structures might look like this:\n *\n *  ChildPart(N1) _$dC=[D2,T3]\n *   ._directive\n *     AsyncDirective(D2)\n *   ._value // user value was TemplateResult\n *     TemplateInstance(T3) _$dC=[A4,A6,N10,N12]\n *      ._$parts[]\n *        AttributePart(A4) _$dC=[D5]\n *         ._directives[]\n *           AsyncDirective(D5)\n *        AttributePart(A6) _$dC=[D7,D8]\n *         ._directives[]\n *           AsyncDirective(D7)\n *           Directive(D8) _$dC=[D9]\n *            ._directive\n *              AsyncDirective(D9)\n *        ChildPart(N10) _$dC=[D11]\n *         ._directive\n *           AsyncDirective(D11)\n *         ._value\n *           string\n *        ChildPart(N12) _$dC=[D13,N14,N16]\n *         ._directive\n *           AsyncDirective(D13)\n *         ._value // user value was iterable\n *           Array<ChildPart>\n *             ChildPart(N14) _$dC=[D15]\n *              ._value\n *                string\n *             ChildPart(N16) _$dC=[D17,T18]\n *              ._directive\n *                AsyncDirective(D17)\n *              ._value // user value was TemplateResult\n *                TemplateInstance(T18) _$dC=[A19,A21,N25]\n *                 ._$parts[]\n *                   AttributePart(A19) _$dC=[D20]\n *                    ._directives[]\n *                      AsyncDirective(D20)\n *                   AttributePart(A21) _$dC=[22,23]\n *                    ._directives[]\n *                      AsyncDirective(D22)\n *                      Directive(D23) _$dC=[D24]\n *                       ._directive\n *                         AsyncDirective(D24)\n *                   ChildPart(N25) _$dC=[D26]\n *                    ._directive\n *                      AsyncDirective(D26)\n *                    ._value\n *                      string\n *\n * Example 1: The directive in ChildPart(N12) updates and returns `nothing`. The\n * ChildPart will _clear() itself, and so we need to disconnect the \"value\" of\n * the ChildPart (but not its directive). In this case, when `_clear()` calls\n * `_$notifyConnectionChanged()`, we don't iterate all of the\n * _$disconnectableChildren, rather we do a value-specific disconnection: i.e.\n * since the _value was an Array<ChildPart> (because an iterable had been\n * committed), we iterate the array of ChildParts (N14, N16) and run\n * `setConnected` on them (which does recurse down the full tree of\n * `_$disconnectableChildren` below it, and also removes N14 and N16 from N12's\n * `_$disconnectableChildren`). Once the values have been disconnected, we then\n * check whether the ChildPart(N12)'s list of `_$disconnectableChildren` is empty\n * (and would remove it from its parent TemplateInstance(T3) if so), but since\n * it would still contain its directive D13, it stays in the disconnectable\n * tree.\n *\n * Example 2: In the course of Example 1, `setConnected` will reach\n * ChildPart(N16); in this case the entire part is being disconnected, so we\n * simply iterate all of N16's `_$disconnectableChildren` (D17,T18) and\n * recursively run `setConnected` on them. Note that we only remove children\n * from `_$disconnectableChildren` for the top-level values being disconnected\n * on a clear; doing this bookkeeping lower in the tree is wasteful since it's\n * all being thrown away.\n *\n * Example 3: If the LitElement containing the entire tree above becomes\n * disconnected, it will run `childPart.setConnected()` (which calls\n * `childPart._$notifyConnectionChanged()` if it exists); in this case, we\n * recursively run `setConnected()` over the entire tree, without removing any\n * children from `_$disconnectableChildren`, since this tree is required to\n * re-connect the tree, which does the same operation, simply passing\n * `isConnected: true` down the tree, signaling which callback to run.\n */\n\nimport {AttributePart, ChildPart, Disconnectable, Part} from './lit-html.js';\nimport {isSingleExpression} from './directive-helpers.js';\nimport {Directive, PartInfo, PartType} from './directive.js';\nexport * from './directive.js';\n\nconst DEV_MODE = true;\n\n/**\n * Recursively walks down the tree of Parts/TemplateInstances/Directives to set\n * the connected state of directives and run `disconnected`/ `reconnected`\n * callbacks.\n *\n * @return True if there were children to disconnect; false otherwise\n */\nconst notifyChildrenConnectedChanged = (\n  parent: Disconnectable,\n  isConnected: boolean\n): boolean => {\n  const children = parent._$disconnectableChildren;\n  if (children === undefined) {\n    return false;\n  }\n  for (const obj of children) {\n    // The existence of `_$notifyDirectiveConnectionChanged` is used as a \"brand\" to\n    // disambiguate AsyncDirectives from other DisconnectableChildren\n    // (as opposed to using an instanceof check to know when to call it); the\n    // redundancy of \"Directive\" in the API name is to avoid conflicting with\n    // `_$notifyConnectionChanged`, which exists `ChildParts` which are also in\n    // this list\n    // Disconnect Directive (and any nested directives contained within)\n    // This property needs to remain unminified.\n    (obj as AsyncDirective)['_$notifyDirectiveConnectionChanged']?.(\n      isConnected,\n      false\n    );\n    // Disconnect Part/TemplateInstance\n    notifyChildrenConnectedChanged(obj, isConnected);\n  }\n  return true;\n};\n\n/**\n * Removes the given child from its parent list of disconnectable children, and\n * if the parent list becomes empty as a result, removes the parent from its\n * parent, and so forth up the tree when that causes subsequent parent lists to\n * become empty.\n */\nconst removeDisconnectableFromParent = (obj: Disconnectable) => {\n  let parent, children;\n  do {\n    if ((parent = obj._$parent) === undefined) {\n      break;\n    }\n    children = parent._$disconnectableChildren!;\n    children.delete(obj);\n    obj = parent;\n  } while (children?.size === 0);\n};\n\nconst addDisconnectableToParent = (obj: Disconnectable) => {\n  // Climb the parent tree, creating a sparse tree of children needing\n  // disconnection\n  for (let parent; (parent = obj._$parent); obj = parent) {\n    let children = parent._$disconnectableChildren;\n    if (children === undefined) {\n      parent._$disconnectableChildren = children = new Set();\n    } else if (children.has(obj)) {\n      // Once we've reached a parent that already contains this child, we\n      // can short-circuit\n      break;\n    }\n    children.add(obj);\n    installDisconnectAPI(parent);\n  }\n};\n\n/**\n * Changes the parent reference of the ChildPart, and updates the sparse tree of\n * Disconnectable children accordingly.\n *\n * Note, this method will be patched onto ChildPart instances and called from\n * the core code when parts are moved between different parents.\n */\nfunction reparentDisconnectables(this: ChildPart, newParent: Disconnectable) {\n  if (this._$disconnectableChildren !== undefined) {\n    removeDisconnectableFromParent(this);\n    this._$parent = newParent;\n    addDisconnectableToParent(this);\n  } else {\n    this._$parent = newParent;\n  }\n}\n\n/**\n * Sets the connected state on any directives contained within the committed\n * value of this part (i.e. within a TemplateInstance or iterable of\n * ChildParts) and runs their `disconnected`/`reconnected`s, as well as within\n * any directives stored on the ChildPart (when `valueOnly` is false).\n *\n * `isClearingValue` should be passed as `true` on a top-level part that is\n * clearing itself, and not as a result of recursively disconnecting directives\n * as part of a `clear` operation higher up the tree. This both ensures that any\n * directive on this ChildPart that produced a value that caused the clear\n * operation is not disconnected, and also serves as a performance optimization\n * to avoid needless bookkeeping when a subtree is going away; when clearing a\n * subtree, only the top-most part need to remove itself from the parent.\n *\n * `fromPartIndex` is passed only in the case of a partial `_clear` running as a\n * result of truncating an iterable.\n *\n * Note, this method will be patched onto ChildPart instances and called from the\n * core code when parts are cleared or the connection state is changed by the\n * user.\n */\nfunction notifyChildPartConnectedChanged(\n  this: ChildPart,\n  isConnected: boolean,\n  isClearingValue = false,\n  fromPartIndex = 0\n) {\n  const value = this._$committedValue;\n  const children = this._$disconnectableChildren;\n  if (children === undefined || children.size === 0) {\n    return;\n  }\n  if (isClearingValue) {\n    if (Array.isArray(value)) {\n      // Iterable case: Any ChildParts created by the iterable should be\n      // disconnected and removed from this ChildPart's disconnectable\n      // children (starting at `fromPartIndex` in the case of truncation)\n      for (let i = fromPartIndex; i < value.length; i++) {\n        notifyChildrenConnectedChanged(value[i], false);\n        removeDisconnectableFromParent(value[i]);\n      }\n    } else if (value != null) {\n      // TemplateInstance case: If the value has disconnectable children (will\n      // only be in the case that it is a TemplateInstance), we disconnect it\n      // and remove it from this ChildPart's disconnectable children\n      notifyChildrenConnectedChanged(value as Disconnectable, false);\n      removeDisconnectableFromParent(value as Disconnectable);\n    }\n  } else {\n    notifyChildrenConnectedChanged(this, isConnected);\n  }\n}\n\n/**\n * Patches disconnection API onto ChildParts.\n */\nconst installDisconnectAPI = (obj: Disconnectable) => {\n  if ((obj as ChildPart).type == PartType.CHILD) {\n    (obj as ChildPart)._$notifyConnectionChanged ??=\n      notifyChildPartConnectedChanged;\n    (obj as ChildPart)._$reparentDisconnectables ??= reparentDisconnectables;\n  }\n};\n\n/**\n * An abstract `Directive` base class whose `disconnected` method will be\n * called when the part containing the directive is cleared as a result of\n * re-rendering, or when the user calls `part.setConnected(false)` on\n * a part that was previously rendered containing the directive (as happens\n * when e.g. a LitElement disconnects from the DOM).\n *\n * If `part.setConnected(true)` is subsequently called on a\n * containing part, the directive's `reconnected` method will be called prior\n * to its next `update`/`render` callbacks. When implementing `disconnected`,\n * `reconnected` should also be implemented to be compatible with reconnection.\n *\n * Note that updates may occur while the directive is disconnected. As such,\n * directives should generally check the `this.isConnected` flag during\n * render/update to determine whether it is safe to subscribe to resources\n * that may prevent garbage collection.\n */\nexport abstract class AsyncDirective extends Directive {\n  // As opposed to other Disconnectables, AsyncDirectives always get notified\n  // when the RootPart connection changes, so the public `isConnected`\n  // is a locally stored variable initialized via its part's getter and synced\n  // via `_$notifyDirectiveConnectionChanged`. This is cheaper than using\n  // the _$isConnected getter, which has to look back up the tree each time.\n  /**\n   * The connection state for this Directive.\n   */\n  isConnected!: boolean;\n\n  // @internal\n  override _$disconnectableChildren?: Set<Disconnectable> = undefined;\n  /**\n   * Initialize the part with internal fields\n   * @param part\n   * @param parent\n   * @param attributeIndex\n   */\n  override _$initialize(\n    part: Part,\n    parent: Disconnectable,\n    attributeIndex: number | undefined\n  ) {\n    super._$initialize(part, parent, attributeIndex);\n    addDisconnectableToParent(this);\n    this.isConnected = part._$isConnected;\n  }\n  // This property needs to remain unminified.\n  /**\n   * Called from the core code when a directive is going away from a part (in\n   * which case `shouldRemoveFromParent` should be true), and from the\n   * `setChildrenConnected` helper function when recursively changing the\n   * connection state of a tree (in which case `shouldRemoveFromParent` should\n   * be false).\n   *\n   * @param isConnected\n   * @param isClearingDirective - True when the directive itself is being\n   *     removed; false when the tree is being disconnected\n   * @internal\n   */\n  override ['_$notifyDirectiveConnectionChanged'](\n    isConnected: boolean,\n    isClearingDirective = true\n  ) {\n    if (isConnected !== this.isConnected) {\n      this.isConnected = isConnected;\n      if (isConnected) {\n        this.reconnected?.();\n      } else {\n        this.disconnected?.();\n      }\n    }\n    if (isClearingDirective) {\n      notifyChildrenConnectedChanged(this, isConnected);\n      removeDisconnectableFromParent(this);\n    }\n  }\n\n  /**\n   * Sets the value of the directive's Part outside the normal `update`/`render`\n   * lifecycle of a directive.\n   *\n   * This method should not be called synchronously from a directive's `update`\n   * or `render`.\n   *\n   * @param directive The directive to update\n   * @param value The value to set\n   */\n  setValue(value: unknown) {\n    if (isSingleExpression(this.__part as unknown as PartInfo)) {\n      this.__part._$setValue(value, this);\n    } else {\n      // this.__attributeIndex will be defined in this case, but\n      // assert it in dev mode\n      if (DEV_MODE && this.__attributeIndex === undefined) {\n        throw new Error(`Expected this.__attributeIndex to be a number`);\n      }\n      const newValues = [...(this.__part._$committedValue as Array<unknown>)];\n      newValues[this.__attributeIndex!] = value;\n      (this.__part as AttributePart)._$setValue(newValues, this, 0);\n    }\n  }\n\n  /**\n   * User callbacks for implementing logic to release any resources/subscriptions\n   * that may have been retained by this directive. Since directives may also be\n   * re-connected, `reconnected` should also be implemented to restore the\n   * working state of the directive prior to the next render.\n   */\n  protected disconnected() {}\n  protected reconnected() {}\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport {nothing, ElementPart} from '../lit-html.js';\nimport {directive, AsyncDirective} from '../async-directive.js';\n\n/**\n * Creates a new Ref object, which is container for a reference to an element.\n */\nexport const createRef = <T = Element>() => new Ref<T>();\n\n/**\n * An object that holds a ref value.\n */\nclass Ref<T = Element> {\n  /**\n   * The current Element value of the ref, or else `undefined` if the ref is no\n   * longer rendered.\n   */\n  readonly value?: T;\n}\n\nexport type {Ref};\n\ninterface RefInternal {\n  value: Element | undefined;\n}\n\n// When callbacks are used for refs, this map tracks the last value the callback\n// was called with, for ensuring a directive doesn't clear the ref if the ref\n// has already been rendered to a new spot. It is double-keyed on both the\n// context (`options.host`) and the callback, since we auto-bind class methods\n// to `options.host`.\nconst lastElementForContextAndCallback = new WeakMap<\n  object,\n  WeakMap<Function, Element | undefined>\n>();\n\nexport type RefOrCallback<T = Element> = Ref<T> | ((el: T | undefined) => void);\n\nclass RefDirective extends AsyncDirective {\n  private _element?: Element;\n  private _ref?: RefOrCallback;\n  private _context?: object;\n\n  render(_ref?: RefOrCallback) {\n    return nothing;\n  }\n\n  override update(part: ElementPart, [ref]: Parameters<this['render']>) {\n    const refChanged = ref !== this._ref;\n    if (refChanged && this._ref !== undefined) {\n      // The ref passed to the directive has changed;\n      // unset the previous ref's value\n      this._updateRefValue(undefined);\n    }\n    if (refChanged || this._lastElementForRef !== this._element) {\n      // We either got a new ref or this is the first render;\n      // store the ref/element & update the ref value\n      this._ref = ref;\n      this._context = part.options?.host;\n      this._updateRefValue((this._element = part.element));\n    }\n    return nothing;\n  }\n\n  private _updateRefValue(element: Element | undefined) {\n    if (!this.isConnected) {\n      element = undefined;\n    }\n    if (typeof this._ref === 'function') {\n      // If the current ref was called with a previous value, call with\n      // `undefined`; We do this to ensure callbacks are called in a consistent\n      // way regardless of whether a ref might be moving up in the tree (in\n      // which case it would otherwise be called with the new value before the\n      // previous one unsets it) and down in the tree (where it would be unset\n      // before being set). Note that element lookup is keyed by\n      // both the context and the callback, since we allow passing unbound\n      // functions that are called on options.host, and we want to treat\n      // these as unique \"instances\" of a function.\n      const context = this._context ?? globalThis;\n      let lastElementForCallback =\n        lastElementForContextAndCallback.get(context);\n      if (lastElementForCallback === undefined) {\n        lastElementForCallback = new WeakMap();\n        lastElementForContextAndCallback.set(context, lastElementForCallback);\n      }\n      if (lastElementForCallback.get(this._ref) !== undefined) {\n        this._ref.call(this._context, undefined);\n      }\n      lastElementForCallback.set(this._ref, element);\n      // Call the ref with the new element value\n      if (element !== undefined) {\n        this._ref.call(this._context, element);\n      }\n    } else {\n      (this._ref as RefInternal)!.value = element;\n    }\n  }\n\n  private get _lastElementForRef() {\n    return typeof this._ref === 'function'\n      ? lastElementForContextAndCallback\n          .get(this._context ?? globalThis)\n          ?.get(this._ref)\n      : this._ref?.value;\n  }\n\n  override disconnected() {\n    // Only clear the box if our element is still the one in it (i.e. another\n    // directive instance hasn't rendered its element to it before us); that\n    // only happens in the event of the directive being cleared (not via manual\n    // disconnection)\n    if (this._lastElementForRef === this._element) {\n      this._updateRefValue(undefined);\n    }\n  }\n\n  override reconnected() {\n    // If we were manually disconnected, we can safely put our element back in\n    // the box, since no rendering could have occurred to change its state\n    this._updateRefValue(this._element);\n  }\n}\n\n/**\n * Sets the value of a Ref object or calls a ref callback with the element it's\n * bound to.\n *\n * A Ref object acts as a container for a reference to an element. A ref\n * callback is a function that takes an element as its only argument.\n *\n * The ref directive sets the value of the Ref object or calls the ref callback\n * during rendering, if the referenced element changed.\n *\n * Note: If a ref callback is rendered to a different element position or is\n * removed in a subsequent render, it will first be called with `undefined`,\n * followed by another call with the new element it was rendered to (if any).\n *\n * ```js\n * // Using Ref object\n * const inputRef = createRef();\n * render(html`<input ${ref(inputRef)}>`, container);\n * inputRef.value.focus();\n *\n * // Using callback\n * const callback = (inputElement) => inputElement.focus();\n * render(html`<input ${ref(callback)}>`, container);\n * ```\n */\nexport const ref = directive(RefDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {RefDirective};\n"],"names":["calciteContainerSizeWidthXxs","max","calciteContainerSizeWidthXs","calciteContainerSizeWidthSm","calciteContainerSizeWidthMd","calciteSpacingFixedSm","calciteSpacingFixedMd","calciteSpacingFixedXl","calciteSpacingBase","calciteSpacingXxs","calciteSpacingSm","styles","css","CSS","ICON","DatePickerMonthHeader","LitElement","constructor","super","arguments","this","monthPickerEl","createRef","yearInputEl","calciteInternalDatePickerMonthHeaderSelectChange","createEvent","cancelable","properties","nextMonthDate","state","prevMonthDate","activeDate","attribute","headingLevel","type","Number","localeData","messages","min","monthStyle","position","scale","reflect","selectedDate","connectedCallback","setNextPrevMonthDates","load","parentDatePickerEl","closestElementCrossShadowBoundary","el","willUpdate","changes","hasUpdated","has","setYearSelectMenuWidth","setYearSelectWidthOffset","loaded","dateFromRange","nextMonth","prevMonth","onYearKey","event","localizedYear","parseCalendarYear","target","value","key","preventDefault","setYear","offset","formatCalendarYear","year","numberStringFormatter","localize","delocalize","onYearChange","onYearInput","commit","prevMonthClick","handleArrowClick","prevMonthKeydown","isActivationKey","nextMonthClick","nextMonthKeydown","date","handlePenultimateValidMonth","emit","handleMonthChange","abbreviated","wide","months","monthIndex","indexOf","newDate","getDateInMonth","inRange","getInRangeDate","parsedYear","length","toString","isNaN","inRange2","getFullYear","nextDate","Date","setFullYear","inRangeDate","yearSelectWidthOffset","parseInt","getYearSelectPadding","requestAnimationFrame","computedStyle","getComputedStyle","shorthandFont","fontStyle","fontVariant","fontWeight","fontSize","lineHeight","fontFamily","activeLocaleMonth","getMonth","selectedOptionWidth","Math","ceil","getTextWidth","style","width","isMonthInRange","index","newActiveDate","hasSameMonthAndYear","isDirectionLeft","getAttribute","isTargetLastValidMonth","focus","target2","nextMonthAction","prevMonthAction","disabled","setFocus","getPx","num","replace","includes","padding","render","html","safeClassMap","renderContent","numberingSystem","lang","locale","numberFormatOptions","useGrouping","order","getOrder","unitOrder","reverse","renderChevron","renderMonthYearContainer","renderYearInput","renderMonthPicker","activeMonth","monthData","monthMenu","ref","map","month","suffix","live","direction","isDirectionRight","isDisabled","nothing","customElement","s","notifyChildrenConnectedChanged","i","t","e","_$AN","_$AO","o","_$AM","delete","size","r","Set","add","c","h","n","_$AH","Array","isArray","CHILD","_$AP","_$AQ","f","_$AT","isConnected","_$AU","reconnected","disconnected","setValue","_$Ct","_$AI","_$Ci","WeakMap","update","G","rt","lt","ct","ht","options","host","element","globalThis","get","set","call"],"sourceRoot":""}