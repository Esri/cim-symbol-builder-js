{"version":3,"file":"static/js/7178.39b7300d.chunk.js","mappings":"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","sources":["../node_modules/@esri/calcite-components/dist/esm/focusTrapComponent-b3a29d9c.js","../node_modules/@esri/calcite-components/dist/esm/loadable-af146fd5.js"],"sourcesContent":["/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-components/blob/master/LICENSE.md for details.\n * v1.4.2\n */\nimport { k as tabbable, l as focusable, m as isTabbable, n as isFocusable, f as focusElement, o as tabbableOptions } from './dom-f74a09b7.js';\n\n/*!\n* focus-trap 7.4.2\n* @license MIT, https://github.com/focus-trap/focus-trap/blob/master/LICENSE\n*/\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return typeof key === \"symbol\" ? key : String(key);\n}\n\nvar activeFocusTraps = {\n  activateTrap: function activateTrap(trapStack, trap) {\n    if (trapStack.length > 0) {\n      var activeTrap = trapStack[trapStack.length - 1];\n      if (activeTrap !== trap) {\n        activeTrap.pause();\n      }\n    }\n    var trapIndex = trapStack.indexOf(trap);\n    if (trapIndex === -1) {\n      trapStack.push(trap);\n    } else {\n      // move this existing trap to the front of the queue\n      trapStack.splice(trapIndex, 1);\n      trapStack.push(trap);\n    }\n  },\n  deactivateTrap: function deactivateTrap(trapStack, trap) {\n    var trapIndex = trapStack.indexOf(trap);\n    if (trapIndex !== -1) {\n      trapStack.splice(trapIndex, 1);\n    }\n    if (trapStack.length > 0) {\n      trapStack[trapStack.length - 1].unpause();\n    }\n  }\n};\nvar isSelectableInput = function isSelectableInput(node) {\n  return node.tagName && node.tagName.toLowerCase() === 'input' && typeof node.select === 'function';\n};\nvar isEscapeEvent = function isEscapeEvent(e) {\n  return e.key === 'Escape' || e.key === 'Esc' || e.keyCode === 27;\n};\nvar isTabEvent = function isTabEvent(e) {\n  return e.key === 'Tab' || e.keyCode === 9;\n};\n\n// checks for TAB by default\nvar isKeyForward = function isKeyForward(e) {\n  return isTabEvent(e) && !e.shiftKey;\n};\n\n// checks for SHIFT+TAB by default\nvar isKeyBackward = function isKeyBackward(e) {\n  return isTabEvent(e) && e.shiftKey;\n};\nvar delay = function delay(fn) {\n  return setTimeout(fn, 0);\n};\n\n// Array.find/findIndex() are not supported on IE; this replicates enough\n//  of Array.findIndex() for our needs\nvar findIndex = function findIndex(arr, fn) {\n  var idx = -1;\n  arr.every(function (value, i) {\n    if (fn(value)) {\n      idx = i;\n      return false; // break\n    }\n\n    return true; // next\n  });\n\n  return idx;\n};\n\n/**\n * Get an option's value when it could be a plain value, or a handler that provides\n *  the value.\n * @param {*} value Option's value to check.\n * @param {...*} [params] Any parameters to pass to the handler, if `value` is a function.\n * @returns {*} The `value`, or the handler's returned value.\n */\nvar valueOrHandler = function valueOrHandler(value) {\n  for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    params[_key - 1] = arguments[_key];\n  }\n  return typeof value === 'function' ? value.apply(void 0, params) : value;\n};\nvar getActualTarget = function getActualTarget(event) {\n  // NOTE: If the trap is _inside_ a shadow DOM, event.target will always be the\n  //  shadow host. However, event.target.composedPath() will be an array of\n  //  nodes \"clicked\" from inner-most (the actual element inside the shadow) to\n  //  outer-most (the host HTML document). If we have access to composedPath(),\n  //  then use its first element; otherwise, fall back to event.target (and\n  //  this only works for an _open_ shadow DOM; otherwise,\n  //  composedPath()[0] === event.target always).\n  return event.target.shadowRoot && typeof event.composedPath === 'function' ? event.composedPath()[0] : event.target;\n};\n\n// NOTE: this must be _outside_ `createFocusTrap()` to make sure all traps in this\n//  current instance use the same stack if `userOptions.trapStack` isn't specified\nvar internalTrapStack = [];\nvar createFocusTrap = function createFocusTrap(elements, userOptions) {\n  // SSR: a live trap shouldn't be created in this type of environment so this\n  //  should be safe code to execute if the `document` option isn't specified\n  var doc = (userOptions === null || userOptions === void 0 ? void 0 : userOptions.document) || document;\n  var trapStack = (userOptions === null || userOptions === void 0 ? void 0 : userOptions.trapStack) || internalTrapStack;\n  var config = _objectSpread2({\n    returnFocusOnDeactivate: true,\n    escapeDeactivates: true,\n    delayInitialFocus: true,\n    isKeyForward: isKeyForward,\n    isKeyBackward: isKeyBackward\n  }, userOptions);\n  var state = {\n    // containers given to createFocusTrap()\n    // @type {Array<HTMLElement>}\n    containers: [],\n    // list of objects identifying tabbable nodes in `containers` in the trap\n    // NOTE: it's possible that a group has no tabbable nodes if nodes get removed while the trap\n    //  is active, but the trap should never get to a state where there isn't at least one group\n    //  with at least one tabbable node in it (that would lead to an error condition that would\n    //  result in an error being thrown)\n    // @type {Array<{\n    //   container: HTMLElement,\n    //   tabbableNodes: Array<HTMLElement>, // empty if none\n    //   focusableNodes: Array<HTMLElement>, // empty if none\n    //   firstTabbableNode: HTMLElement|null,\n    //   lastTabbableNode: HTMLElement|null,\n    //   nextTabbableNode: (node: HTMLElement, forward: boolean) => HTMLElement|undefined\n    // }>}\n    containerGroups: [],\n    // same order/length as `containers` list\n\n    // references to objects in `containerGroups`, but only those that actually have\n    //  tabbable nodes in them\n    // NOTE: same order as `containers` and `containerGroups`, but __not necessarily__\n    //  the same length\n    tabbableGroups: [],\n    nodeFocusedBeforeActivation: null,\n    mostRecentlyFocusedNode: null,\n    active: false,\n    paused: false,\n    // timer ID for when delayInitialFocus is true and initial focus in this trap\n    //  has been delayed during activation\n    delayInitialFocusTimer: undefined\n  };\n  var trap; // eslint-disable-line prefer-const -- some private functions reference it, and its methods reference private functions, so we must declare here and define later\n\n  /**\n   * Gets a configuration option value.\n   * @param {Object|undefined} configOverrideOptions If true, and option is defined in this set,\n   *  value will be taken from this object. Otherwise, value will be taken from base configuration.\n   * @param {string} optionName Name of the option whose value is sought.\n   * @param {string|undefined} [configOptionName] Name of option to use __instead of__ `optionName`\n   *  IIF `configOverrideOptions` is not defined. Otherwise, `optionName` is used.\n   */\n  var getOption = function getOption(configOverrideOptions, optionName, configOptionName) {\n    return configOverrideOptions && configOverrideOptions[optionName] !== undefined ? configOverrideOptions[optionName] : config[configOptionName || optionName];\n  };\n\n  /**\n   * Finds the index of the container that contains the element.\n   * @param {HTMLElement} element\n   * @param {Event} [event]\n   * @returns {number} Index of the container in either `state.containers` or\n   *  `state.containerGroups` (the order/length of these lists are the same); -1\n   *  if the element isn't found.\n   */\n  var findContainerIndex = function findContainerIndex(element, event) {\n    var composedPath = typeof (event === null || event === void 0 ? void 0 : event.composedPath) === 'function' ? event.composedPath() : undefined;\n    // NOTE: search `containerGroups` because it's possible a group contains no tabbable\n    //  nodes, but still contains focusable nodes (e.g. if they all have `tabindex=-1`)\n    //  and we still need to find the element in there\n    return state.containerGroups.findIndex(function (_ref) {\n      var container = _ref.container,\n        tabbableNodes = _ref.tabbableNodes;\n      return container.contains(element) || ( // fall back to explicit tabbable search which will take into consideration any\n      //  web components if the `tabbableOptions.getShadowRoot` option was used for\n      //  the trap, enabling shadow DOM support in tabbable (`Node.contains()` doesn't\n      //  look inside web components even if open)\n      composedPath === null || composedPath === void 0 ? void 0 : composedPath.includes(container)) || tabbableNodes.find(function (node) {\n        return node === element;\n      });\n    });\n  };\n\n  /**\n   * Gets the node for the given option, which is expected to be an option that\n   *  can be either a DOM node, a string that is a selector to get a node, `false`\n   *  (if a node is explicitly NOT given), or a function that returns any of these\n   *  values.\n   * @param {string} optionName\n   * @returns {undefined | false | HTMLElement | SVGElement} Returns\n   *  `undefined` if the option is not specified; `false` if the option\n   *  resolved to `false` (node explicitly not given); otherwise, the resolved\n   *  DOM node.\n   * @throws {Error} If the option is set, not `false`, and is not, or does not\n   *  resolve to a node.\n   */\n  var getNodeForOption = function getNodeForOption(optionName) {\n    var optionValue = config[optionName];\n    if (typeof optionValue === 'function') {\n      for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        params[_key2 - 1] = arguments[_key2];\n      }\n      optionValue = optionValue.apply(void 0, params);\n    }\n    if (optionValue === true) {\n      optionValue = undefined; // use default value\n    }\n\n    if (!optionValue) {\n      if (optionValue === undefined || optionValue === false) {\n        return optionValue;\n      }\n      // else, empty string (invalid), null (invalid), 0 (invalid)\n\n      throw new Error(\"`\".concat(optionName, \"` was specified but was not a node, or did not return a node\"));\n    }\n    var node = optionValue; // could be HTMLElement, SVGElement, or non-empty string at this point\n\n    if (typeof optionValue === 'string') {\n      node = doc.querySelector(optionValue); // resolve to node, or null if fails\n      if (!node) {\n        throw new Error(\"`\".concat(optionName, \"` as selector refers to no known node\"));\n      }\n    }\n    return node;\n  };\n  var getInitialFocusNode = function getInitialFocusNode() {\n    var node = getNodeForOption('initialFocus');\n\n    // false explicitly indicates we want no initialFocus at all\n    if (node === false) {\n      return false;\n    }\n    if (node === undefined) {\n      // option not specified: use fallback options\n      if (findContainerIndex(doc.activeElement) >= 0) {\n        node = doc.activeElement;\n      } else {\n        var firstTabbableGroup = state.tabbableGroups[0];\n        var firstTabbableNode = firstTabbableGroup && firstTabbableGroup.firstTabbableNode;\n\n        // NOTE: `fallbackFocus` option function cannot return `false` (not supported)\n        node = firstTabbableNode || getNodeForOption('fallbackFocus');\n      }\n    }\n    if (!node) {\n      throw new Error('Your focus-trap needs to have at least one focusable element');\n    }\n    return node;\n  };\n  var updateTabbableNodes = function updateTabbableNodes() {\n    state.containerGroups = state.containers.map(function (container) {\n      var tabbableNodes = tabbable(container, config.tabbableOptions);\n\n      // NOTE: if we have tabbable nodes, we must have focusable nodes; focusable nodes\n      //  are a superset of tabbable nodes\n      var focusableNodes = focusable(container, config.tabbableOptions);\n      return {\n        container: container,\n        tabbableNodes: tabbableNodes,\n        focusableNodes: focusableNodes,\n        firstTabbableNode: tabbableNodes.length > 0 ? tabbableNodes[0] : null,\n        lastTabbableNode: tabbableNodes.length > 0 ? tabbableNodes[tabbableNodes.length - 1] : null,\n        /**\n         * Finds the __tabbable__ node that follows the given node in the specified direction,\n         *  in this container, if any.\n         * @param {HTMLElement} node\n         * @param {boolean} [forward] True if going in forward tab order; false if going\n         *  in reverse.\n         * @returns {HTMLElement|undefined} The next tabbable node, if any.\n         */\n        nextTabbableNode: function nextTabbableNode(node) {\n          var forward = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n          // NOTE: If tabindex is positive (in order to manipulate the tab order separate\n          //  from the DOM order), this __will not work__ because the list of focusableNodes,\n          //  while it contains tabbable nodes, does not sort its nodes in any order other\n          //  than DOM order, because it can't: Where would you place focusable (but not\n          //  tabbable) nodes in that order? They have no order, because they aren't tabbale...\n          // Support for positive tabindex is already broken and hard to manage (possibly\n          //  not supportable, TBD), so this isn't going to make things worse than they\n          //  already are, and at least makes things better for the majority of cases where\n          //  tabindex is either 0/unset or negative.\n          // FYI, positive tabindex issue: https://github.com/focus-trap/focus-trap/issues/375\n          var nodeIdx = focusableNodes.findIndex(function (n) {\n            return n === node;\n          });\n          if (nodeIdx < 0) {\n            return undefined;\n          }\n          if (forward) {\n            return focusableNodes.slice(nodeIdx + 1).find(function (n) {\n              return isTabbable(n, config.tabbableOptions);\n            });\n          }\n          return focusableNodes.slice(0, nodeIdx).reverse().find(function (n) {\n            return isTabbable(n, config.tabbableOptions);\n          });\n        }\n      };\n    });\n    state.tabbableGroups = state.containerGroups.filter(function (group) {\n      return group.tabbableNodes.length > 0;\n    });\n\n    // throw if no groups have tabbable nodes and we don't have a fallback focus node either\n    if (state.tabbableGroups.length <= 0 && !getNodeForOption('fallbackFocus') // returning false not supported for this option\n    ) {\n      throw new Error('Your focus-trap must have at least one container with at least one tabbable node in it at all times');\n    }\n  };\n  var tryFocus = function tryFocus(node) {\n    if (node === false) {\n      return;\n    }\n    if (node === doc.activeElement) {\n      return;\n    }\n    if (!node || !node.focus) {\n      tryFocus(getInitialFocusNode());\n      return;\n    }\n    node.focus({\n      preventScroll: !!config.preventScroll\n    });\n    state.mostRecentlyFocusedNode = node;\n    if (isSelectableInput(node)) {\n      node.select();\n    }\n  };\n  var getReturnFocusNode = function getReturnFocusNode(previousActiveElement) {\n    var node = getNodeForOption('setReturnFocus', previousActiveElement);\n    return node ? node : node === false ? false : previousActiveElement;\n  };\n\n  // This needs to be done on mousedown and touchstart instead of click\n  // so that it precedes the focus event.\n  var checkPointerDown = function checkPointerDown(e) {\n    var target = getActualTarget(e);\n    if (findContainerIndex(target, e) >= 0) {\n      // allow the click since it ocurred inside the trap\n      return;\n    }\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      // immediately deactivate the trap\n      trap.deactivate({\n        // NOTE: by setting `returnFocus: false`, deactivate() will do nothing,\n        //  which will result in the outside click setting focus to the node\n        //  that was clicked (and if not focusable, to \"nothing\"); by setting\n        //  `returnFocus: true`, we'll attempt to re-focus the node originally-focused\n        //  on activation (or the configured `setReturnFocus` node), whether the\n        //  outside click was on a focusable node or not\n        returnFocus: config.returnFocusOnDeactivate\n      });\n      return;\n    }\n\n    // This is needed for mobile devices.\n    // (If we'll only let `click` events through,\n    // then on mobile they will be blocked anyways if `touchstart` is blocked.)\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      // allow the click outside the trap to take place\n      return;\n    }\n\n    // otherwise, prevent the click\n    e.preventDefault();\n  };\n\n  // In case focus escapes the trap for some strange reason, pull it back in.\n  var checkFocusIn = function checkFocusIn(e) {\n    var target = getActualTarget(e);\n    var targetContained = findContainerIndex(target, e) >= 0;\n\n    // In Firefox when you Tab out of an iframe the Document is briefly focused.\n    if (targetContained || target instanceof Document) {\n      if (targetContained) {\n        state.mostRecentlyFocusedNode = target;\n      }\n    } else {\n      // escaped! pull it back in to where it just left\n      e.stopImmediatePropagation();\n      tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());\n    }\n  };\n\n  // Hijack key nav events on the first and last focusable nodes of the trap,\n  // in order to prevent focus from escaping. If it escapes for even a\n  // moment it can end up scrolling the page and causing confusion so we\n  // kind of need to capture the action at the keydown phase.\n  var checkKeyNav = function checkKeyNav(event) {\n    var isBackward = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var target = getActualTarget(event);\n    updateTabbableNodes();\n    var destinationNode = null;\n    if (state.tabbableGroups.length > 0) {\n      // make sure the target is actually contained in a group\n      // NOTE: the target may also be the container itself if it's focusable\n      //  with tabIndex='-1' and was given initial focus\n      var containerIndex = findContainerIndex(target, event);\n      var containerGroup = containerIndex >= 0 ? state.containerGroups[containerIndex] : undefined;\n      if (containerIndex < 0) {\n        // target not found in any group: quite possible focus has escaped the trap,\n        //  so bring it back into...\n        if (isBackward) {\n          // ...the last node in the last group\n          destinationNode = state.tabbableGroups[state.tabbableGroups.length - 1].lastTabbableNode;\n        } else {\n          // ...the first node in the first group\n          destinationNode = state.tabbableGroups[0].firstTabbableNode;\n        }\n      } else if (isBackward) {\n        // REVERSE\n\n        // is the target the first tabbable node in a group?\n        var startOfGroupIndex = findIndex(state.tabbableGroups, function (_ref2) {\n          var firstTabbableNode = _ref2.firstTabbableNode;\n          return target === firstTabbableNode;\n        });\n        if (startOfGroupIndex < 0 && (containerGroup.container === target || isFocusable(target, config.tabbableOptions) && !isTabbable(target, config.tabbableOptions) && !containerGroup.nextTabbableNode(target, false))) {\n          // an exception case where the target is either the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle shift+tab as if focus were on the container's\n          //  first tabbable node, and go to the last tabbable node of the LAST group\n          startOfGroupIndex = containerIndex;\n        }\n        if (startOfGroupIndex >= 0) {\n          // YES: then shift+tab should go to the last tabbable node in the\n          //  previous group (and wrap around to the last tabbable node of\n          //  the LAST group if it's the first tabbable node of the FIRST group)\n          var destinationGroupIndex = startOfGroupIndex === 0 ? state.tabbableGroups.length - 1 : startOfGroupIndex - 1;\n          var destinationGroup = state.tabbableGroups[destinationGroupIndex];\n          destinationNode = destinationGroup.lastTabbableNode;\n        } else if (!isTabEvent(event)) {\n          // user must have customized the nav keys so we have to move focus manually _within_\n          //  the active group: do this based on the order determined by tabbable()\n          destinationNode = containerGroup.nextTabbableNode(target, false);\n        }\n      } else {\n        // FORWARD\n\n        // is the target the last tabbable node in a group?\n        var lastOfGroupIndex = findIndex(state.tabbableGroups, function (_ref3) {\n          var lastTabbableNode = _ref3.lastTabbableNode;\n          return target === lastTabbableNode;\n        });\n        if (lastOfGroupIndex < 0 && (containerGroup.container === target || isFocusable(target, config.tabbableOptions) && !isTabbable(target, config.tabbableOptions) && !containerGroup.nextTabbableNode(target))) {\n          // an exception case where the target is the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle tab as if focus were on the container's\n          //  last tabbable node, and go to the first tabbable node of the FIRST group\n          lastOfGroupIndex = containerIndex;\n        }\n        if (lastOfGroupIndex >= 0) {\n          // YES: then tab should go to the first tabbable node in the next\n          //  group (and wrap around to the first tabbable node of the FIRST\n          //  group if it's the last tabbable node of the LAST group)\n          var _destinationGroupIndex = lastOfGroupIndex === state.tabbableGroups.length - 1 ? 0 : lastOfGroupIndex + 1;\n          var _destinationGroup = state.tabbableGroups[_destinationGroupIndex];\n          destinationNode = _destinationGroup.firstTabbableNode;\n        } else if (!isTabEvent(event)) {\n          // user must have customized the nav keys so we have to move focus manually _within_\n          //  the active group: do this based on the order determined by tabbable()\n          destinationNode = containerGroup.nextTabbableNode(target);\n        }\n      }\n    } else {\n      // no groups available\n      // NOTE: the fallbackFocus option does not support returning false to opt-out\n      destinationNode = getNodeForOption('fallbackFocus');\n    }\n    if (destinationNode) {\n      if (isTabEvent(event)) {\n        // since tab natively moves focus, we wouldn't have a destination node unless we\n        //  were on the edge of a container and had to move to the next/previous edge, in\n        //  which case we want to prevent default to keep the browser from moving focus\n        //  to where it normally would\n        event.preventDefault();\n      }\n      tryFocus(destinationNode);\n    }\n    // else, let the browser take care of [shift+]tab and move the focus\n  };\n\n  var checkKey = function checkKey(event) {\n    if (isEscapeEvent(event) && valueOrHandler(config.escapeDeactivates, event) !== false) {\n      event.preventDefault();\n      trap.deactivate();\n      return;\n    }\n    if (config.isKeyForward(event) || config.isKeyBackward(event)) {\n      checkKeyNav(event, config.isKeyBackward(event));\n    }\n  };\n  var checkClick = function checkClick(e) {\n    var target = getActualTarget(e);\n    if (findContainerIndex(target, e) >= 0) {\n      return;\n    }\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      return;\n    }\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      return;\n    }\n    e.preventDefault();\n    e.stopImmediatePropagation();\n  };\n\n  //\n  // EVENT LISTENERS\n  //\n\n  var addListeners = function addListeners() {\n    if (!state.active) {\n      return;\n    }\n\n    // There can be only one listening focus trap at a time\n    activeFocusTraps.activateTrap(trapStack, trap);\n\n    // Delay ensures that the focused element doesn't capture the event\n    // that caused the focus trap activation.\n    state.delayInitialFocusTimer = config.delayInitialFocus ? delay(function () {\n      tryFocus(getInitialFocusNode());\n    }) : tryFocus(getInitialFocusNode());\n    doc.addEventListener('focusin', checkFocusIn, true);\n    doc.addEventListener('mousedown', checkPointerDown, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('touchstart', checkPointerDown, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('click', checkClick, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('keydown', checkKey, {\n      capture: true,\n      passive: false\n    });\n    return trap;\n  };\n  var removeListeners = function removeListeners() {\n    if (!state.active) {\n      return;\n    }\n    doc.removeEventListener('focusin', checkFocusIn, true);\n    doc.removeEventListener('mousedown', checkPointerDown, true);\n    doc.removeEventListener('touchstart', checkPointerDown, true);\n    doc.removeEventListener('click', checkClick, true);\n    doc.removeEventListener('keydown', checkKey, true);\n    return trap;\n  };\n\n  //\n  // TRAP DEFINITION\n  //\n\n  trap = {\n    get active() {\n      return state.active;\n    },\n    get paused() {\n      return state.paused;\n    },\n    activate: function activate(activateOptions) {\n      if (state.active) {\n        return this;\n      }\n      var onActivate = getOption(activateOptions, 'onActivate');\n      var onPostActivate = getOption(activateOptions, 'onPostActivate');\n      var checkCanFocusTrap = getOption(activateOptions, 'checkCanFocusTrap');\n      if (!checkCanFocusTrap) {\n        updateTabbableNodes();\n      }\n      state.active = true;\n      state.paused = false;\n      state.nodeFocusedBeforeActivation = doc.activeElement;\n      onActivate === null || onActivate === void 0 ? void 0 : onActivate();\n      var finishActivation = function finishActivation() {\n        if (checkCanFocusTrap) {\n          updateTabbableNodes();\n        }\n        addListeners();\n        onPostActivate === null || onPostActivate === void 0 ? void 0 : onPostActivate();\n      };\n      if (checkCanFocusTrap) {\n        checkCanFocusTrap(state.containers.concat()).then(finishActivation, finishActivation);\n        return this;\n      }\n      finishActivation();\n      return this;\n    },\n    deactivate: function deactivate(deactivateOptions) {\n      if (!state.active) {\n        return this;\n      }\n      var options = _objectSpread2({\n        onDeactivate: config.onDeactivate,\n        onPostDeactivate: config.onPostDeactivate,\n        checkCanReturnFocus: config.checkCanReturnFocus\n      }, deactivateOptions);\n      clearTimeout(state.delayInitialFocusTimer); // noop if undefined\n      state.delayInitialFocusTimer = undefined;\n      removeListeners();\n      state.active = false;\n      state.paused = false;\n      activeFocusTraps.deactivateTrap(trapStack, trap);\n      var onDeactivate = getOption(options, 'onDeactivate');\n      var onPostDeactivate = getOption(options, 'onPostDeactivate');\n      var checkCanReturnFocus = getOption(options, 'checkCanReturnFocus');\n      var returnFocus = getOption(options, 'returnFocus', 'returnFocusOnDeactivate');\n      onDeactivate === null || onDeactivate === void 0 ? void 0 : onDeactivate();\n      var finishDeactivation = function finishDeactivation() {\n        delay(function () {\n          if (returnFocus) {\n            tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));\n          }\n          onPostDeactivate === null || onPostDeactivate === void 0 ? void 0 : onPostDeactivate();\n        });\n      };\n      if (returnFocus && checkCanReturnFocus) {\n        checkCanReturnFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation)).then(finishDeactivation, finishDeactivation);\n        return this;\n      }\n      finishDeactivation();\n      return this;\n    },\n    pause: function pause(pauseOptions) {\n      if (state.paused || !state.active) {\n        return this;\n      }\n      var onPause = getOption(pauseOptions, 'onPause');\n      var onPostPause = getOption(pauseOptions, 'onPostPause');\n      state.paused = true;\n      onPause === null || onPause === void 0 ? void 0 : onPause();\n      removeListeners();\n      onPostPause === null || onPostPause === void 0 ? void 0 : onPostPause();\n      return this;\n    },\n    unpause: function unpause(unpauseOptions) {\n      if (!state.paused || !state.active) {\n        return this;\n      }\n      var onUnpause = getOption(unpauseOptions, 'onUnpause');\n      var onPostUnpause = getOption(unpauseOptions, 'onPostUnpause');\n      state.paused = false;\n      onUnpause === null || onUnpause === void 0 ? void 0 : onUnpause();\n      updateTabbableNodes();\n      addListeners();\n      onPostUnpause === null || onPostUnpause === void 0 ? void 0 : onPostUnpause();\n      return this;\n    },\n    updateContainerElements: function updateContainerElements(containerElements) {\n      var elementsAsArray = [].concat(containerElements).filter(Boolean);\n      state.containers = elementsAsArray.map(function (element) {\n        return typeof element === 'string' ? doc.querySelector(element) : element;\n      });\n      if (state.active) {\n        updateTabbableNodes();\n      }\n      return this;\n    }\n  };\n\n  // initialize container elements\n  trap.updateContainerElements(elements);\n  return trap;\n};\n\nconst trapStack = [];\n/**\n * Helper to set up the FocusTrap component.\n *\n * @param {FocusTrapComponent} component The FocusTrap component.\n * @param options\n */\nfunction connectFocusTrap(component, options) {\n  const { el } = component;\n  const focusTrapNode = options?.focusTrapEl || el;\n  if (!focusTrapNode) {\n    return;\n  }\n  const focusTrapOptions = {\n    clickOutsideDeactivates: true,\n    escapeDeactivates: false,\n    fallbackFocus: focusTrapNode,\n    setReturnFocus: (el) => {\n      focusElement(el);\n      return false;\n    },\n    ...options?.focusTrapOptions,\n    // the following options are not overrideable\n    document: el.ownerDocument,\n    tabbableOptions,\n    trapStack\n  };\n  component.focusTrap = createFocusTrap(focusTrapNode, focusTrapOptions);\n}\n/**\n * Helper to activate the FocusTrap component.\n *\n * @param {FocusTrapComponent} component The FocusTrap component.\n * @param [options] The FocusTrap activate options.\n */\nfunction activateFocusTrap(component, options) {\n  if (!component.focusTrapDisabled) {\n    component.focusTrap?.activate(options);\n  }\n}\n/**\n * Helper to deactivate the FocusTrap component.\n *\n * @param {FocusTrapComponent} component The FocusTrap component.\n * @param [options] The FocusTrap deactivate options.\n */\nfunction deactivateFocusTrap(component, options) {\n  component.focusTrap?.deactivate(options);\n}\n/**\n * Helper to update the element(s) that are used within the FocusTrap component.\n *\n * @param {FocusTrapComponent} component The FocusTrap component.\n * @example\n * const modal = document.querySelector(\"calcite-modal\");\n * const input = document.createElement(\"calcite-input\");\n * content.appendChild(input);\n * await input.componentOnReady();\n * await modal.updateFocusTrapElements();\n * requestAnimationFrame(() => input.setFocus());\n */\nfunction updateFocusTrapElements(component) {\n  component.focusTrap?.updateContainerElements(component.el);\n}\n\nexport { activateFocusTrap as a, connectFocusTrap as c, deactivateFocusTrap as d, updateFocusTrapElements as u };\n","/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-components/blob/master/LICENSE.md for details.\n * v1.4.2\n */\nconst resolveMap = new WeakMap();\nconst promiseMap = new WeakMap();\n/**\n * This helper util sets up the component for the ability to know when the component has been loaded.\n *\n * This should be used in the `componentWillLoad` lifecycle hook.\n *\n * ```\n * componentWillLoad(): void {\n *   setUpLoadableComponent(this);\n * }\n * ```\n *\n * @param component\n */\nfunction setUpLoadableComponent(component) {\n  promiseMap.set(component, new Promise((resolve) => resolveMap.set(component, resolve)));\n}\n/**\n * This helper util lets the loadable component know that it is now loaded.\n *\n * This should be used in the `componentDidLoad` lifecycle hook.\n *\n * ```\n * componentDidLoad(): void {\n *   setComponentLoaded(this);\n * }\n * ```\n *\n * @param component\n */\nfunction setComponentLoaded(component) {\n  resolveMap.get(component)();\n}\n/**\n * This helper util can be used to ensure a component has been loaded (The \"componentDidLoad\" stencil lifecycle method has been called).\n *\n * Requires \"setUpLoadableComponent\" and \"setComponentLoaded\" to be called first.\n *\n * A component developer can await this method before proceeding with any logic that requires a component to be loaded first.\n *\n * ```\n * async setFocus(): Promise<void> {\n *   await componentLoaded(this);\n * }\n * ```\n *\n * @param component\n * @returns Promise<void>\n */\nfunction componentLoaded(component) {\n  return promiseMap.get(component);\n}\n\nexport { setComponentLoaded as a, componentLoaded as c, setUpLoadableComponent as s };\n"],"names":["ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","arg","input","hint","prim","Symbol","toPrimitive","undefined","res","call","TypeError","String","Number","_toPrimitive","_toPropertyKey","configurable","writable","activeFocusTraps","trapStack","trap","activeTrap","pause","trapIndex","indexOf","splice","unpause","isTabEvent","e","keyCode","isKeyForward","shiftKey","isKeyBackward","delay","fn","setTimeout","findIndex","arr","idx","every","valueOrHandler","_len","params","Array","_key","getActualTarget","event","shadowRoot","composedPath","internalTrapStack","createFocusTrap","elements","userOptions","doc","document","config","returnFocusOnDeactivate","escapeDeactivates","delayInitialFocus","state","containers","containerGroups","tabbableGroups","nodeFocusedBeforeActivation","mostRecentlyFocusedNode","active","paused","delayInitialFocusTimer","getOption","configOverrideOptions","optionName","configOptionName","findContainerIndex","element","_ref","container","tabbableNodes","contains","includes","find","node","getNodeForOption","optionValue","_len2","_key2","Error","concat","querySelector","getInitialFocusNode","activeElement","firstTabbableGroup","firstTabbableNode","updateTabbableNodes","map","tabbable","tabbableOptions","focusableNodes","focusable","lastTabbableNode","nextTabbableNode","forward","nodeIdx","n","slice","isTabbable","reverse","group","tryFocus","focus","preventScroll","tagName","toLowerCase","select","isSelectableInput","getReturnFocusNode","previousActiveElement","checkPointerDown","clickOutsideDeactivates","deactivate","returnFocus","allowOutsideClick","preventDefault","checkFocusIn","targetContained","Document","stopImmediatePropagation","checkKey","isBackward","destinationNode","containerIndex","containerGroup","startOfGroupIndex","_ref2","isFocusable","destinationGroupIndex","lastOfGroupIndex","_ref3","_destinationGroupIndex","checkKeyNav","checkClick","addListeners","addEventListener","capture","passive","removeListeners","removeEventListener","activate","activateOptions","this","onActivate","onPostActivate","checkCanFocusTrap","finishActivation","then","deactivateOptions","options","onDeactivate","onPostDeactivate","checkCanReturnFocus","clearTimeout","finishDeactivation","pauseOptions","onPause","onPostPause","unpauseOptions","onUnpause","onPostUnpause","updateContainerElements","containerElements","elementsAsArray","Boolean","connectFocusTrap","component","el","focusTrapNode","focusTrapEl","focusTrapOptions","fallbackFocus","setReturnFocus","focusElement","ownerDocument","focusTrap","activateFocusTrap","focusTrapDisabled","deactivateFocusTrap","updateFocusTrapElements","resolveMap","WeakMap","promiseMap","setUpLoadableComponent","set","Promise","resolve","setComponentLoaded","get","componentLoaded"],"sourceRoot":""}