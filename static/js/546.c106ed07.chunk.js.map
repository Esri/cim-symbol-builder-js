{"version":3,"file":"static/js/546.c106ed07.chunk.js","mappings":"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","sources":["../node_modules/@esri/calcite-components/dist/esm/src/components/tile-group/resources.ts","../node_modules/@esri/calcite-components/dist/esm/src/components/tile-group/tile-group.tsx","../node_modules/@esri/calcite-components/dist/esm/src/components/tile-group/tile-group.scss?tag=calcite-tile-group&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/esm/src/utils/interactive.tsx","../node_modules/@esri/calcite-components/dist/esm/src/utils/observers.ts"],"sourcesContent":["export const CSS = {\n  container: \"container\",\n};\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Listen,\n  Prop,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport {\n  InteractiveComponent,\n  InteractiveContainer,\n  updateHostInteraction,\n} from \"../../utils/interactive\";\nimport { Alignment, Layout, Scale, SelectionAppearance, SelectionMode } from \"../interfaces\";\nimport { createObserver } from \"../../utils/observers\";\nimport { focusElementInGroup } from \"../../utils/dom\";\nimport { SelectableGroupComponent } from \"../../utils/selectableComponent\";\nimport { CSS } from \"./resources\";\n\n/**\n * @slot - A slot for adding `calcite-tile` elements.\n */\n@Component({\n  tag: \"calcite-tile-group\",\n  styleUrl: \"tile-group.scss\",\n  shadow: true,\n})\nexport class TileGroup implements InteractiveComponent, SelectableGroupComponent {\n  //--------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  //--------------------------------------------------------------------------\n\n  /**\n   * Specifies the alignment of each `calcite-tile`'s content.\n   */\n  @Prop({ reflect: true }) alignment: Exclude<Alignment, \"end\"> = \"start\";\n\n  /** When `true`, interaction is prevented and the component is displayed with lower opacity. */\n  @Prop({ reflect: true }) disabled = false;\n\n  /** Accessible name for the component. */\n  @Prop() label!: string;\n\n  /**\n   * Defines the layout of the component.\n   *\n   * Use `\"horizontal\"` for rows, and `\"vertical\"` for a single column.\n   */\n  @Prop({ reflect: true }) layout: Extract<Layout, \"horizontal\" | \"vertical\"> = \"horizontal\";\n\n  /**\n   * Specifies the size of the component.\n   */\n  @Prop({ reflect: true }) scale: Scale = \"m\";\n\n  @Watch(\"scale\")\n  scaleWatcher(): void {\n    this.updateTiles();\n  }\n\n  /**\n   * Specifies the component's selected items.\n   *\n   * @readonly\n   */\n  @Prop({ mutable: true }) selectedItems: HTMLCalciteTileElement[] = [];\n\n  /**\n   * Specifies the selection appearance, where:\n   *\n   * - `\"icon\"` (displays a checkmark or dot), or\n   * - `\"border\"` (displays a border).\n   */\n  @Prop({ reflect: true }) selectionAppearance: SelectionAppearance = \"icon\";\n\n  /**\n   * Specifies the selection mode, where:\n   *\n   * - `\"multiple\"` (allows any number of selected items),\n   * - `\"single\"` (allows only one selected item),\n   * - `\"single-persist\"` (allows only one selected item and prevents de-selection),\n   * - `\"none\"` (allows no selected items).\n   */\n  @Prop({ reflect: true }) selectionMode: Extract<\n    \"multiple\" | \"none\" | \"single\" | \"single-persist\",\n    SelectionMode\n  > = \"none\";\n\n  @Watch(\"selectionMode\")\n  @Watch(\"selectionAppearance\")\n  handleSelectionModeOrAppearanceChange(): void {\n    this.updateTiles();\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  //--------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteTileGroupElement;\n\n  private items: HTMLCalciteTileElement[] = [];\n\n  private slotEl: HTMLSlotElement;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  //--------------------------------------------------------------------------\n\n  private getSlottedTiles = (): HTMLCalciteTileElement[] => {\n    return this.slotEl\n      ?.assignedElements({ flatten: true })\n      .filter((el) => el?.matches(\"calcite-tile\")) as HTMLCalciteTileElement[];\n  };\n\n  private mutationObserver = createObserver(\"mutation\", () => this.updateTiles());\n\n  private selectItem = (item: HTMLCalciteTileElement): void => {\n    if (!item) {\n      return;\n    }\n    this.items?.forEach((el) => {\n      const matchingEl = item === el;\n      switch (this.selectionMode) {\n        case \"multiple\":\n          if (matchingEl) {\n            el.selected = !el.selected;\n          }\n          break;\n\n        case \"single\":\n          el.selected = matchingEl && !el.selected;\n          break;\n\n        case \"single-persist\":\n          el.selected = !!matchingEl;\n          break;\n      }\n    });\n    this.updateSelectedItems();\n    this.calciteTileGroupSelect.emit();\n  };\n\n  private setSlotEl = (el: HTMLSlotElement): void => {\n    this.slotEl = el;\n  };\n\n  private updateSelectedItems = (): void => {\n    const selectedItems = this.items?.filter((el) => el.selected);\n    if (\n      (this.selectionMode === \"single\" || this.selectionMode === \"single-persist\") &&\n      selectedItems?.length > 1\n    ) {\n      this.selectedItems = [selectedItems.pop()];\n      this.items?.forEach((el) => {\n        if (this.selectedItems.indexOf(el) === -1) {\n          el.selected = false;\n        }\n      });\n    } else {\n      this.selectedItems = selectedItems ?? [];\n    }\n  };\n\n  private updateTiles = (): void => {\n    this.items = this.getSlottedTiles();\n    this.items?.forEach((el) => {\n      el.alignment = this.alignment;\n      el.interactive = true;\n      el.layout = this.layout;\n      el.scale = this.scale;\n      el.selectionAppearance = this.selectionAppearance;\n      el.selectionMode = this.selectionMode;\n    });\n    this.updateSelectedItems();\n  };\n\n  //--------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  //--------------------------------------------------------------------------\n\n  /** Fires when the component's selection changes. */\n  @Event({ cancelable: false }) calciteTileGroupSelect: EventEmitter<void>;\n\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    this.mutationObserver?.observe(this.el, { childList: true });\n    this.updateTiles();\n  }\n\n  componentDidRender(): void {\n    updateHostInteraction(this);\n  }\n\n  disconnectedCallback(): void {\n    this.mutationObserver?.disconnect();\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Event Listeners\n  //\n  //--------------------------------------------------------------------------\n\n  @Listen(\"calciteInternalTileKeyEvent\")\n  calciteInternalTileKeyEventListener(event: CustomEvent): void {\n    if (event.composedPath().includes(this.el)) {\n      event.preventDefault();\n      event.stopPropagation();\n      const interactiveItems = this.items?.filter((el) => !el.disabled);\n      switch (event.detail.key) {\n        case \"ArrowDown\":\n        case \"ArrowRight\":\n          focusElementInGroup(interactiveItems, event.detail.target, \"next\");\n          break;\n        case \"ArrowUp\":\n        case \"ArrowLeft\":\n          focusElementInGroup(interactiveItems, event.detail.target, \"previous\");\n          break;\n        case \"Home\":\n          focusElementInGroup(interactiveItems, event.detail.target, \"first\");\n          break;\n        case \"End\":\n          focusElementInGroup(interactiveItems, event.detail.target, \"last\");\n          break;\n      }\n    }\n  }\n\n  @Listen(\"calciteTileSelect\")\n  calciteTileSelectHandler(event: CustomEvent): void {\n    if (event.composedPath().includes(this.el)) {\n      this.selectItem(event.target as HTMLCalciteTileElement);\n    }\n  }\n\n  //--------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  //--------------------------------------------------------------------------\n\n  render(): VNode {\n    const role =\n      this.selectionMode === \"none\" || this.selectionMode === \"multiple\" ? \"group\" : \"radiogroup\";\n    return (\n      <InteractiveContainer disabled={this.disabled}>\n        <div aria-label={this.label} class={CSS.container} role={role}>\n          <slot onSlotchange={this.updateTiles} ref={this.setSlotEl} />\n        </div>\n      </InteractiveContainer>\n    );\n  }\n}\n",":host {\n  box-sizing: border-box;\n  display: inline-block;\n\n  ::slotted(calcite-tile) {\n    margin-block-end: var(--calcite-spacing-px);\n    margin-inline-end: var(--calcite-spacing-px);\n  }\n}\n.container {\n  display: grid;\n  grid-auto-rows: minmax(auto, 1fr);\n}\n:host([scale=\"s\"]) {\n  .container {\n    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));\n  }\n}\n:host([scale=\"m\"]) {\n  .container {\n    grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));\n  }\n}\n:host([scale=\"l\"]) {\n  .container {\n    grid-template-columns: repeat(auto-fit, minmax(160px, 1fr));\n  }\n}\n:host([layout=\"vertical\"]) {\n  .container {\n    display: flex;\n    flex-direction: column;\n  }\n}\n\n@include disabled();\n@include base-component();\n","import { JSXAttributes } from \"@stencil/core/internal\";\nimport { FunctionalComponent, h, VNode } from \"@stencil/core\";\n\nexport interface InteractiveComponent {\n  /**\n   * The host element.\n   */\n  readonly el: InteractiveHTMLElement;\n\n  /**\n   * When true, prevents user interaction.\n   *\n   * Notes:\n   *\n   * This prop should use the @Prop decorator and reflect.\n   * The `disabled` Sass mixin must be added to the component's stylesheet.\n   */\n  disabled: boolean;\n}\n\n/**\n * Exported for testing purposes only.\n *\n * @internal\n */\nexport type InteractiveHTMLElement = HTMLElement & Pick<InteractiveComponent, \"disabled\">;\n\nfunction interceptedClick(): void {\n  const { disabled } = this as InteractiveHTMLElement;\n\n  if (!disabled) {\n    HTMLElement.prototype.click.call(this);\n  }\n}\n\nfunction onPointerDown(event: PointerEvent): void {\n  const interactiveElement = event.target as InteractiveHTMLElement;\n\n  if (interactiveElement.disabled) {\n    // prevent click from moving focus on host\n    event.preventDefault();\n  }\n}\n\nconst nonBubblingWhenDisabledMouseEvents = [\"mousedown\", \"mouseup\", \"click\"];\n\nfunction onNonBubblingWhenDisabledMouseEvent(event: MouseEvent): void {\n  const interactiveElement = event.target as InteractiveHTMLElement;\n\n  // prevent disallowed mouse events from being emitted on the disabled host (per https://github.com/whatwg/html/issues/5886)\n  // ⚠ we generally avoid stopping propagation of events, but this is needed to adhere to the intended spec changes above ⚠\n  if (interactiveElement.disabled) {\n    event.stopImmediatePropagation();\n    event.preventDefault();\n  }\n}\n\nconst captureOnlyOptions = { capture: true } as const;\n\n/**\n * This helper updates the host element to prevent keyboard interaction on its subtree and sets the appropriate aria attribute for accessibility.\n *\n * This should be used in the `componentDidRender` lifecycle hook.\n *\n * **Notes**\n *\n * this util is not needed for simple components whose root element or elements are an interactive component (custom element or native control). For those cases, set the `disabled` props on the root components instead.\n * technically, users can override `tabindex` and restore keyboard navigation, but this will be considered user error\n *\n * @param component\n */\nexport function updateHostInteraction(component: InteractiveComponent): void {\n  if (component.disabled) {\n    component.el.setAttribute(\"aria-disabled\", \"true\");\n\n    if (component.el.contains(document.activeElement)) {\n      (document.activeElement as HTMLElement).blur();\n    }\n\n    blockInteraction(component);\n\n    return;\n  }\n\n  restoreInteraction(component);\n\n  component.el.removeAttribute(\"aria-disabled\");\n}\n\nfunction blockInteraction(component: InteractiveComponent): void {\n  component.el.click = interceptedClick;\n  addInteractionListeners(component.el);\n}\n\nfunction addInteractionListeners(element: HTMLElement): void {\n  element.addEventListener(\"pointerdown\", onPointerDown, captureOnlyOptions);\n  nonBubblingWhenDisabledMouseEvents.forEach((event) =>\n    element.addEventListener(event, onNonBubblingWhenDisabledMouseEvent, captureOnlyOptions),\n  );\n}\n\nfunction restoreInteraction(component: InteractiveComponent): void {\n  delete component.el.click; // fallback on HTMLElement.prototype.click\n  removeInteractionListeners(component.el);\n}\n\nfunction removeInteractionListeners(element: HTMLElement): void {\n  element.removeEventListener(\"pointerdown\", onPointerDown, captureOnlyOptions);\n  nonBubblingWhenDisabledMouseEvents.forEach((event) =>\n    element.removeEventListener(event, onNonBubblingWhenDisabledMouseEvent, captureOnlyOptions),\n  );\n}\n\nexport interface InteractiveContainerProps extends JSXAttributes {\n  disabled: boolean;\n}\n\nexport const CSS = {\n  container: \"interaction-container\",\n};\n\nexport const InteractiveContainer: FunctionalComponent<InteractiveContainerProps> = (\n  { disabled },\n  children: VNode[],\n): VNode => (\n  <div class={CSS.container} inert={disabled}>\n    {...children}\n  </div>\n);\n","import { isBrowser } from \"./browser\";\n\nexport interface ExtendedMutationObserver extends MutationObserver {\n  new: () => ExtendedMutationObserver;\n  unobserve: (target: Node) => void;\n}\n\ndeclare const ExtendedMutationObserver: {\n  prototype: ExtendedMutationObserver;\n  new (callback: MutationCallback): ExtendedMutationObserver;\n};\n\ntype ObserverType = \"mutation\" | \"intersection\" | \"resize\";\n\ntype ObserverCallbackType<T extends ObserverType> = T extends \"mutation\"\n  ? MutationCallback\n  : T extends \"intersection\"\n    ? IntersectionObserverCallback\n    : T extends \"resize\"\n      ? ResizeObserverCallback\n      : never;\n\ntype ObserverOptions<T extends ObserverType> = T extends \"intersection\" ? IntersectionObserverInit : never;\n\ntype ObserverClassType<T extends ObserverType> = T extends \"mutation\"\n  ? typeof ExtendedMutationObserver\n  : T extends \"intersection\"\n    ? typeof IntersectionObserver\n    : T extends \"resize\"\n      ? typeof ResizeObserver\n      : never;\n\ntype ObserverInstanceType<T extends ObserverType> = T extends \"mutation\"\n  ? ExtendedMutationObserver\n  : T extends \"intersection\"\n    ? IntersectionObserver\n    : T extends \"resize\"\n      ? ResizeObserver\n      : never;\n\n/**\n * This utility ensures observers are created only for browser contexts.\n *\n * @param type - the type of observer to create\n * @param callback - the observer callback\n * @param options - the observer options\n */\nexport function createObserver<T extends ObserverType>(\n  type: T,\n  callback: ObserverCallbackType<T>,\n  options?: ObserverOptions<T>,\n): ObserverInstanceType<T> | undefined {\n  if (!isBrowser()) {\n    return undefined;\n  }\n\n  const Observer = getObserver<T>(type);\n  return new Observer(callback as any, options) as any;\n}\n\nfunction getObserver<T extends ObserverType>(type: T): ObserverClassType<T> {\n  // based on https://github.com/whatwg/dom/issues/126#issuecomment-1049814948\n  class ExtendedMutationObserver extends window.MutationObserver implements ExtendedMutationObserver {\n    private observedEntry: Array<{\n      target: Node;\n      options?: MutationObserverInit;\n    }> = [];\n\n    private readonly callback: MutationCallback;\n\n    constructor(callback: MutationCallback) {\n      super(callback);\n      this.callback = callback;\n    }\n\n    observe(target: Node, options?: MutationObserverInit): void {\n      this.observedEntry.push({ target, options });\n\n      return super.observe(target, options);\n    }\n\n    unobserve(target: Node): void {\n      const newObservedEntries = this.observedEntry.filter((observed) => observed.target !== target);\n      this.observedEntry = [];\n      this.callback(super.takeRecords(), this);\n      this.disconnect();\n      newObservedEntries.forEach((observed) => this.observe(observed.target, observed.options));\n    }\n  }\n\n  return (function () {\n    return (\n      type === \"intersection\"\n        ? window.IntersectionObserver\n        : type === \"mutation\"\n          ? ExtendedMutationObserver\n          : window.ResizeObserver\n    ) as any;\n  })();\n}\n"],"names":["CSS","TileGroup","items","getSlottedTiles","this","slotEl","assignedElements","flatten","filter","el","matches","mutationObserver","createObserver","updateTiles","selectItem","item","forEach","matchingEl","selectionMode","selected","updateSelectedItems","calciteTileGroupSelect","emit","setSlotEl","selectedItems","length","pop","indexOf","alignment","interactive","layout","scale","selectionAppearance","scaleWatcher","handleSelectionModeOrAppearanceChange","connectedCallback","observe","childList","componentDidRender","updateHostInteraction","disconnectedCallback","disconnect","calciteInternalTileKeyEventListener","event","composedPath","includes","preventDefault","stopPropagation","interactiveItems","disabled","detail","key","focusElementInGroup","target","calciteTileSelectHandler","render","role","h","InteractiveContainer","label","class","onSlotchange","ref","interceptedClick","HTMLElement","prototype","click","call","onPointerDown","nonBubblingWhenDisabledMouseEvents","onNonBubblingWhenDisabledMouseEvent","stopImmediatePropagation","captureOnlyOptions","capture","component","setAttribute","contains","document","activeElement","blur","element","addEventListener","blockInteraction","removeEventListener","restoreInteraction","removeAttribute","children","inert","type","callback","options","isBrowser","Observer","ExtendedMutationObserver","window","MutationObserver","constructor","super","observedEntry","push","unobserve","newObservedEntries","observed","takeRecords","IntersectionObserver","ResizeObserver","getObserver"],"sourceRoot":""}