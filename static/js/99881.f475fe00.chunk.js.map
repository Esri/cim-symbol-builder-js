{"version":3,"file":"static/js/99881.f475fe00.chunk.js","mappings":";8JAIA,SAASA,EAAEC,GACT,MAAa,MAANA,EAAY,IAAM,GAC3B,CACA,SAASC,EAAED,EAAGE,EAAGC,IACdH,EAAEE,KAAOF,EAAEG,IAAMC,EAAAA,EAAEC,KAAK,IAAIL,EAAEM,GAAGC,eAAeL,EAAEM,mBAAmBL,EAAEK,2BAC1E,CACA,SAASC,EAAET,GACT,OAAOA,EAAEU,QAAUV,EAAEW,UACvB,oCCDA,MAAMX,EAAIA,IAAQ,CAAC,EAAG,EAAG,EAAG,EAAG,GAPpBY,KAAKC,IACZ,IAAIT,EAAI,GACR,IAAK,IAAID,EAAI,EAAGA,EAAIU,EAAGV,IACrBC,IAA4B,OAArB,EAAIU,KAAKC,UAAoB,GAAGP,SAAS,IAAIQ,UAAU,GAChE,OAAOZ,CAAC,IACPa,KAAK,sECJV,SAASlB,IACP,MAAQmB,SAAUC,GAAMC,KACxBD,GAAKE,YAAYC,UAAUC,MAAMC,KAAKJ,KACxC,CACA,SAASpB,EAAEmB,GACTA,EAAEM,OAAOP,UAAYC,EAAEO,gBACzB,CACA,MAAMxB,EAAI,CAAC,YAAa,UAAW,SACnC,SAASD,EAAEkB,GACTA,EAAEM,OAAOP,WAAaC,EAAEQ,2BAA4BR,EAAEO,iBACxD,CACA,MAAMvB,EAAI,CAAEyB,SAAS,GACrB,SAASC,EAAEV,GACT,GAAIA,EAAED,SAEJ,OADAC,EAAEb,GAAGwB,aAAa,gBAAiB,QAASX,EAAEb,GAAGyB,SAASC,SAASC,gBAAkBD,SAASC,cAAcC,YAKhH,SAAWf,GACTA,EAAEb,GAAGiB,MAAQxB,EAEf,SAAWoB,GACTA,EAAEgB,iBAAiB,cAAenC,EAAGG,GAAID,EAAEkC,SAAShC,GAAMe,EAAEgB,iBAAiB/B,EAAGH,EAAGE,IACrF,CAJkBkC,CAAElB,EAAEb,GACtB,CAPwHgC,CAAEnB,IAW1H,SAAWA,UACFA,EAAEb,GAAGiB,MAEd,SAAWJ,GACTA,EAAEoB,oBAAoB,cAAevC,EAAGG,GAAID,EAAEkC,SAAShC,GAAMe,EAAEoB,oBAAoBnC,EAAGH,EAAGE,IAC3F,CAJqBqC,CAAErB,EAAEb,GACzB,EAVEmC,CAAEtB,GAAIA,EAAEb,GAAGoC,gBAAgB,gBAC7B,CAaA,MAAMC,EACO,wBACVC,EAAIA,EAAGC,SAAU1B,EAAGD,SAAUd,KAAQS,EAAAA,EAAC,eAAciC,EAAAA,EAAAA,IAAEH,aAAuBvC,KAAKe,mEClCtF4B,eAAe3C,EAAEe,SACTA,EAAE6B,kBACV,CACAD,eAAe7C,EAAEiB,GACf,SAAUA,EAAE6B,oBAAsB/C,EAAAA,EAAAA,KAChC,OAAOkB,EAAE8B,gBAAiB,IAAIC,SAAS/C,GAAMgD,uBAAsB,IAAMhD,OAC7E,mDCNA,MAAMJ,EAAoB,IAAIqD,IAAOf,EAAI,CACvCgB,MAAO,EACPC,MAAO,EACPC,KAAM,EACNlD,KAAM,EACNmD,MAAO,EACPC,IAAK,IAKP,SAASvD,EAAEiB,KAAMhB,IAHjB,SAAWgB,GACT,OAAOkB,EAAElB,IAAMkB,EAAE5B,EAAAA,EACnB,EAEOmC,CAAEzB,IAEPuC,QAAQvC,GAAGK,KAAKJ,KAAM,YAAa,6EAA8EjB,EACnH,CACA,IAAIF,EACJ,MAAM4B,EAAI,CACRyB,MAAQnC,GAAMjB,EAAE,QAASiB,GACzBoC,KAAOpC,GAAMjB,EAAE,OAAQiB,GACvBd,KAAOc,GAAMjB,EAAE,OAAQiB,GACvBqC,MAAQrC,GAAMjB,EAAE,QAASiB,GACzBkC,MAAQlC,GAAMjB,EAAE,QAASiB,GACzBwC,WAEF,SAAWxC,GAAKyC,UAAWzD,EAAG0D,KAAMzD,EAAG0D,UAAWjD,EAAGkD,eAAgB/D,IACnE,MAAMsC,EAAI,GAAGnB,KAAW,cAANA,EAAoB,GAAKhB,IAAIC,IAC/C,GAAIL,EAAEiE,IAAI1B,GACR,OACFvC,EAAEkE,IAAI3B,GACN,MAAMQ,EAAIoB,MAAMC,QAAQtD,GACxBiC,IAAM7C,IAAMA,EAAI,IAAImE,KAAKC,WAAW,KAAM,CAAEC,MAAO,OAAQC,KAAM,iBAEjErE,EAAE,OADQ,IAAIE,MAAMe,0CAAgD,WAANnB,EAAiB,mBAAqB,IAAIA,OAAOa,EAAI,QAAQiC,EAAI7C,EAAEuE,OAAO3D,EAAED,KAAK6B,GAAM,IAAIA,QAAS,IAAI5B,gBAAkB,KAE1L,oDClCA,SAAS4D,EAAEvE,EAAGC,EAAGH,GACf,KAAKa,EAAAA,EAAAA,KACH,OACF,MAAMM,EAGR,SAAWjB,GACT,MAAMC,UAAUuE,OAAOC,iBACrBC,WAAAA,CAAYzD,GACV0D,MAAM1D,GAAIC,KAAK0D,cAAgB,GAAI1D,KAAK2D,SAAW5D,CACrD,CACA6D,OAAAA,CAAQ7D,EAAGf,GACT,OAAOgB,KAAK0D,cAAcG,KAAK,CAAExD,OAAQN,EAAG+D,QAAS9E,IAAMyE,MAAMG,QAAQ7D,EAAGf,EAC9E,CACA+E,SAAAA,CAAUhE,GACR,MAAMf,EAAIgB,KAAK0D,cAAcM,QAAQrF,GAAMA,EAAE0B,SAAWN,IACxDC,KAAK0D,cAAgB,GAAI1D,KAAK2D,SAASF,MAAMQ,cAAejE,MAAOA,KAAKkE,aAAclF,EAAEgC,SAASrC,GAAMqB,KAAK4D,QAAQjF,EAAE0B,OAAQ1B,EAAEmF,UAClI,EAEF,MACe,iBAANhF,EAAuBwE,OAAOa,qBAA6B,aAANrF,EAAmBC,EAAIuE,OAAOc,cAE9F,CAnBY1C,CAAE5C,GACZ,OAAO,IAAIiB,EAAEhB,EAAGH,EAClB,8DCJA,MAAMD,GAAIc,EAAAA,EAAAA,IAAET,EAAAA,sLCUZ,MAAMJ,EACI,SADJA,EAEe,uBAFfA,EAGW,kBAHXA,EAIW,iBAJXA,EAKW,iBALXA,EAMW,iBANXA,EAOiB,yBAPjBA,EAQW,iBARXA,EASkB,0BATlBA,EAUe,sBAVfA,EAWkB,yBACrByF,EACQ,UACRC,EAAIC,EAAAA,EAAC,oqOACR,MAAMC,UAAUC,EAAAA,GACdjB,WAAAA,GACEC,SAASiB,WAAY1E,KAAK2E,KAAO,mBAAkBC,EAAAA,EAAAA,OAAO5E,KAAK6E,UAAWC,EAAAA,EAAAA,KAAK9E,KAAK+E,SAAW,GAAG/E,KAAK2E,cAAe3E,KAAKgF,YAAc,GAAGhF,KAAK2E,iBAAkB3E,KAAKiF,kBAAmBC,EAAAA,EAAAA,GAAE,YAAY,IAAMlF,KAAK6B,kBAAkB7B,KAAKmF,QAAS,EAAInF,KAAKoF,WAAa,QAASpF,KAAKqF,SAAU,EAAIrF,KAAKF,UAAW,EAAIE,KAAKsF,YAAa,EAAItF,KAAKuF,aAAc,EAAIvF,KAAKwF,WAAY,EAAIxF,KAAKyF,SAAU,EAAIzF,KAAK0F,UAAWC,EAAAA,EAAAA,GAAE,CAAEC,UAAU,IAAO5F,KAAK6F,MAAQ,IAAK7F,KAAK8F,aAAc,CAC3d,QAEE9F,KAAK+F,WAAa,CAAEZ,OAAQ,EAAGa,UAAW,EAAGZ,WAAY,EAAGC,QAAS,EAAGvF,SAAU,EAAGwF,WAAY,EAAGW,KAAM,EAAGV,YAAa,EAAGC,UAAW,EAAGU,MAAO,EAAGT,QAAS,EAAGU,iBAAkB,EAAGN,MAAO,EAAGO,KAAM,EAAGN,YAAa,EACxN,QAEE9F,KAAKqG,OAAS/B,CAChB,CAIA,cAAMgC,SACEC,EAAAA,EAAAA,GAAEvG,MAAOA,KAAK6E,SAAS2B,OAAOC,OACtC,CAGAC,iBAAAA,GACEjD,MAAMiD,oBAAqB1G,KAAKiF,kBAAkBrB,QAAQ5D,KAAKd,GAAI,CAAEyH,WAAW,EAAIC,SAAS,GAC/F,CACA,UAAMC,GACN,CACAC,OAAAA,IACEC,EAAAA,EAAAA,GAAE/G,KACJ,CACAgH,MAAAA,GACA,CACAC,oBAAAA,GACExD,MAAMwD,uBAAwBjH,KAAKiF,kBAAkBf,YACvD,CAGAgD,uBAAAA,CAAwBlI,GACtB,MAAMS,EAAIT,EAAEqB,OAAO8G,iBAAiB,CAClCC,SAAS,IACRpD,QAAQlF,GAAMA,GAAGuI,QAAQ,qBAAoB,GAChD5H,IAAMA,EAAE6H,iBAAmBtH,KAAK6E,SAAS2B,MAC3C,CAGAe,mBAAAA,GACE,MAAQnB,KAAMpH,EAAG8G,YAAajH,GAAMmB,KAAMP,EAAI,CAC5C,CAACb,IAAkB,EACnB,CAACA,GAAyBC,GAE5B,OAAOG,GAAIK,EAAAA,EAAAA,GAAE,iBAAkBU,EAAAA,EAAC,eAAchB,EAAAA,EAAAA,IAAEU,MAAMT,WAAa,IACrE,CACAwI,mBAAAA,GACE,MAAQhC,UAAWxG,EAAG0G,SAAU7G,EAAGmG,YAAavF,EAAGsF,SAAUjG,GAAMkB,KACnE,OAAOD,EAAAA,EAAC,wBAAwBjB,GAAK4C,EAAAA,8BAA4B3C,EAAAA,EAAAA,IAAEH,SAAuBa,GAAKiC,EAAAA,kBAAiB1C,EAAIH,EAAE2G,UAAY,YACpI,CACAiC,mBAAAA,GACE,MAAQhC,QAASzG,EAAGiH,KAAMpH,EAAGgH,MAAOpG,EAAGP,GAAIJ,EAAGyG,YAAatE,EAAGuE,UAAWnC,GAAMrD,KAAMwB,EAAU,MAAN/B,EAAY,IAAM,IAAKiI,EAAI1I,EAAIe,EAAAA,EAAC,iCAAiCC,KAAK0F,SAASD,kBAAkBjE,sBAAwB,KAAMN,EAAIrC,EAAIkB,EAAAA,EAAC,wBAAuBhB,EAAAA,EAAAA,IAAE,CAAE,CAACH,GAAsByE,gBAAiBpC,WAAWpC,aAAY8I,EAAAA,EAAAA,GAAE3H,KAAK6F,yBAA2B,KAAMlH,EAAI+I,GAAKxG,EAAGG,EAAI1C,GAAKG,EAAE2C,UAAUmG,OAAQrG,EAAIxB,EAAAA,EAAC,eAAchB,EAAAA,EAAAA,IAAE,CAC/Z,CAACH,IAAkB,EACnB,CAACA,GAAwBI,0BAE3B,OAAOqC,GAAIhC,EAAAA,EAAAA,GAAE,iBAAkBU,EAAAA,EAAC,gCAA+BhB,EAAAA,EAAAA,IAAEH,MAAoBD,IAAI4C,WAAa,IACxG,CACAsG,YAAAA,GACE,MAAQ1C,OAAQnG,EAAGqG,QAASxG,EAAGiB,SAAUL,EAAGwG,KAAMnH,EAAG2G,QAASxE,EAAG6E,YAAazC,EAAG6C,MAAO1E,EAAG4E,KAAMsB,EAAGlC,UAAWtE,EAAG8D,YAAarG,EAAGoG,SAAU1D,EAAGqE,SAAUnE,GAAMvB,KAAMS,EAAIe,GAAKkG,GAAK,GAAItG,EAAIF,EAAIK,EAAEuG,eAAeC,QAAQ,UAAWtH,GAAKA,EAAGuH,EAAI,CAC7O,CAACpJ,IAAW,EACZ,CAACA,GAAsByE,EACvB,CAACzE,GAAkBC,GAClBoJ,EAAIlI,EAAAA,EAAC,GAAGC,KAAKyH,wBAAwBzH,KAAKuH,yBAAyBzI,GAAKoC,IAAK7B,EAAAA,EAAAA,GAAE,oBAAqBU,EAAAA,EAAC,eAAchB,EAAAA,EAAAA,IAAEH,cAAqC,KAC7J,OAAOoB,KAAKsF,WAAavF,EAAAA,EAAC,wBAAwBmB,EAAIvC,EAAI,OAAS+C,EAAAA,gBAAeT,mBAAmBjB,KAAKF,SAAWE,KAAKF,SAAW,mBAAmBsB,kBAAkBpC,YAAWD,EAAAA,EAAAA,IAAEiJ,SAAS3G,GAAKK,EAAAA,4BAA2B1B,KAAKF,SAAW,KAAO,IAAM4B,EAAAA,OAAKwG,EAAAA,EAAAA,GAAElI,KAAK6E,aAAaoD,WAAalI,EAAAA,EAAC,0BAA0BmB,EAAIvC,EAAI,OAAS+C,EAAAA,gBAAeT,gBAAgBG,kBAAkBpC,YAAWD,EAAAA,EAAAA,IAAEiJ,gBAAgBvI,QAAQ4B,GAAKK,EAAAA,gBAAejC,EAAI,KAAO,IAAMiC,EAAAA,OAAKwG,EAAAA,EAAAA,GAAElI,KAAK6E,aAAaoD,YACre,CACAE,MAAAA,GACE,OAAOC,EAAAA,EAAAA,GAAE,CAAEtI,SAAUE,KAAKF,SAAU2B,SAAU1B,EAAAA,EAAC,GAAGC,KAAK6H,4BAA4BxD,iBAAyBrE,KAAKkH,kCAAkClH,KAAKwH,yBAC1J,GAEFa,EAAAA,EAAAA,GAAE,iBAAkB7D,gFCzDP5F,GAAQI,EAAAA,EAAAA,IA7BrB,cAAoBe,EAAAA,GAApByD,WAAAA,GAAA,SAAAkB,WACE,KAAG4D,IAAYxJ,EAAAA,EAiBhB,CAfCqJ,MAAAA,CAAOrJ,EAAYE,GAEjB,OADAgB,KAAKsI,IAAMxJ,EACJE,CACR,CAEQuJ,MAAAA,CAAOzJ,GAAkBE,EAAGe,IAQnC,OAPIf,IAAMgB,KAAKsI,OAIb3J,EAAAA,EAAAA,IAAkBG,GAClBkB,KAAKsI,IAAMtJ,GAENe,CACR,mFCsGH,MAAMpB,EAAiC6J,CACrC5J,EACAI,KAEA,MAAMe,EAAWnB,EAAO6J,KACxB,QAAI,IAAA1I,EACF,OAAO,EAET,IAAK,MAAMnB,KAAOmB,EASfnB,EAA2D8J,OAC1D1J,GAAA,GAIFL,EAA+BC,EAAKI,GAEtC,OAAO,CAAI,EASPS,EAAkCb,IACtC,IAAII,EAAQe,EACZ,EAAG,CACD,QAAI,KAACf,EAASJ,EAAI+J,MAChB,MAEF5I,EAAWf,EAAOyJ,KAClB1I,EAAS6I,OAAOhK,GAChBA,EAAMI,CACR,OAA4B,IAAnBe,GAAU8I,KAAA,EAGf/J,EAA6BF,IAGjC,IAAK,IAAII,EAASA,EAASJ,EAAI+J,KAAW/J,EAAMI,EAAQ,CACtD,IAAIe,EAAWf,EAAOyJ,KACtB,QAAI,IAAA1I,EACFf,EAAOyJ,KAA2B1I,EAAW,IAAIiC,SAC5C,GAAIjC,EAAS6C,IAAIhE,GAGtB,MAEFmB,EAAS8C,IAAIjE,GACb8C,EAAqB1C,EACtB,GAUH,SAAS0I,EAAyC9I,QAAA,IAC5CoB,KAAKyI,MACPhJ,EAA+BO,MAC/BA,KAAK2I,KAAW/J,EAChBE,EAA0BkB,OAE1BA,KAAK2I,KAAW/J,CAEpB,CAuBA,SAASG,EAEPH,EACAI,GAAA,EACAe,EAAgB,GAEhB,MAAMjB,EAAQkB,KAAK8I,KACbpB,EAAW1H,KAAKyI,KACtB,QAAI,IAAAf,GAA4C,IAAlBA,EAASmB,KAGvC,GAAI7J,EACF,GAAI8D,MAAMC,QAAQjE,GAIhB,IAAK,IAAIF,EAAImB,EAAenB,EAAIE,EAAM8I,OAAQhJ,IAC5CD,EAA+BG,EAAMF,IAAA,GACrCa,EAA+BX,EAAMF,SAErB,MAATE,IAITH,EAA+BG,GAAA,GAC/BW,EAA+BX,SAGjCH,EAA+BqB,KAAMpB,EAEzC,CAKA,MAAM8C,EAAwB9C,IACvBA,EAAkBuE,MAAQpD,EAAAA,GAASgJ,QACrCnK,EAAkBoK,OACjBjK,EACDH,EAAkBqK,OAA8BvB,EAClD,EAoBG,MAAgBtG,UAAuBpC,EAAAA,GAA7CwE,WAAAA,GAAA,SAAAkB,WAYW,KAAwB+D,UAAA,CAgFlC,CAzEUS,IAAAA,CACPtK,EACAI,EACAe,GAEA0D,MAAMyF,KAAatK,EAAMI,EAAQe,GACjCjB,EAA0BkB,MAC1BA,KAAKmJ,YAAcvK,EAAKwK,IACzB,CAcQV,IAAAA,CACP9J,EACAI,GAAA,GAEIJ,IAAgBoB,KAAKmJ,cACvBnJ,KAAKmJ,YAAcvK,EACfA,EACFoB,KAAKqJ,gBAELrJ,KAAKsJ,kBAGLtK,IACFL,EAA+BqB,KAAMpB,GACrCa,EAA+BO,MAElC,CAYDuJ,QAAAA,CAASvK,GACP,IAAIJ,EAAAA,EAAAA,IAAmBoB,KAAKwJ,MAC1BxJ,KAAKwJ,KAAOC,KAAWzK,EAAOgB,UACzB,CAML,MAAMpB,EAAY,IAAKoB,KAAKwJ,KAAOV,MACnClK,EAAUoB,KAAK0J,MAAqB1K,EACnCgB,KAAKwJ,KAAyBC,KAAW7K,EAAWoB,KAAM,EAC5D,CACF,CAQSsJ,YAAAA,GAAiB,CACjBD,WAAAA,GAAgB,ECtXf,MAAAtJ,EAAY4J,IAAmB,IAAIjC,EAKhD,MAAMA,GAmBN,MAAMjI,EAAmC,IAAImK,QAqHhC7K,GAAMJ,EAAAA,EAAAA,IA9GnB,cAA2BC,EAKzBuJ,MAAAA,CAAOvJ,GACL,OAAOI,EAAAA,EACR,CAEQuJ,MAAAA,CAAO3J,GAAoBD,IAClC,MAAMoB,EAAapB,IAAQqB,KAAK6J,EAahC,OAZI9J,QAAA,IAAcC,KAAK6J,GAGrB7J,KAAK8J,QAAA,IAEH/J,GAAcC,KAAK+J,KAAuB/J,KAAKgK,MAGjDhK,KAAK6J,EAAOlL,EACZqB,KAAKiK,GAAWrL,EAAKkF,SAASoG,KAC9BlK,KAAK8J,GAAiB9J,KAAKgK,GAAWpL,EAAKuL,UAEtCnL,EAAAA,EACR,CAEO8K,EAAAA,CAAgB9K,GAItB,GAHKgB,KAAKmJ,cACRnK,OAAA,GAEuB,mBAAdgB,KAAK6J,EAAqB,CAUnC,MAAMjL,EAAUoB,KAAKiK,IAAYG,WACjC,IAAIzL,EACFc,EAAiC4K,IAAIzL,QAAA,IACnCD,IACFA,EAAyB,IAAIiL,QAC7BnK,EAAiC6K,IAAI1L,EAASD,SAAA,IAE5CA,EAAuB0L,IAAIrK,KAAK6J,IAClC7J,KAAK6J,EAAKzJ,KAAKJ,KAAKiK,QAAA,GAEtBtL,EAAuB2L,IAAItK,KAAK6J,EAAM7K,QAAA,IAElCA,GACFgB,KAAK6J,EAAKzJ,KAAKJ,KAAKiK,GAAUjL,EAEjC,MACEgB,KAAK6J,EAAsBrD,MAAQxH,CAEvC,CAED,MAAA+K,GACE,MAA4B,mBAAd/J,KAAK6J,EACfpK,EACG4K,IAAIrK,KAAKiK,IAAYG,aACpBC,IAAIrK,KAAK6J,GACb7J,KAAK6J,GAAMrD,KAChB,CAEQ8C,YAAAA,GAKHtJ,KAAK+J,KAAuB/J,KAAKgK,IACnChK,KAAK8J,QAAA,EAER,CAEQT,WAAAA,GAGPrJ,KAAK8J,GAAgB9J,KAAKgK,GAC3B","sources":["../node_modules/@esri/calcite-components/dist/chunks/component.js","../node_modules/@esri/calcite-components/dist/chunks/guid.js","../node_modules/@esri/calcite-components/dist/chunks/interactive.js","../node_modules/@esri/calcite-components/dist/chunks/loadable.js","../node_modules/@esri/calcite-components/dist/chunks/logger.js","../node_modules/@esri/calcite-components/dist/chunks/observers.js","../node_modules/@esri/calcite-components/dist/chunks/useT9n.js","../node_modules/@esri/calcite-components/dist/components/calcite-action/customElement.js","../node_modules/lit-html/src/directives/keyed.ts","../node_modules/lit-html/src/async-directive.ts","../node_modules/lit-html/src/directives/ref.ts"],"sourcesContent":["import { l as t } from \"./logger.js\";\n/*! All material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\nv3.0.3 */\nfunction s(i) {\n  return i === \"l\" ? \"m\" : \"s\";\n}\nfunction a(i, r, n) {\n  !i[r] && !i[n] && t.warn(`[${i.el.localName}] \"${r.toString()}\" or \"${n.toString()}\" is required.`);\n}\nfunction g(i) {\n  return i.hidden || i.itemHidden;\n}\nexport {\n  s as g,\n  g as i,\n  a as w\n};\n","/*! All material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\nv3.0.3 */\nfunction e(r) {\n  return r.map((o) => {\n    let t = \"\";\n    for (let n = 0; n < o; n++)\n      t += ((1 + Math.random()) * 65536 | 0).toString(16).substring(1);\n    return t;\n  }).join(\"-\");\n}\nconst i = () => e([2, 1, 1, 1, 3]);\nexport {\n  i as g\n};\n","import { html as o } from \"lit-html\";\nimport { safeClassMap as c } from \"@arcgis/lumina\";\n/*! All material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\nv3.0.3 */\nfunction s() {\n  const { disabled: e } = this;\n  e || HTMLElement.prototype.click.call(this);\n}\nfunction i(e) {\n  e.target.disabled && e.preventDefault();\n}\nconst r = [\"mousedown\", \"mouseup\", \"click\"];\nfunction a(e) {\n  e.target.disabled && (e.stopImmediatePropagation(), e.preventDefault());\n}\nconst n = { capture: !0 };\nfunction m(e) {\n  if (e.disabled) {\n    e.el.setAttribute(\"aria-disabled\", \"true\"), e.el.contains(document.activeElement) && document.activeElement.blur(), l(e);\n    return;\n  }\n  u(e), e.el.removeAttribute(\"aria-disabled\");\n}\nfunction l(e) {\n  e.el.click = s, d(e.el);\n}\nfunction d(e) {\n  e.addEventListener(\"pointerdown\", i, n), r.forEach((t) => e.addEventListener(t, a, n));\n}\nfunction u(e) {\n  delete e.el.click, f(e.el);\n}\nfunction f(e) {\n  e.removeEventListener(\"pointerdown\", i, n), r.forEach((t) => e.removeEventListener(t, a, n));\n}\nconst v = {\n  container: \"interaction-container\"\n}, p = ({ children: e, disabled: t }) => o`<div class=${c(v.container)} .inert=${t}>${e}</div>`;\nexport {\n  p as I,\n  m as u\n};\n","import { i as a } from \"./runtime.js\";\n/*! All material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\nv3.0.3 */\nasync function t(e) {\n  await e.componentOnReady();\n}\nasync function r(e) {\n  if (await e.componentOnReady(), !!a())\n    return e.requestUpdate(), new Promise((n) => requestAnimationFrame(() => n()));\n}\nexport {\n  t as a,\n  r as c\n};\n","import { l as g } from \"./runtime.js\";\n/*! All material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\nv3.0.3 */\nconst s = /* @__PURE__ */ new Set(), d = {\n  trace: 0,\n  debug: 1,\n  info: 2,\n  warn: 4,\n  error: 8,\n  off: 10\n};\nfunction p(e) {\n  return d[e] >= d[g];\n}\nfunction r(e, ...n) {\n  if (!p(e))\n    return;\n  console[e].call(this, \"%ccalcite\", \"background: #007AC2; color: #fff; border-radius: 4px; padding: 2px 4px;\", ...n);\n}\nlet a;\nconst m = {\n  debug: (e) => r(\"debug\", e),\n  info: (e) => r(\"info\", e),\n  warn: (e) => r(\"warn\", e),\n  error: (e) => r(\"error\", e),\n  trace: (e) => r(\"trace\", e),\n  deprecated: $\n};\nfunction $(e, { component: n, name: t, suggested: o, removalVersion: i }) {\n  const l = `${e}:${e === \"component\" ? \"\" : n}${t}`;\n  if (s.has(l))\n    return;\n  s.add(l);\n  const c = Array.isArray(o);\n  c && !a && (a = new Intl.ListFormat(\"en\", { style: \"long\", type: \"disjunction\" }));\n  const f = `[${t}] ${e} is deprecated and will be removed in ${i === \"future\" ? \"a future version\" : `v${i}`}.${o ? ` Use ${c ? a.format(o.map((u) => `\"${u}\"`)) : `\"${o}\"`} instead.` : \"\"}`;\n  r(\"warn\", f);\n}\nexport {\n  m as l\n};\n","import { i as o } from \"./runtime.js\";\n/*! All material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\nv3.0.3 */\nfunction b(r, n, i) {\n  if (!o())\n    return;\n  const e = c(r);\n  return new e(n, i);\n}\nfunction c(r) {\n  class n extends window.MutationObserver {\n    constructor(e) {\n      super(e), this.observedEntry = [], this.callback = e;\n    }\n    observe(e, t) {\n      return this.observedEntry.push({ target: e, options: t }), super.observe(e, t);\n    }\n    unobserve(e) {\n      const t = this.observedEntry.filter((s) => s.target !== e);\n      this.observedEntry = [], this.callback(super.takeRecords(), this), this.disconnect(), t.forEach((s) => this.observe(s.target, s.options));\n    }\n  }\n  return function() {\n    return r === \"intersection\" ? window.IntersectionObserver : r === \"mutation\" ? n : window.ResizeObserver;\n  }();\n}\nexport {\n  b as c\n};\n","import { makeT9nController as o } from \"@arcgis/components-controllers\";\nimport { g as t } from \"./runtime.js\";\n/*! All material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\nv3.0.3 */\nconst s = o(t);\nexport {\n  s as u\n};\n","import { c as y } from \"../../chunks/runtime.js\";\nimport { html as e } from \"lit-html\";\nimport { keyed as g } from \"lit-html/directives/keyed.js\";\nimport { createRef as C, ref as $ } from \"lit-html/directives/ref.js\";\nimport { LitElement as z, safeClassMap as n, nothing as c } from \"@arcgis/lumina\";\nimport { g as w } from \"../../chunks/guid.js\";\nimport { u as I, I as E } from \"../../chunks/interactive.js\";\nimport { c as T } from \"../../chunks/loadable.js\";\nimport { c as L } from \"../../chunks/observers.js\";\nimport { g as S } from \"../../chunks/component.js\";\nimport { u as F } from \"../../chunks/useT9n.js\";\nimport { css as H } from \"@lit/reactive-element/css-tag.js\";\n/*! All material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\nv3.0.3 */\nconst i = {\n  button: \"button\",\n  buttonTextVisible: \"button--text-visible\",\n  buttonCompact: \"button--compact\",\n  indicatorText: \"indicator-text\",\n  iconContainer: \"icon-container\",\n  slotContainer: \"slot-container\",\n  slotContainerHidden: \"slot-container--hidden\",\n  textContainer: \"text-container\",\n  textContainerVisible: \"text-container--visible\",\n  indicatorWithIcon: \"indicator-with-icon\",\n  indicatorWithoutIcon: \"indicator-without-icon\"\n}, O = {\n  tooltip: \"tooltip\"\n}, R = H`:host{box-sizing:border-box;background-color:var(--calcite-color-foreground-1);color:var(--calcite-color-text-2);font-size:var(--calcite-font-size--1)}:host *{box-sizing:border-box}:host([disabled]){cursor:default;-webkit-user-select:none;user-select:none;opacity:var(--calcite-opacity-disabled)}:host([disabled]) *,:host([disabled]) ::slotted(*){pointer-events:none}:host{display:flex;cursor:pointer;background-color:transparent;--calcite-internal-action-text-color: var(--calcite-color-text-3)}:host([drag-handle]){cursor:move;--calcite-internal-action-text-color: var(--calcite-color-border-input);--calcite-internal-action-padding-inline: var(--calcite-spacing-xxs)}:host,.button{border-radius:var(--calcite-action-corner-radius, var(--calcite-action-corner-radius-start-start, var(--calcite-corner-radius)) var(--calcite-action-corner-radius-start-end, var(--calcite-corner-radius)) var(--calcite-action-corner-radius-end-end, var(--calcite-corner-radius)) var(--calcite-action-corner-radius-end-start, var(--calcite-corner-radius)))}.button{position:relative;margin:0;display:flex;inline-size:auto;align-items:center;justify-content:flex-start;border-style:none;font-family:var(--calcite-font-family);font-size:var(--calcite-font-size--2);line-height:1rem;font-weight:var(--calcite-font-weight-medium);outline-color:transparent;background-color:var(--calcite-action-background-color, var(--calcite-color-foreground-1));color:var(--calcite-action-text-color, var(--calcite-internal-action-text-color));text-align:unset;flex:1 0 auto;cursor:inherit}.button:hover,.button:focus{background-color:var(--calcite-action-background-color-hover, var(--calcite-color-foreground-2));color:var(--calcite-action-text-color-press, var(--calcite-action-text-color-pressed, var(--calcite-color-text-1)))}.button:focus{outline:2px solid var(--calcite-color-focus, var(--calcite-ui-focus-color, var(--calcite-color-brand)));outline-offset:calc(-2px*(1 - (2*clamp(0,var(--calcite-offset-invert-focus),1))))}.button:active{background-color:var(--calcite-action-background-color-press, var(--calcite-action-background-color-pressed, var(--calcite-color-foreground-3)))}.icon-container{pointer-events:none;margin:0;display:flex;align-items:center;justify-content:center;min-inline-size:1rem;min-block-size:1.5rem}.text-container{margin:0;inline-size:0px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;line-height:1.5rem;opacity:0;transition-property:opacity;transition-duration:.15s;transition-timing-function:cubic-bezier(.4,0,.2,1);transition-property:margin;transition-property:inline-size}.text-container--visible{inline-size:auto;flex:1 1 auto;opacity:1}:host([active]) .button,:host([active]) .button:hover,:host([active]) .button:focus{color:var(--calcite-action-text-color-press, var(--calcite-action-text-color-pressed, var(--calcite-color-text-1)));background-color:var(--calcite-action-background-color-press, var(--calcite-action-background-color-pressed, var(--calcite-color-foreground-3)))}:host([active]) .button:active{background-color:var(--calcite-action-background-color, var(--calcite-color-foreground-1))}:host([loading]) .button:hover,:host([loading]) .button:focus{background-color:var(--calcite-action-background-color, var(--calcite-color-foreground-1))}:host([loading]) .text-container{opacity:var(--calcite-opacity-disabled)}:host([loading]) calcite-loader[inline]{margin-inline-end:0px}:host([appearance=transparent]):host([active]) .button{background-color:var(--calcite-color-transparent-hover)}:host([appearance=transparent]) .button{background-color:transparent;transition-property:box-shadow;transition-duration:.15s;transition-timing-function:cubic-bezier(.4,0,.2,1)}:host([appearance=transparent]) .button:hover,:host([appearance=transparent]) .button:focus{background-color:var(--calcite-color-transparent-hover)}:host([appearance=transparent]) .button:active{background-color:var(--calcite-color-transparent-press)}:host([data-active]) .button{outline:2px solid var(--calcite-color-focus, var(--calcite-ui-focus-color, var(--calcite-color-brand)));outline-offset:calc(-2px*(1 - (2*clamp(0,var(--calcite-offset-invert-focus),1))))}:host([scale=s]) .button{font-size:var(--calcite-font-size--2);line-height:1rem;font-weight:var(--calcite-font-weight-normal);padding-inline:var(--calcite-internal-action-padding-inline, .5rem);padding-block:var(--calcite-internal-action-padding-block, var(--calcite-spacing-xxs))}:host([scale=s]) .button--text-visible .icon-container{margin-inline-end:.5rem}:host([scale=m]) .button{font-size:var(--calcite-font-size--1);line-height:1rem;font-weight:var(--calcite-font-weight-normal);padding-inline:var(--calcite-internal-action-padding-inline, 1rem);padding-block:var(--calcite-internal-action-padding-block, var(--calcite-spacing-md))}:host([scale=m]) .button--text-visible .icon-container{margin-inline-end:.75rem}:host([scale=l]) .button{font-size:var(--calcite-font-size-0);line-height:1.25rem;font-weight:var(--calcite-font-weight-normal);padding-inline:var(--calcite-internal-action-padding-inline, 1.25rem);padding-block:var(--calcite-internal-action-padding-block, var(--calcite-spacing-xl))}:host([scale=l]) .button--text-visible .icon-container{margin-inline-end:1rem}:host([alignment=center]) .button{justify-content:center}:host([alignment=end]) .button{justify-content:flex-end}:host([alignment=center]) .button .text-container--visible,:host([alignment=end]) .button .text-container--visible{flex:0 1 auto}:host([scale=s][compact]) .button,:host([scale=m][compact]) .button,:host([scale=l][compact]) .button{padding-inline:0px}.slot-container{display:flex}.slot-container--hidden{display:none}.button--text-visible{inline-size:100%}.indicator-with-icon{position:relative}.indicator-with-icon:after{content:\"\";position:absolute;block-size:.5rem;inline-size:.5rem;border-radius:9999px;inset-block-end:-.275rem;inset-inline-end:-.275rem;background-color:var(--calcite-action-indicator-color, var(--calcite-color-brand))}.indicator-without-icon{margin-inline:.25rem;inline-size:1rem;position:relative}.indicator-without-icon:after{content:\"\";position:absolute;block-size:.5rem;inline-size:.5rem;border-radius:9999px;inset-block-end:-.275rem;inset-inline-end:-.275rem;background-color:var(--calcite-action-indicator-color, var(--calcite-color-brand))}.indicator-text{position:absolute;inline-size:1px;block-size:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0,0,0,0);white-space:nowrap;border-width:0}:host([hidden]){display:none}[hidden]{display:none}:host([disabled]) .button,:host([disabled]) .button:hover,:host([disabled]) .button:focus{cursor:default;opacity:var(--calcite-opacity-disabled);background-color:var(--calcite-action-background-color, var(--calcite-action-background-color, var(--calcite-color-foreground-1)))}:host([disabled]):host([active]) .button,:host([disabled]):host([active]) .button:hover,:host([disabled]):host([active]) .button:focus{opacity:var(--calcite-opacity-disabled);background-color:var(--calcite-action-background-color-press, var(--calcite-action-background-color-press, var(--calcite-action-background-color-pressed, var(--calcite-color-foreground-3))))}:host([disabled]) ::slotted([calcite-hydrated][disabled]),:host([disabled]) [calcite-hydrated][disabled]{opacity:1}.interaction-container{display:contents}`;\nclass j extends z {\n  constructor() {\n    super(...arguments), this.guid = `calcite-action-${w()}`, this.buttonEl = C(), this.buttonId = `${this.guid}-button`, this.indicatorId = `${this.guid}-indicator`, this.mutationObserver = L(\"mutation\", () => this.requestUpdate()), this.active = !1, this.appearance = \"solid\", this.compact = !1, this.disabled = !1, this.dragHandle = !1, this.iconFlipRtl = !1, this.indicator = !1, this.loading = !1, this.messages = F({ blocking: !0 }), this.scale = \"m\", this.textEnabled = !1;\n  }\n  static {\n    this.properties = { active: 7, alignment: 3, appearance: 3, compact: 7, disabled: 7, dragHandle: 7, icon: 3, iconFlipRtl: 7, indicator: 7, label: 1, loading: 7, messageOverrides: 0, scale: 3, text: 1, textEnabled: 7 };\n  }\n  static {\n    this.styles = R;\n  }\n  // #endregion\n  // #region Public Methods\n  /** Sets focus on the component. */\n  async setFocus() {\n    await T(this), this.buttonEl.value?.focus();\n  }\n  // #endregion\n  // #region Lifecycle\n  connectedCallback() {\n    super.connectedCallback(), this.mutationObserver?.observe(this.el, { childList: !0, subtree: !0 });\n  }\n  async load() {\n  }\n  updated() {\n    I(this);\n  }\n  loaded() {\n  }\n  disconnectedCallback() {\n    super.disconnectedCallback(), this.mutationObserver?.disconnect();\n  }\n  // #endregion\n  // #region Private Methods\n  handleTooltipSlotChange(t) {\n    const o = t.target.assignedElements({\n      flatten: !0\n    }).filter((r) => r?.matches(\"calcite-tooltip\"))[0];\n    o && (o.referenceElement = this.buttonEl.value);\n  }\n  // #endregion\n  // #region Rendering\n  renderTextContainer() {\n    const { text: t, textEnabled: a } = this, o = {\n      [i.textContainer]: !0,\n      [i.textContainerVisible]: a\n    };\n    return t ? g(\"text-container\", e`<div class=${n(o)}>${t}</div>`) : null;\n  }\n  renderIndicatorText() {\n    const { indicator: t, messages: a, indicatorId: o, buttonId: r } = this;\n    return e`<div aria-labelledby=${r ?? c} aria-live=polite class=${n(i.indicatorText)} id=${o ?? c} role=region>${t ? a.indicator : null}</div>`;\n  }\n  renderIconContainer() {\n    const { loading: t, icon: a, scale: o, el: r, iconFlipRtl: d, indicator: b } = this, p = o === \"l\" ? \"l\" : \"m\", h = t ? e`<calcite-loader inline .label=${this.messages.loading} .scale=${p}></calcite-loader>` : null, l = a ? e`<calcite-icon class=${n({ [i.indicatorWithIcon]: b })} .flipRtl=${d} .icon=${a} .scale=${S(this.scale)}></calcite-icon>` : null, s = h || l, u = s || r.children?.length, v = e`<div class=${n({\n      [i.slotContainer]: !0,\n      [i.slotContainerHidden]: t\n    })}><slot></slot></div>`;\n    return u ? g(\"icon-container\", e`<div aria-hidden=true class=${n(i.iconContainer)}>${s}${v}</div>`) : null;\n  }\n  renderButton() {\n    const { active: t, compact: a, disabled: o, icon: r, loading: d, textEnabled: b, label: p, text: h, indicator: l, indicatorId: s, buttonId: u, messages: v } = this, m = p || h || \"\", f = l ? v.indicatorLabel.replace(\"{label}\", m) : m, x = {\n      [i.button]: !0,\n      [i.buttonTextVisible]: b,\n      [i.buttonCompact]: a\n    }, k = e`${this.renderIconContainer()}${this.renderTextContainer()}${!r && l && g(\"indicator-no-icon\", e`<div class=${n(i.indicatorWithoutIcon)}></div>`) || \"\"}`;\n    return this.dragHandle ? e`<span aria-controls=${(l ? s : null) ?? c} .ariaBusy=${d} .ariaDisabled=${this.disabled ? this.disabled : null} .ariaLabel=${f} .ariaPressed=${t} class=${n(x)} id=${u ?? c} role=button tabindex=${(this.disabled ? null : 0) ?? c} ${$(this.buttonEl)}>${k}</span>` : e`<button aria-controls=${(l ? s : null) ?? c} .ariaBusy=${d} .ariaLabel=${f} .ariaPressed=${t} class=${n(x)} .disabled=${o} id=${u ?? c} tabindex=${(o ? null : 0) ?? c} ${$(this.buttonEl)}>${k}</button>`;\n  }\n  render() {\n    return E({ disabled: this.disabled, children: e`${this.renderButton()}<slot name=${O.tooltip} @slotchange=${this.handleTooltipSlotChange}></slot>${this.renderIndicatorText()}` });\n  }\n}\ny(\"calcite-action\", j);\nexport {\n  j as Action\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {nothing} from '../lit-html.js';\nimport {\n  directive,\n  Directive,\n  ChildPart,\n  DirectiveParameters,\n} from '../directive.js';\nimport {setCommittedValue} from '../directive-helpers.js';\n\nclass Keyed extends Directive {\n  key: unknown = nothing;\n\n  render(k: unknown, v: unknown) {\n    this.key = k;\n    return v;\n  }\n\n  override update(part: ChildPart, [k, v]: DirectiveParameters<this>) {\n    if (k !== this.key) {\n      // Clear the part before returning a value. The one-arg form of\n      // setCommittedValue sets the value to a sentinel which forces a\n      // commit the next render.\n      setCommittedValue(part);\n      this.key = k;\n    }\n    return v;\n  }\n}\n\n/**\n * Associates a renderable value with a unique key. When the key changes, the\n * previous DOM is removed and disposed before rendering the next value, even\n * if the value - such as a template - is the same.\n *\n * This is useful for forcing re-renders of stateful components, or working\n * with code that expects new data to generate new HTML elements, such as some\n * animation techniques.\n */\nexport const keyed = directive(Keyed);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {Keyed};\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * Overview:\n *\n * This module is designed to add support for an async `setValue` API and\n * `disconnected` callback to directives with the least impact on the core\n * runtime or payload when that feature is not used.\n *\n * The strategy is to introduce a `AsyncDirective` subclass of\n * `Directive` that climbs the \"parent\" tree in its constructor to note which\n * branches of lit-html's \"logical tree\" of data structures contain such\n * directives and thus need to be crawled when a subtree is being cleared (or\n * manually disconnected) in order to run the `disconnected` callback.\n *\n * The \"nodes\" of the logical tree include Parts, TemplateInstances (for when a\n * TemplateResult is committed to a value of a ChildPart), and Directives; these\n * all implement a common interface called `DisconnectableChild`. Each has a\n * `_$parent` reference which is set during construction in the core code, and a\n * `_$disconnectableChildren` field which is initially undefined.\n *\n * The sparse tree created by means of the `AsyncDirective` constructor\n * crawling up the `_$parent` tree and placing a `_$disconnectableChildren` Set\n * on each parent that includes each child that contains a\n * `AsyncDirective` directly or transitively via its children. In order to\n * notify connection state changes and disconnect (or reconnect) a tree, the\n * `_$notifyConnectionChanged` API is patched onto ChildParts as a directive\n * climbs the parent tree, which is called by the core when clearing a part if\n * it exists. When called, that method iterates over the sparse tree of\n * Set<DisconnectableChildren> built up by AsyncDirectives, and calls\n * `_$notifyDirectiveConnectionChanged` on any directives that are encountered\n * in that tree, running the required callbacks.\n *\n * A given \"logical tree\" of lit-html data-structures might look like this:\n *\n *  ChildPart(N1) _$dC=[D2,T3]\n *   ._directive\n *     AsyncDirective(D2)\n *   ._value // user value was TemplateResult\n *     TemplateInstance(T3) _$dC=[A4,A6,N10,N12]\n *      ._$parts[]\n *        AttributePart(A4) _$dC=[D5]\n *         ._directives[]\n *           AsyncDirective(D5)\n *        AttributePart(A6) _$dC=[D7,D8]\n *         ._directives[]\n *           AsyncDirective(D7)\n *           Directive(D8) _$dC=[D9]\n *            ._directive\n *              AsyncDirective(D9)\n *        ChildPart(N10) _$dC=[D11]\n *         ._directive\n *           AsyncDirective(D11)\n *         ._value\n *           string\n *        ChildPart(N12) _$dC=[D13,N14,N16]\n *         ._directive\n *           AsyncDirective(D13)\n *         ._value // user value was iterable\n *           Array<ChildPart>\n *             ChildPart(N14) _$dC=[D15]\n *              ._value\n *                string\n *             ChildPart(N16) _$dC=[D17,T18]\n *              ._directive\n *                AsyncDirective(D17)\n *              ._value // user value was TemplateResult\n *                TemplateInstance(T18) _$dC=[A19,A21,N25]\n *                 ._$parts[]\n *                   AttributePart(A19) _$dC=[D20]\n *                    ._directives[]\n *                      AsyncDirective(D20)\n *                   AttributePart(A21) _$dC=[22,23]\n *                    ._directives[]\n *                      AsyncDirective(D22)\n *                      Directive(D23) _$dC=[D24]\n *                       ._directive\n *                         AsyncDirective(D24)\n *                   ChildPart(N25) _$dC=[D26]\n *                    ._directive\n *                      AsyncDirective(D26)\n *                    ._value\n *                      string\n *\n * Example 1: The directive in ChildPart(N12) updates and returns `nothing`. The\n * ChildPart will _clear() itself, and so we need to disconnect the \"value\" of\n * the ChildPart (but not its directive). In this case, when `_clear()` calls\n * `_$notifyConnectionChanged()`, we don't iterate all of the\n * _$disconnectableChildren, rather we do a value-specific disconnection: i.e.\n * since the _value was an Array<ChildPart> (because an iterable had been\n * committed), we iterate the array of ChildParts (N14, N16) and run\n * `setConnected` on them (which does recurse down the full tree of\n * `_$disconnectableChildren` below it, and also removes N14 and N16 from N12's\n * `_$disconnectableChildren`). Once the values have been disconnected, we then\n * check whether the ChildPart(N12)'s list of `_$disconnectableChildren` is empty\n * (and would remove it from its parent TemplateInstance(T3) if so), but since\n * it would still contain its directive D13, it stays in the disconnectable\n * tree.\n *\n * Example 2: In the course of Example 1, `setConnected` will reach\n * ChildPart(N16); in this case the entire part is being disconnected, so we\n * simply iterate all of N16's `_$disconnectableChildren` (D17,T18) and\n * recursively run `setConnected` on them. Note that we only remove children\n * from `_$disconnectableChildren` for the top-level values being disconnected\n * on a clear; doing this bookkeeping lower in the tree is wasteful since it's\n * all being thrown away.\n *\n * Example 3: If the LitElement containing the entire tree above becomes\n * disconnected, it will run `childPart.setConnected()` (which calls\n * `childPart._$notifyConnectionChanged()` if it exists); in this case, we\n * recursively run `setConnected()` over the entire tree, without removing any\n * children from `_$disconnectableChildren`, since this tree is required to\n * re-connect the tree, which does the same operation, simply passing\n * `isConnected: true` down the tree, signaling which callback to run.\n */\n\nimport {AttributePart, ChildPart, Disconnectable, Part} from './lit-html.js';\nimport {isSingleExpression} from './directive-helpers.js';\nimport {Directive, PartInfo, PartType} from './directive.js';\nexport * from './directive.js';\n\nconst DEV_MODE = true;\n\n/**\n * Recursively walks down the tree of Parts/TemplateInstances/Directives to set\n * the connected state of directives and run `disconnected`/ `reconnected`\n * callbacks.\n *\n * @return True if there were children to disconnect; false otherwise\n */\nconst notifyChildrenConnectedChanged = (\n  parent: Disconnectable,\n  isConnected: boolean\n): boolean => {\n  const children = parent._$disconnectableChildren;\n  if (children === undefined) {\n    return false;\n  }\n  for (const obj of children) {\n    // The existence of `_$notifyDirectiveConnectionChanged` is used as a \"brand\" to\n    // disambiguate AsyncDirectives from other DisconnectableChildren\n    // (as opposed to using an instanceof check to know when to call it); the\n    // redundancy of \"Directive\" in the API name is to avoid conflicting with\n    // `_$notifyConnectionChanged`, which exists `ChildParts` which are also in\n    // this list\n    // Disconnect Directive (and any nested directives contained within)\n    // This property needs to remain unminified.\n    (obj as AsyncDirective)['_$notifyDirectiveConnectionChanged']?.(\n      isConnected,\n      false\n    );\n    // Disconnect Part/TemplateInstance\n    notifyChildrenConnectedChanged(obj, isConnected);\n  }\n  return true;\n};\n\n/**\n * Removes the given child from its parent list of disconnectable children, and\n * if the parent list becomes empty as a result, removes the parent from its\n * parent, and so forth up the tree when that causes subsequent parent lists to\n * become empty.\n */\nconst removeDisconnectableFromParent = (obj: Disconnectable) => {\n  let parent, children;\n  do {\n    if ((parent = obj._$parent) === undefined) {\n      break;\n    }\n    children = parent._$disconnectableChildren!;\n    children.delete(obj);\n    obj = parent;\n  } while (children?.size === 0);\n};\n\nconst addDisconnectableToParent = (obj: Disconnectable) => {\n  // Climb the parent tree, creating a sparse tree of children needing\n  // disconnection\n  for (let parent; (parent = obj._$parent); obj = parent) {\n    let children = parent._$disconnectableChildren;\n    if (children === undefined) {\n      parent._$disconnectableChildren = children = new Set();\n    } else if (children.has(obj)) {\n      // Once we've reached a parent that already contains this child, we\n      // can short-circuit\n      break;\n    }\n    children.add(obj);\n    installDisconnectAPI(parent);\n  }\n};\n\n/**\n * Changes the parent reference of the ChildPart, and updates the sparse tree of\n * Disconnectable children accordingly.\n *\n * Note, this method will be patched onto ChildPart instances and called from\n * the core code when parts are moved between different parents.\n */\nfunction reparentDisconnectables(this: ChildPart, newParent: Disconnectable) {\n  if (this._$disconnectableChildren !== undefined) {\n    removeDisconnectableFromParent(this);\n    this._$parent = newParent;\n    addDisconnectableToParent(this);\n  } else {\n    this._$parent = newParent;\n  }\n}\n\n/**\n * Sets the connected state on any directives contained within the committed\n * value of this part (i.e. within a TemplateInstance or iterable of\n * ChildParts) and runs their `disconnected`/`reconnected`s, as well as within\n * any directives stored on the ChildPart (when `valueOnly` is false).\n *\n * `isClearingValue` should be passed as `true` on a top-level part that is\n * clearing itself, and not as a result of recursively disconnecting directives\n * as part of a `clear` operation higher up the tree. This both ensures that any\n * directive on this ChildPart that produced a value that caused the clear\n * operation is not disconnected, and also serves as a performance optimization\n * to avoid needless bookkeeping when a subtree is going away; when clearing a\n * subtree, only the top-most part need to remove itself from the parent.\n *\n * `fromPartIndex` is passed only in the case of a partial `_clear` running as a\n * result of truncating an iterable.\n *\n * Note, this method will be patched onto ChildPart instances and called from the\n * core code when parts are cleared or the connection state is changed by the\n * user.\n */\nfunction notifyChildPartConnectedChanged(\n  this: ChildPart,\n  isConnected: boolean,\n  isClearingValue = false,\n  fromPartIndex = 0\n) {\n  const value = this._$committedValue;\n  const children = this._$disconnectableChildren;\n  if (children === undefined || children.size === 0) {\n    return;\n  }\n  if (isClearingValue) {\n    if (Array.isArray(value)) {\n      // Iterable case: Any ChildParts created by the iterable should be\n      // disconnected and removed from this ChildPart's disconnectable\n      // children (starting at `fromPartIndex` in the case of truncation)\n      for (let i = fromPartIndex; i < value.length; i++) {\n        notifyChildrenConnectedChanged(value[i], false);\n        removeDisconnectableFromParent(value[i]);\n      }\n    } else if (value != null) {\n      // TemplateInstance case: If the value has disconnectable children (will\n      // only be in the case that it is a TemplateInstance), we disconnect it\n      // and remove it from this ChildPart's disconnectable children\n      notifyChildrenConnectedChanged(value as Disconnectable, false);\n      removeDisconnectableFromParent(value as Disconnectable);\n    }\n  } else {\n    notifyChildrenConnectedChanged(this, isConnected);\n  }\n}\n\n/**\n * Patches disconnection API onto ChildParts.\n */\nconst installDisconnectAPI = (obj: Disconnectable) => {\n  if ((obj as ChildPart).type == PartType.CHILD) {\n    (obj as ChildPart)._$notifyConnectionChanged ??=\n      notifyChildPartConnectedChanged;\n    (obj as ChildPart)._$reparentDisconnectables ??= reparentDisconnectables;\n  }\n};\n\n/**\n * An abstract `Directive` base class whose `disconnected` method will be\n * called when the part containing the directive is cleared as a result of\n * re-rendering, or when the user calls `part.setConnected(false)` on\n * a part that was previously rendered containing the directive (as happens\n * when e.g. a LitElement disconnects from the DOM).\n *\n * If `part.setConnected(true)` is subsequently called on a\n * containing part, the directive's `reconnected` method will be called prior\n * to its next `update`/`render` callbacks. When implementing `disconnected`,\n * `reconnected` should also be implemented to be compatible with reconnection.\n *\n * Note that updates may occur while the directive is disconnected. As such,\n * directives should generally check the `this.isConnected` flag during\n * render/update to determine whether it is safe to subscribe to resources\n * that may prevent garbage collection.\n */\nexport abstract class AsyncDirective extends Directive {\n  // As opposed to other Disconnectables, AsyncDirectives always get notified\n  // when the RootPart connection changes, so the public `isConnected`\n  // is a locally stored variable initialized via its part's getter and synced\n  // via `_$notifyDirectiveConnectionChanged`. This is cheaper than using\n  // the _$isConnected getter, which has to look back up the tree each time.\n  /**\n   * The connection state for this Directive.\n   */\n  isConnected!: boolean;\n\n  // @internal\n  override _$disconnectableChildren?: Set<Disconnectable> = undefined;\n  /**\n   * Initialize the part with internal fields\n   * @param part\n   * @param parent\n   * @param attributeIndex\n   */\n  override _$initialize(\n    part: Part,\n    parent: Disconnectable,\n    attributeIndex: number | undefined\n  ) {\n    super._$initialize(part, parent, attributeIndex);\n    addDisconnectableToParent(this);\n    this.isConnected = part._$isConnected;\n  }\n  // This property needs to remain unminified.\n  /**\n   * Called from the core code when a directive is going away from a part (in\n   * which case `shouldRemoveFromParent` should be true), and from the\n   * `setChildrenConnected` helper function when recursively changing the\n   * connection state of a tree (in which case `shouldRemoveFromParent` should\n   * be false).\n   *\n   * @param isConnected\n   * @param isClearingDirective - True when the directive itself is being\n   *     removed; false when the tree is being disconnected\n   * @internal\n   */\n  override ['_$notifyDirectiveConnectionChanged'](\n    isConnected: boolean,\n    isClearingDirective = true\n  ) {\n    if (isConnected !== this.isConnected) {\n      this.isConnected = isConnected;\n      if (isConnected) {\n        this.reconnected?.();\n      } else {\n        this.disconnected?.();\n      }\n    }\n    if (isClearingDirective) {\n      notifyChildrenConnectedChanged(this, isConnected);\n      removeDisconnectableFromParent(this);\n    }\n  }\n\n  /**\n   * Sets the value of the directive's Part outside the normal `update`/`render`\n   * lifecycle of a directive.\n   *\n   * This method should not be called synchronously from a directive's `update`\n   * or `render`.\n   *\n   * @param directive The directive to update\n   * @param value The value to set\n   */\n  setValue(value: unknown) {\n    if (isSingleExpression(this.__part as unknown as PartInfo)) {\n      this.__part._$setValue(value, this);\n    } else {\n      // this.__attributeIndex will be defined in this case, but\n      // assert it in dev mode\n      if (DEV_MODE && this.__attributeIndex === undefined) {\n        throw new Error(`Expected this.__attributeIndex to be a number`);\n      }\n      const newValues = [...(this.__part._$committedValue as Array<unknown>)];\n      newValues[this.__attributeIndex!] = value;\n      (this.__part as AttributePart)._$setValue(newValues, this, 0);\n    }\n  }\n\n  /**\n   * User callbacks for implementing logic to release any resources/subscriptions\n   * that may have been retained by this directive. Since directives may also be\n   * re-connected, `reconnected` should also be implemented to restore the\n   * working state of the directive prior to the next render.\n   */\n  protected disconnected() {}\n  protected reconnected() {}\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport {nothing, ElementPart} from '../lit-html.js';\nimport {directive, AsyncDirective} from '../async-directive.js';\n\n/**\n * Creates a new Ref object, which is container for a reference to an element.\n */\nexport const createRef = <T = Element>() => new Ref<T>();\n\n/**\n * An object that holds a ref value.\n */\nclass Ref<T = Element> {\n  /**\n   * The current Element value of the ref, or else `undefined` if the ref is no\n   * longer rendered.\n   */\n  readonly value?: T;\n}\n\nexport type {Ref};\n\ninterface RefInternal {\n  value: Element | undefined;\n}\n\n// When callbacks are used for refs, this map tracks the last value the callback\n// was called with, for ensuring a directive doesn't clear the ref if the ref\n// has already been rendered to a new spot. It is double-keyed on both the\n// context (`options.host`) and the callback, since we auto-bind class methods\n// to `options.host`.\nconst lastElementForContextAndCallback = new WeakMap<\n  object,\n  WeakMap<Function, Element | undefined>\n>();\n\nexport type RefOrCallback<T = Element> = Ref<T> | ((el: T | undefined) => void);\n\nclass RefDirective extends AsyncDirective {\n  private _element?: Element;\n  private _ref?: RefOrCallback;\n  private _context?: object;\n\n  render(_ref?: RefOrCallback) {\n    return nothing;\n  }\n\n  override update(part: ElementPart, [ref]: Parameters<this['render']>) {\n    const refChanged = ref !== this._ref;\n    if (refChanged && this._ref !== undefined) {\n      // The ref passed to the directive has changed;\n      // unset the previous ref's value\n      this._updateRefValue(undefined);\n    }\n    if (refChanged || this._lastElementForRef !== this._element) {\n      // We either got a new ref or this is the first render;\n      // store the ref/element & update the ref value\n      this._ref = ref;\n      this._context = part.options?.host;\n      this._updateRefValue((this._element = part.element));\n    }\n    return nothing;\n  }\n\n  private _updateRefValue(element: Element | undefined) {\n    if (!this.isConnected) {\n      element = undefined;\n    }\n    if (typeof this._ref === 'function') {\n      // If the current ref was called with a previous value, call with\n      // `undefined`; We do this to ensure callbacks are called in a consistent\n      // way regardless of whether a ref might be moving up in the tree (in\n      // which case it would otherwise be called with the new value before the\n      // previous one unsets it) and down in the tree (where it would be unset\n      // before being set). Note that element lookup is keyed by\n      // both the context and the callback, since we allow passing unbound\n      // functions that are called on options.host, and we want to treat\n      // these as unique \"instances\" of a function.\n      const context = this._context ?? globalThis;\n      let lastElementForCallback =\n        lastElementForContextAndCallback.get(context);\n      if (lastElementForCallback === undefined) {\n        lastElementForCallback = new WeakMap();\n        lastElementForContextAndCallback.set(context, lastElementForCallback);\n      }\n      if (lastElementForCallback.get(this._ref) !== undefined) {\n        this._ref.call(this._context, undefined);\n      }\n      lastElementForCallback.set(this._ref, element);\n      // Call the ref with the new element value\n      if (element !== undefined) {\n        this._ref.call(this._context, element);\n      }\n    } else {\n      (this._ref as RefInternal)!.value = element;\n    }\n  }\n\n  private get _lastElementForRef() {\n    return typeof this._ref === 'function'\n      ? lastElementForContextAndCallback\n          .get(this._context ?? globalThis)\n          ?.get(this._ref)\n      : this._ref?.value;\n  }\n\n  override disconnected() {\n    // Only clear the box if our element is still the one in it (i.e. another\n    // directive instance hasn't rendered its element to it before us); that\n    // only happens in the event of the directive being cleared (not via manual\n    // disconnection)\n    if (this._lastElementForRef === this._element) {\n      this._updateRefValue(undefined);\n    }\n  }\n\n  override reconnected() {\n    // If we were manually disconnected, we can safely put our element back in\n    // the box, since no rendering could have occurred to change its state\n    this._updateRefValue(this._element);\n  }\n}\n\n/**\n * Sets the value of a Ref object or calls a ref callback with the element it's\n * bound to.\n *\n * A Ref object acts as a container for a reference to an element. A ref\n * callback is a function that takes an element as its only argument.\n *\n * The ref directive sets the value of the Ref object or calls the ref callback\n * during rendering, if the referenced element changed.\n *\n * Note: If a ref callback is rendered to a different element position or is\n * removed in a subsequent render, it will first be called with `undefined`,\n * followed by another call with the new element it was rendered to (if any).\n *\n * ```js\n * // Using Ref object\n * const inputRef = createRef();\n * render(html`<input ${ref(inputRef)}>`, container);\n * inputRef.value.focus();\n *\n * // Using callback\n * const callback = (inputElement) => inputElement.focus();\n * render(html`<input ${ref(callback)}>`, container);\n * ```\n */\nexport const ref = directive(RefDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {RefDirective};\n"],"names":["s","i","a","r","n","t","warn","el","localName","toString","g","hidden","itemHidden","map","o","Math","random","substring","join","disabled","e","this","HTMLElement","prototype","click","call","target","preventDefault","stopImmediatePropagation","capture","m","setAttribute","contains","document","activeElement","blur","addEventListener","forEach","d","l","removeEventListener","f","u","removeAttribute","v","p","children","c","async","componentOnReady","requestUpdate","Promise","requestAnimationFrame","Set","trace","debug","info","error","off","console","deprecated","component","name","suggested","removalVersion","has","add","Array","isArray","Intl","ListFormat","style","type","format","b","window","MutationObserver","constructor","super","observedEntry","callback","observe","push","options","unobserve","filter","takeRecords","disconnect","IntersectionObserver","ResizeObserver","O","R","H","j","z","arguments","guid","w","buttonEl","C","buttonId","indicatorId","mutationObserver","L","active","appearance","compact","dragHandle","iconFlipRtl","indicator","loading","messages","F","blocking","scale","textEnabled","properties","alignment","icon","label","messageOverrides","text","styles","setFocus","T","value","focus","connectedCallback","childList","subtree","load","updated","I","loaded","disconnectedCallback","handleTooltipSlotChange","assignedElements","flatten","matches","referenceElement","renderTextContainer","renderIndicatorText","renderIconContainer","h","S","length","renderButton","indicatorLabel","replace","x","k","$","render","E","y","key","update","notifyChildrenConnectedChanged","_$AN","_$AO","_$AM","delete","size","_$AH","CHILD","_$AP","_$AQ","_$AT","isConnected","_$AU","reconnected","disconnected","setValue","_$Ct","_$AI","_$Ci","createRef","WeakMap","Y","rt","lt","ct","ht","host","element","globalThis","get","set"],"sourceRoot":""}