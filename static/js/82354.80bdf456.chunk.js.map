{"version":3,"file":"static/js/82354.80bdf456.chunk.js","mappings":"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","sources":["../node_modules/@esri/calcite-components/dist/chunks/component.js","../node_modules/@esri/calcite-components/dist/chunks/logger.js","../node_modules/@esri/calcite-components/dist/components/calcite-color-picker-hex-input/customElement.js","../node_modules/lit-html/src/directives/keyed.ts","../node_modules/lit-html/src/async-directive.ts","../node_modules/lit-html/src/directives/ref.ts"],"sourcesContent":["/*! All material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\nv3.2.1 */\nimport { l as logger } from \"./logger.js\";\nfunction getIconScale(componentScale) {\n  return componentScale === \"l\" ? \"m\" : \"s\";\n}\nfunction warnIfMissingRequiredProp(component, newProp, deprecatedProp) {\n  if (!component[newProp] && !component[deprecatedProp]) {\n    logger.warn(`[${component.el.localName}] \"${newProp.toString()}\" or \"${deprecatedProp.toString()}\" is required.`);\n  }\n}\nfunction isHidden(el) {\n  return el.hidden || el.itemHidden;\n}\nasync function componentFocusable(component) {\n  await component.componentOnReady();\n  await component.updateComplete;\n}\nexport {\n  componentFocusable as c,\n  getIconScale as g,\n  isHidden as i,\n  warnIfMissingRequiredProp as w\n};\n","/*! All material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\nv3.2.1 */\nimport { l as logLevel } from \"./runtime.js\";\nconst loggedDeprecations = /* @__PURE__ */ new Set();\nconst logLevels = {\n  trace: 0,\n  debug: 1,\n  info: 2,\n  warn: 4,\n  error: 8,\n  off: 10\n};\nfunction willLog(level) {\n  return logLevels[level] >= logLevels[logLevel];\n}\nfunction forwardToConsole(level, ...data) {\n  if (!willLog(level)) {\n    return;\n  }\n  const badgeTemplate = \"%ccalcite\";\n  const badgeStyle = \"background: #007AC2; color: #fff; border-radius: 4px; padding: 2px 4px;\";\n  console[level].call(this, badgeTemplate, badgeStyle, ...data);\n}\nlet listFormatter;\nconst logger = {\n  debug: (message) => forwardToConsole(\"debug\", message),\n  info: (message) => forwardToConsole(\"info\", message),\n  warn: (message) => forwardToConsole(\"warn\", message),\n  error: (message) => forwardToConsole(\"error\", message),\n  trace: (message) => forwardToConsole(\"trace\", message),\n  deprecated\n};\nfunction deprecated(context, { component, name, suggested, removalVersion }) {\n  const key = `${context}:${context === \"component\" ? \"\" : component}${name}`;\n  if (loggedDeprecations.has(key)) {\n    return;\n  }\n  loggedDeprecations.add(key);\n  const multiSuggestions = Array.isArray(suggested);\n  if (multiSuggestions && !listFormatter) {\n    listFormatter = new Intl.ListFormat(\"en\", { style: \"long\", type: \"disjunction\" });\n  }\n  const message = `[${name}] ${context} is deprecated and will be removed in ${removalVersion === \"future\" ? `a future version` : `v${removalVersion}`}.${suggested ? ` Use ${multiSuggestions ? listFormatter.format(suggested.map((suggestion) => `\"${suggestion}\"`)) : `\"${suggested}\"`} instead.` : \"\"}`;\n  forwardToConsole(\"warn\", message);\n}\nexport {\n  logger as l\n};\n","/*! All material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\nv3.2.1 */\nimport { c as customElement } from \"../../chunks/runtime.js\";\nimport { ref } from \"lit-html/directives/ref.js\";\nimport { keyed } from \"lit-html/directives/keyed.js\";\nimport Color from \"color\";\nimport { html } from \"lit\";\nimport { LitElement, createEvent, safeClassMap } from \"@arcgis/lumina\";\nimport { n as normalizeHex, h as hexify, i as isValidHex, a as isLonghandHex, b as isShorthandHex, r as rgbToHex, o as opacityToAlpha, c as alphaToOpacity, O as OPACITY_LIMITS, d as hexChar } from \"../../chunks/utils4.js\";\nimport { b as focusElement } from \"../../chunks/dom.js\";\nimport { c as componentFocusable } from \"../../chunks/component.js\";\nimport { css } from \"@lit/reactive-element/css-tag.js\";\nconst CSS = {\n  container: \"container\",\n  hexInput: \"hex-input\",\n  opacityInput: \"opacity-input\"\n};\nconst styles = css`:host{display:block}.container{display:flex;inline-size:100%;flex-wrap:nowrap;align-items:center}.hex-input{flex-grow:1;text-transform:uppercase}.opacity-input{inline-size:100px;margin-inline-start:-1px}:host([hidden]){display:none}[hidden]{display:none}`;\nconst DEFAULT_COLOR = Color();\nclass ColorPickerHexInput extends LitElement {\n  constructor() {\n    super(...arguments);\n    this.internalColor = DEFAULT_COLOR;\n    this.alphaChannel = false;\n    this.allowEmpty = false;\n    this.hexLabel = \"Hex\";\n    this.scale = \"m\";\n    this.value = normalizeHex(hexify(DEFAULT_COLOR, this.alphaChannel), this.alphaChannel, true);\n    this.calciteColorPickerHexInputChange = createEvent({ cancelable: false });\n  }\n  static {\n    this.properties = { internalColor: [16, {}, { state: true }], alphaChannel: [5, {}, { type: Boolean }], allowEmpty: [5, {}, { type: Boolean }], hexLabel: 1, messages: [0, {}, { attribute: false }], numberingSystem: 1, scale: [3, {}, { reflect: true }], value: [3, {}, { reflect: true }] };\n  }\n  static {\n    this.styles = styles;\n  }\n  async setFocus() {\n    await componentFocusable(this);\n    return focusElement(this.hexInputNode);\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    this.previousNonNullValue = this.value;\n    const { allowEmpty, alphaChannel, value } = this;\n    if (value) {\n      const normalized = normalizeHex(value, alphaChannel);\n      if (isValidHex(normalized, alphaChannel)) {\n        this.internalSetValue(normalized, normalized, false);\n      }\n      return;\n    }\n    if (allowEmpty) {\n      this.internalSetValue(void 0, void 0, false);\n    }\n  }\n  willUpdate(changes) {\n    if (changes.has(\"value\") && (this.hasUpdated || this.value !== normalizeHex(hexify(DEFAULT_COLOR, this.alphaChannel), this.alphaChannel, true))) {\n      this.internalSetValue(this.value, changes.get(\"value\"), false);\n    }\n  }\n  onHexInputBlur() {\n    const node = this.hexInputNode;\n    const inputValue = node.value;\n    const hex = `#${inputValue}`;\n    const { allowEmpty, internalColor } = this;\n    const willClearValue = allowEmpty && !inputValue;\n    const isLonghand = isLonghandHex(hex);\n    const anyShorthand = isShorthandHex(hex, true) || isShorthandHex(hex, false);\n    if (anyShorthand) {\n      this.onHexInputChange();\n    }\n    if (willClearValue || isValidHex(hex) && isLonghand) {\n      return;\n    }\n    node.value = allowEmpty && !internalColor ? \"\" : this.formatHexForInternalInput(rgbToHex(\n      // always display hex input in RRGGBB format\n      internalColor.object()\n    ));\n  }\n  onOpacityInputBlur() {\n    const node = this.opacityInputNode;\n    const inputValue = node.value;\n    const { allowEmpty, internalColor } = this;\n    const willClearValue = allowEmpty && !inputValue;\n    if (willClearValue) {\n      return;\n    }\n    node.value = allowEmpty && !internalColor ? \"\" : this.formatOpacityForInternalInput(internalColor);\n  }\n  onOpacityInputInput() {\n    this.onOpacityInputChange();\n  }\n  onHexInputChange() {\n    const nodeValue = this.hexInputNode.value;\n    let value = nodeValue;\n    if (value) {\n      const normalized = normalizeHex(value, false);\n      const preserveExistingAlpha = isValidHex(normalized) && this.alphaChannel;\n      if (preserveExistingAlpha && this.internalColor) {\n        const alphaHex = normalizeHex(this.internalColor.hexa(), true).slice(-2);\n        value = `${normalized + alphaHex}`;\n      }\n    }\n    this.internalSetValue(value, this.value);\n  }\n  onOpacityInputChange() {\n    const node = this.opacityInputNode;\n    let value;\n    if (!node.value) {\n      value = node.value;\n    } else {\n      const alpha = opacityToAlpha(Number(node.value));\n      value = this.internalColor?.alpha(alpha).hexa();\n    }\n    this.internalSetValue(value, this.value);\n  }\n  onInputFocus(event) {\n    if (event.type === \"calciteInternalInputTextFocus\") {\n      this.hexInputNode.selectText();\n    } else {\n      this.opacityInputNode.selectText();\n    }\n  }\n  onHexInputInput() {\n    const hexInputValue = `#${this.hexInputNode.value}`;\n    const oldValue = this.value;\n    if (isValidHex(hexInputValue, this.alphaChannel) && isLonghandHex(hexInputValue, this.alphaChannel)) {\n      this.internalSetValue(hexInputValue, oldValue);\n    }\n  }\n  onInputKeyDown(event) {\n    const { altKey, ctrlKey, metaKey, shiftKey } = event;\n    const { alphaChannel, hexInputNode, internalColor, value } = this;\n    const { key } = event;\n    const composedPath = event.composedPath();\n    if (key === \"Tab\" && isShorthandHex(value, this.alphaChannel) || key === \"Enter\") {\n      if (composedPath.includes(hexInputNode)) {\n        this.onHexInputChange();\n      } else {\n        this.onOpacityInputChange();\n      }\n      if (key === \"Enter\") {\n        event.preventDefault();\n      }\n      return;\n    }\n    const isNudgeKey = key === \"ArrowDown\" || key === \"ArrowUp\";\n    const oldValue = this.value;\n    if (isNudgeKey) {\n      if (!value) {\n        this.internalSetValue(this.previousNonNullValue, oldValue);\n        event.preventDefault();\n        return;\n      }\n      const direction = key === \"ArrowUp\" ? 1 : -1;\n      const bump = shiftKey ? 10 : 1;\n      this.internalSetValue(hexify(this.nudgeRGBChannels(internalColor, bump * direction, composedPath.includes(hexInputNode) ? \"rgb\" : \"a\"), alphaChannel), oldValue);\n      event.preventDefault();\n      return;\n    }\n    const withModifiers = altKey || ctrlKey || metaKey;\n    const singleChar = key.length === 1;\n    const validHexChar = hexChar.test(key);\n    if (singleChar && !withModifiers && !validHexChar) {\n      event.preventDefault();\n    }\n  }\n  onHexInputPaste(event) {\n    const hex = event.clipboardData.getData(\"text\");\n    if (isValidHex(hex, this.alphaChannel) && isLonghandHex(hex, this.alphaChannel)) {\n      event.preventDefault();\n      this.hexInputNode.value = hex.slice(1);\n      this.internalSetValue(hex, this.value);\n    }\n  }\n  internalSetValue(value, oldValue, emit = true) {\n    if (value) {\n      const { alphaChannel } = this;\n      const normalized = normalizeHex(value, alphaChannel, alphaChannel);\n      if (isValidHex(normalized, alphaChannel)) {\n        const { internalColor: currentColor } = this;\n        const nextColor = Color(normalized);\n        const normalizedLonghand = normalizeHex(hexify(nextColor, alphaChannel), alphaChannel);\n        const changed = !currentColor || normalizedLonghand !== normalizeHex(hexify(currentColor, alphaChannel), alphaChannel);\n        this.internalColor = nextColor;\n        this.previousNonNullValue = normalizedLonghand;\n        this.value = normalizedLonghand;\n        if (changed && emit) {\n          this.calciteColorPickerHexInputChange.emit();\n        }\n        return;\n      }\n    } else if (this.allowEmpty) {\n      this.internalColor = void 0;\n      this.value = void 0;\n      if (emit) {\n        this.calciteColorPickerHexInputChange.emit();\n      }\n      return;\n    }\n    this.value = oldValue;\n  }\n  storeHexInputRef(node) {\n    this.hexInputNode = node;\n  }\n  storeOpacityInputRef(node) {\n    this.opacityInputNode = node;\n  }\n  formatHexForInternalInput(hex) {\n    return hex ? hex.replace(\"#\", \"\").slice(0, 6) : \"\";\n  }\n  formatOpacityForInternalInput(color) {\n    return color ? `${alphaToOpacity(color.alpha())}` : \"\";\n  }\n  nudgeRGBChannels(color, amount, context) {\n    let nudgedChannels;\n    const channels = color.array();\n    const rgbChannels = channels.slice(0, 3);\n    if (context === \"rgb\") {\n      const nudgedRGBChannels = rgbChannels.map((channel) => channel + amount);\n      nudgedChannels = [\n        ...nudgedRGBChannels,\n        this.alphaChannel ? channels[3] : void 0\n      ];\n    } else {\n      const nudgedAlpha = opacityToAlpha(alphaToOpacity(color.alpha()) + amount);\n      nudgedChannels = [...rgbChannels, nudgedAlpha];\n    }\n    return Color(nudgedChannels);\n  }\n  render() {\n    const { alphaChannel, hexLabel, internalColor, messages, scale, value } = this;\n    const hexInputValue = this.formatHexForInternalInput(value);\n    const opacityInputValue = this.formatOpacityForInternalInput(internalColor);\n    const inputScale = scale === \"l\" ? \"m\" : \"s\";\n    return html`<div class=${safeClassMap(CSS.container)}><calcite-input-text class=${safeClassMap(CSS.hexInput)} .label=${messages?.hex || hexLabel} .maxLength=${this.alphaChannel ? 8 : 6} @keydown=${this.onInputKeyDown} @paste=${this.onHexInputPaste} @calciteInputTextChange=${this.onHexInputChange} @calciteInputTextInput=${this.onHexInputInput} @calciteInternalInputTextBlur=${this.onHexInputBlur} @calciteInternalInputTextFocus=${this.onInputFocus} prefix-text=# .scale=${inputScale} .value=${hexInputValue} ${ref(this.storeHexInputRef)}></calcite-input-text>${alphaChannel ? keyed(\"opacity-input\", html`<calcite-input-number class=${safeClassMap(CSS.opacityInput)} .label=${messages?.opacity} .max=${OPACITY_LIMITS.max} max-length=3 .min=${OPACITY_LIMITS.min} number-button-type=none .numberingSystem=${this.numberingSystem} @keydown=${this.onInputKeyDown} @calciteInputNumberInput=${this.onOpacityInputInput} @calciteInternalInputNumberBlur=${this.onOpacityInputBlur} @calciteInternalInputNumberFocus=${this.onInputFocus} .scale=${inputScale} suffix-text=% .value=${opacityInputValue} ${ref(this.storeOpacityInputRef)}></calcite-input-number>`) : null}</div>`;\n  }\n}\ncustomElement(\"calcite-color-picker-hex-input\", ColorPickerHexInput);\nexport {\n  ColorPickerHexInput\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {nothing} from '../lit-html.js';\nimport {\n  directive,\n  Directive,\n  ChildPart,\n  DirectiveParameters,\n} from '../directive.js';\nimport {setCommittedValue} from '../directive-helpers.js';\n\nclass Keyed extends Directive {\n  key: unknown = nothing;\n\n  render(k: unknown, v: unknown) {\n    this.key = k;\n    return v;\n  }\n\n  override update(part: ChildPart, [k, v]: DirectiveParameters<this>) {\n    if (k !== this.key) {\n      // Clear the part before returning a value. The one-arg form of\n      // setCommittedValue sets the value to a sentinel which forces a\n      // commit the next render.\n      setCommittedValue(part);\n      this.key = k;\n    }\n    return v;\n  }\n}\n\n/**\n * Associates a renderable value with a unique key. When the key changes, the\n * previous DOM is removed and disposed before rendering the next value, even\n * if the value - such as a template - is the same.\n *\n * This is useful for forcing re-renders of stateful components, or working\n * with code that expects new data to generate new HTML elements, such as some\n * animation techniques.\n */\nexport const keyed = directive(Keyed);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {Keyed};\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * Overview:\n *\n * This module is designed to add support for an async `setValue` API and\n * `disconnected` callback to directives with the least impact on the core\n * runtime or payload when that feature is not used.\n *\n * The strategy is to introduce a `AsyncDirective` subclass of\n * `Directive` that climbs the \"parent\" tree in its constructor to note which\n * branches of lit-html's \"logical tree\" of data structures contain such\n * directives and thus need to be crawled when a subtree is being cleared (or\n * manually disconnected) in order to run the `disconnected` callback.\n *\n * The \"nodes\" of the logical tree include Parts, TemplateInstances (for when a\n * TemplateResult is committed to a value of a ChildPart), and Directives; these\n * all implement a common interface called `DisconnectableChild`. Each has a\n * `_$parent` reference which is set during construction in the core code, and a\n * `_$disconnectableChildren` field which is initially undefined.\n *\n * The sparse tree created by means of the `AsyncDirective` constructor\n * crawling up the `_$parent` tree and placing a `_$disconnectableChildren` Set\n * on each parent that includes each child that contains a\n * `AsyncDirective` directly or transitively via its children. In order to\n * notify connection state changes and disconnect (or reconnect) a tree, the\n * `_$notifyConnectionChanged` API is patched onto ChildParts as a directive\n * climbs the parent tree, which is called by the core when clearing a part if\n * it exists. When called, that method iterates over the sparse tree of\n * Set<DisconnectableChildren> built up by AsyncDirectives, and calls\n * `_$notifyDirectiveConnectionChanged` on any directives that are encountered\n * in that tree, running the required callbacks.\n *\n * A given \"logical tree\" of lit-html data-structures might look like this:\n *\n *  ChildPart(N1) _$dC=[D2,T3]\n *   ._directive\n *     AsyncDirective(D2)\n *   ._value // user value was TemplateResult\n *     TemplateInstance(T3) _$dC=[A4,A6,N10,N12]\n *      ._$parts[]\n *        AttributePart(A4) _$dC=[D5]\n *         ._directives[]\n *           AsyncDirective(D5)\n *        AttributePart(A6) _$dC=[D7,D8]\n *         ._directives[]\n *           AsyncDirective(D7)\n *           Directive(D8) _$dC=[D9]\n *            ._directive\n *              AsyncDirective(D9)\n *        ChildPart(N10) _$dC=[D11]\n *         ._directive\n *           AsyncDirective(D11)\n *         ._value\n *           string\n *        ChildPart(N12) _$dC=[D13,N14,N16]\n *         ._directive\n *           AsyncDirective(D13)\n *         ._value // user value was iterable\n *           Array<ChildPart>\n *             ChildPart(N14) _$dC=[D15]\n *              ._value\n *                string\n *             ChildPart(N16) _$dC=[D17,T18]\n *              ._directive\n *                AsyncDirective(D17)\n *              ._value // user value was TemplateResult\n *                TemplateInstance(T18) _$dC=[A19,A21,N25]\n *                 ._$parts[]\n *                   AttributePart(A19) _$dC=[D20]\n *                    ._directives[]\n *                      AsyncDirective(D20)\n *                   AttributePart(A21) _$dC=[22,23]\n *                    ._directives[]\n *                      AsyncDirective(D22)\n *                      Directive(D23) _$dC=[D24]\n *                       ._directive\n *                         AsyncDirective(D24)\n *                   ChildPart(N25) _$dC=[D26]\n *                    ._directive\n *                      AsyncDirective(D26)\n *                    ._value\n *                      string\n *\n * Example 1: The directive in ChildPart(N12) updates and returns `nothing`. The\n * ChildPart will _clear() itself, and so we need to disconnect the \"value\" of\n * the ChildPart (but not its directive). In this case, when `_clear()` calls\n * `_$notifyConnectionChanged()`, we don't iterate all of the\n * _$disconnectableChildren, rather we do a value-specific disconnection: i.e.\n * since the _value was an Array<ChildPart> (because an iterable had been\n * committed), we iterate the array of ChildParts (N14, N16) and run\n * `setConnected` on them (which does recurse down the full tree of\n * `_$disconnectableChildren` below it, and also removes N14 and N16 from N12's\n * `_$disconnectableChildren`). Once the values have been disconnected, we then\n * check whether the ChildPart(N12)'s list of `_$disconnectableChildren` is empty\n * (and would remove it from its parent TemplateInstance(T3) if so), but since\n * it would still contain its directive D13, it stays in the disconnectable\n * tree.\n *\n * Example 2: In the course of Example 1, `setConnected` will reach\n * ChildPart(N16); in this case the entire part is being disconnected, so we\n * simply iterate all of N16's `_$disconnectableChildren` (D17,T18) and\n * recursively run `setConnected` on them. Note that we only remove children\n * from `_$disconnectableChildren` for the top-level values being disconnected\n * on a clear; doing this bookkeeping lower in the tree is wasteful since it's\n * all being thrown away.\n *\n * Example 3: If the LitElement containing the entire tree above becomes\n * disconnected, it will run `childPart.setConnected()` (which calls\n * `childPart._$notifyConnectionChanged()` if it exists); in this case, we\n * recursively run `setConnected()` over the entire tree, without removing any\n * children from `_$disconnectableChildren`, since this tree is required to\n * re-connect the tree, which does the same operation, simply passing\n * `isConnected: true` down the tree, signaling which callback to run.\n */\n\nimport {AttributePart, ChildPart, Disconnectable, Part} from './lit-html.js';\nimport {isSingleExpression} from './directive-helpers.js';\nimport {Directive, PartInfo, PartType} from './directive.js';\nexport * from './directive.js';\n\nconst DEV_MODE = true;\n\n/**\n * Recursively walks down the tree of Parts/TemplateInstances/Directives to set\n * the connected state of directives and run `disconnected`/ `reconnected`\n * callbacks.\n *\n * @return True if there were children to disconnect; false otherwise\n */\nconst notifyChildrenConnectedChanged = (\n  parent: Disconnectable,\n  isConnected: boolean\n): boolean => {\n  const children = parent._$disconnectableChildren;\n  if (children === undefined) {\n    return false;\n  }\n  for (const obj of children) {\n    // The existence of `_$notifyDirectiveConnectionChanged` is used as a \"brand\" to\n    // disambiguate AsyncDirectives from other DisconnectableChildren\n    // (as opposed to using an instanceof check to know when to call it); the\n    // redundancy of \"Directive\" in the API name is to avoid conflicting with\n    // `_$notifyConnectionChanged`, which exists `ChildParts` which are also in\n    // this list\n    // Disconnect Directive (and any nested directives contained within)\n    // This property needs to remain unminified.\n    (obj as AsyncDirective)['_$notifyDirectiveConnectionChanged']?.(\n      isConnected,\n      false\n    );\n    // Disconnect Part/TemplateInstance\n    notifyChildrenConnectedChanged(obj, isConnected);\n  }\n  return true;\n};\n\n/**\n * Removes the given child from its parent list of disconnectable children, and\n * if the parent list becomes empty as a result, removes the parent from its\n * parent, and so forth up the tree when that causes subsequent parent lists to\n * become empty.\n */\nconst removeDisconnectableFromParent = (obj: Disconnectable) => {\n  let parent, children;\n  do {\n    if ((parent = obj._$parent) === undefined) {\n      break;\n    }\n    children = parent._$disconnectableChildren!;\n    children.delete(obj);\n    obj = parent;\n  } while (children?.size === 0);\n};\n\nconst addDisconnectableToParent = (obj: Disconnectable) => {\n  // Climb the parent tree, creating a sparse tree of children needing\n  // disconnection\n  for (let parent; (parent = obj._$parent); obj = parent) {\n    let children = parent._$disconnectableChildren;\n    if (children === undefined) {\n      parent._$disconnectableChildren = children = new Set();\n    } else if (children.has(obj)) {\n      // Once we've reached a parent that already contains this child, we\n      // can short-circuit\n      break;\n    }\n    children.add(obj);\n    installDisconnectAPI(parent);\n  }\n};\n\n/**\n * Changes the parent reference of the ChildPart, and updates the sparse tree of\n * Disconnectable children accordingly.\n *\n * Note, this method will be patched onto ChildPart instances and called from\n * the core code when parts are moved between different parents.\n */\nfunction reparentDisconnectables(this: ChildPart, newParent: Disconnectable) {\n  if (this._$disconnectableChildren !== undefined) {\n    removeDisconnectableFromParent(this);\n    this._$parent = newParent;\n    addDisconnectableToParent(this);\n  } else {\n    this._$parent = newParent;\n  }\n}\n\n/**\n * Sets the connected state on any directives contained within the committed\n * value of this part (i.e. within a TemplateInstance or iterable of\n * ChildParts) and runs their `disconnected`/`reconnected`s, as well as within\n * any directives stored on the ChildPart (when `valueOnly` is false).\n *\n * `isClearingValue` should be passed as `true` on a top-level part that is\n * clearing itself, and not as a result of recursively disconnecting directives\n * as part of a `clear` operation higher up the tree. This both ensures that any\n * directive on this ChildPart that produced a value that caused the clear\n * operation is not disconnected, and also serves as a performance optimization\n * to avoid needless bookkeeping when a subtree is going away; when clearing a\n * subtree, only the top-most part need to remove itself from the parent.\n *\n * `fromPartIndex` is passed only in the case of a partial `_clear` running as a\n * result of truncating an iterable.\n *\n * Note, this method will be patched onto ChildPart instances and called from the\n * core code when parts are cleared or the connection state is changed by the\n * user.\n */\nfunction notifyChildPartConnectedChanged(\n  this: ChildPart,\n  isConnected: boolean,\n  isClearingValue = false,\n  fromPartIndex = 0\n) {\n  const value = this._$committedValue;\n  const children = this._$disconnectableChildren;\n  if (children === undefined || children.size === 0) {\n    return;\n  }\n  if (isClearingValue) {\n    if (Array.isArray(value)) {\n      // Iterable case: Any ChildParts created by the iterable should be\n      // disconnected and removed from this ChildPart's disconnectable\n      // children (starting at `fromPartIndex` in the case of truncation)\n      for (let i = fromPartIndex; i < value.length; i++) {\n        notifyChildrenConnectedChanged(value[i], false);\n        removeDisconnectableFromParent(value[i]);\n      }\n    } else if (value != null) {\n      // TemplateInstance case: If the value has disconnectable children (will\n      // only be in the case that it is a TemplateInstance), we disconnect it\n      // and remove it from this ChildPart's disconnectable children\n      notifyChildrenConnectedChanged(value as Disconnectable, false);\n      removeDisconnectableFromParent(value as Disconnectable);\n    }\n  } else {\n    notifyChildrenConnectedChanged(this, isConnected);\n  }\n}\n\n/**\n * Patches disconnection API onto ChildParts.\n */\nconst installDisconnectAPI = (obj: Disconnectable) => {\n  if ((obj as ChildPart).type == PartType.CHILD) {\n    (obj as ChildPart)._$notifyConnectionChanged ??=\n      notifyChildPartConnectedChanged;\n    (obj as ChildPart)._$reparentDisconnectables ??= reparentDisconnectables;\n  }\n};\n\n/**\n * An abstract `Directive` base class whose `disconnected` method will be\n * called when the part containing the directive is cleared as a result of\n * re-rendering, or when the user calls `part.setConnected(false)` on\n * a part that was previously rendered containing the directive (as happens\n * when e.g. a LitElement disconnects from the DOM).\n *\n * If `part.setConnected(true)` is subsequently called on a\n * containing part, the directive's `reconnected` method will be called prior\n * to its next `update`/`render` callbacks. When implementing `disconnected`,\n * `reconnected` should also be implemented to be compatible with reconnection.\n *\n * Note that updates may occur while the directive is disconnected. As such,\n * directives should generally check the `this.isConnected` flag during\n * render/update to determine whether it is safe to subscribe to resources\n * that may prevent garbage collection.\n */\nexport abstract class AsyncDirective extends Directive {\n  // As opposed to other Disconnectables, AsyncDirectives always get notified\n  // when the RootPart connection changes, so the public `isConnected`\n  // is a locally stored variable initialized via its part's getter and synced\n  // via `_$notifyDirectiveConnectionChanged`. This is cheaper than using\n  // the _$isConnected getter, which has to look back up the tree each time.\n  /**\n   * The connection state for this Directive.\n   */\n  isConnected!: boolean;\n\n  // @internal\n  override _$disconnectableChildren?: Set<Disconnectable> = undefined;\n  /**\n   * Initialize the part with internal fields\n   * @param part\n   * @param parent\n   * @param attributeIndex\n   */\n  override _$initialize(\n    part: Part,\n    parent: Disconnectable,\n    attributeIndex: number | undefined\n  ) {\n    super._$initialize(part, parent, attributeIndex);\n    addDisconnectableToParent(this);\n    this.isConnected = part._$isConnected;\n  }\n  // This property needs to remain unminified.\n  /**\n   * Called from the core code when a directive is going away from a part (in\n   * which case `shouldRemoveFromParent` should be true), and from the\n   * `setChildrenConnected` helper function when recursively changing the\n   * connection state of a tree (in which case `shouldRemoveFromParent` should\n   * be false).\n   *\n   * @param isConnected\n   * @param isClearingDirective - True when the directive itself is being\n   *     removed; false when the tree is being disconnected\n   * @internal\n   */\n  override ['_$notifyDirectiveConnectionChanged'](\n    isConnected: boolean,\n    isClearingDirective = true\n  ) {\n    if (isConnected !== this.isConnected) {\n      this.isConnected = isConnected;\n      if (isConnected) {\n        this.reconnected?.();\n      } else {\n        this.disconnected?.();\n      }\n    }\n    if (isClearingDirective) {\n      notifyChildrenConnectedChanged(this, isConnected);\n      removeDisconnectableFromParent(this);\n    }\n  }\n\n  /**\n   * Sets the value of the directive's Part outside the normal `update`/`render`\n   * lifecycle of a directive.\n   *\n   * This method should not be called synchronously from a directive's `update`\n   * or `render`.\n   *\n   * @param directive The directive to update\n   * @param value The value to set\n   */\n  setValue(value: unknown) {\n    if (isSingleExpression(this.__part as unknown as PartInfo)) {\n      this.__part._$setValue(value, this);\n    } else {\n      // this.__attributeIndex will be defined in this case, but\n      // assert it in dev mode\n      if (DEV_MODE && this.__attributeIndex === undefined) {\n        throw new Error(`Expected this.__attributeIndex to be a number`);\n      }\n      const newValues = [...(this.__part._$committedValue as Array<unknown>)];\n      newValues[this.__attributeIndex!] = value;\n      (this.__part as AttributePart)._$setValue(newValues, this, 0);\n    }\n  }\n\n  /**\n   * User callbacks for implementing logic to release any resources/subscriptions\n   * that may have been retained by this directive. Since directives may also be\n   * re-connected, `reconnected` should also be implemented to restore the\n   * working state of the directive prior to the next render.\n   */\n  protected disconnected() {}\n  protected reconnected() {}\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport {nothing, ElementPart} from '../lit-html.js';\nimport {directive, AsyncDirective} from '../async-directive.js';\n\n/**\n * Creates a new Ref object, which is container for a reference to an element.\n */\nexport const createRef = <T = Element>() => new Ref<T>();\n\n/**\n * An object that holds a ref value.\n */\nclass Ref<T = Element> {\n  /**\n   * The current Element value of the ref, or else `undefined` if the ref is no\n   * longer rendered.\n   */\n  readonly value?: T;\n}\n\nexport type {Ref};\n\ninterface RefInternal {\n  value: Element | undefined;\n}\n\n// When callbacks are used for refs, this map tracks the last value the callback\n// was called with, for ensuring a directive doesn't clear the ref if the ref\n// has already been rendered to a new spot. It is double-keyed on both the\n// context (`options.host`) and the callback, since we auto-bind class methods\n// to `options.host`.\nconst lastElementForContextAndCallback = new WeakMap<\n  object,\n  WeakMap<Function, Element | undefined>\n>();\n\nexport type RefOrCallback<T = Element> = Ref<T> | ((el: T | undefined) => void);\n\nclass RefDirective extends AsyncDirective {\n  private _element?: Element;\n  private _ref?: RefOrCallback;\n  private _context?: object;\n\n  render(_ref?: RefOrCallback) {\n    return nothing;\n  }\n\n  override update(part: ElementPart, [ref]: Parameters<this['render']>) {\n    const refChanged = ref !== this._ref;\n    if (refChanged && this._ref !== undefined) {\n      // The ref passed to the directive has changed;\n      // unset the previous ref's value\n      this._updateRefValue(undefined);\n    }\n    if (refChanged || this._lastElementForRef !== this._element) {\n      // We either got a new ref or this is the first render;\n      // store the ref/element & update the ref value\n      this._ref = ref;\n      this._context = part.options?.host;\n      this._updateRefValue((this._element = part.element));\n    }\n    return nothing;\n  }\n\n  private _updateRefValue(element: Element | undefined) {\n    if (!this.isConnected) {\n      element = undefined;\n    }\n    if (typeof this._ref === 'function') {\n      // If the current ref was called with a previous value, call with\n      // `undefined`; We do this to ensure callbacks are called in a consistent\n      // way regardless of whether a ref might be moving up in the tree (in\n      // which case it would otherwise be called with the new value before the\n      // previous one unsets it) and down in the tree (where it would be unset\n      // before being set). Note that element lookup is keyed by\n      // both the context and the callback, since we allow passing unbound\n      // functions that are called on options.host, and we want to treat\n      // these as unique \"instances\" of a function.\n      const context = this._context ?? globalThis;\n      let lastElementForCallback =\n        lastElementForContextAndCallback.get(context);\n      if (lastElementForCallback === undefined) {\n        lastElementForCallback = new WeakMap();\n        lastElementForContextAndCallback.set(context, lastElementForCallback);\n      }\n      if (lastElementForCallback.get(this._ref) !== undefined) {\n        this._ref.call(this._context, undefined);\n      }\n      lastElementForCallback.set(this._ref, element);\n      // Call the ref with the new element value\n      if (element !== undefined) {\n        this._ref.call(this._context, element);\n      }\n    } else {\n      (this._ref as RefInternal)!.value = element;\n    }\n  }\n\n  private get _lastElementForRef() {\n    return typeof this._ref === 'function'\n      ? lastElementForContextAndCallback\n          .get(this._context ?? globalThis)\n          ?.get(this._ref)\n      : this._ref?.value;\n  }\n\n  override disconnected() {\n    // Only clear the box if our element is still the one in it (i.e. another\n    // directive instance hasn't rendered its element to it before us); that\n    // only happens in the event of the directive being cleared (not via manual\n    // disconnection)\n    if (this._lastElementForRef === this._element) {\n      this._updateRefValue(undefined);\n    }\n  }\n\n  override reconnected() {\n    // If we were manually disconnected, we can safely put our element back in\n    // the box, since no rendering could have occurred to change its state\n    this._updateRefValue(this._element);\n  }\n}\n\n/**\n * Sets the value of a Ref object or calls a ref callback with the element it's\n * bound to.\n *\n * A Ref object acts as a container for a reference to an element. A ref\n * callback is a function that takes an element as its only argument.\n *\n * The ref directive sets the value of the Ref object or calls the ref callback\n * during rendering, if the referenced element changed.\n *\n * Note: If a ref callback is rendered to a different element position or is\n * removed in a subsequent render, it will first be called with `undefined`,\n * followed by another call with the new element it was rendered to (if any).\n *\n * ```js\n * // Using Ref object\n * const inputRef = createRef();\n * render(html`<input ${ref(inputRef)}>`, container);\n * inputRef.value.focus();\n *\n * // Using callback\n * const callback = (inputElement) => inputElement.focus();\n * render(html`<input ${ref(callback)}>`, container);\n * ```\n */\nexport const ref = directive(RefDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {RefDirective};\n"],"names":["getIconScale","componentScale","warnIfMissingRequiredProp","component","newProp","deprecatedProp","logger","warn","el","localName","toString","isHidden","hidden","itemHidden","async","componentFocusable","componentOnReady","updateComplete","loggedDeprecations","Set","logLevels","trace","debug","info","error","off","forwardToConsole","level","data","logLevel","willLog","console","call","this","listFormatter","message","deprecated","context","name","suggested","removalVersion","key","has","add","multiSuggestions","Array","isArray","Intl","ListFormat","style","type","format","map","suggestion","CSS","styles","css","DEFAULT_COLOR","Color","ColorPickerHexInput","LitElement","constructor","super","arguments","internalColor","alphaChannel","allowEmpty","hexLabel","scale","value","normalizeHex","hexify","calciteColorPickerHexInputChange","createEvent","cancelable","properties","state","Boolean","messages","attribute","numberingSystem","reflect","setFocus","focusElement","hexInputNode","connectedCallback","previousNonNullValue","normalized","isValidHex","internalSetValue","willUpdate","changes","hasUpdated","get","onHexInputBlur","node","inputValue","hex","willClearValue","isLonghand","isLonghandHex","isShorthandHex","onHexInputChange","formatHexForInternalInput","rgbToHex","object","onOpacityInputBlur","opacityInputNode","formatOpacityForInternalInput","onOpacityInputInput","onOpacityInputChange","hexa","slice","alpha","opacityToAlpha","Number","onInputFocus","event","selectText","onHexInputInput","hexInputValue","oldValue","onInputKeyDown","altKey","ctrlKey","metaKey","shiftKey","composedPath","includes","preventDefault","isNudgeKey","direction","bump","nudgeRGBChannels","withModifiers","singleChar","length","validHexChar","hexChar","test","onHexInputPaste","clipboardData","getData","emit","currentColor","nextColor","normalizedLonghand","changed","storeHexInputRef","storeOpacityInputRef","replace","color","alphaToOpacity","amount","nudgedChannels","channels","array","rgbChannels","channel","nudgedAlpha","render","opacityInputValue","inputScale","html","safeClassMap","ref","keyed","opacity","OPACITY_LIMITS","max","min","customElement","i","t","e","r","update","s","notifyChildrenConnectedChanged","_$AN","_$AO","o","_$AM","delete","size","c","h","n","_$AH","CHILD","_$AP","_$AQ","f","_$AT","isConnected","_$AU","reconnected","disconnected","setValue","_$Ct","_$AI","_$Ci","createRef","WeakMap","G","rt","lt","ct","ht","options","host","element","globalThis","set"],"sourceRoot":""}