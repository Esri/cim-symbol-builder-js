{"version":3,"file":"static/js/8023.47e9c18d.chunk.js","mappings":"qKAIgE,IAAIA,EAAE,SAASC,EAAEA,EAAEC,GAAG,IAAIC,EAAED,EAAEE,aAAaD,EAAE,iBAAiBA,GAAG,SAASA,GAAG,SAASA,GAAG,WAAWA,GAAG,wBAAwBA,GAAG,SAASA,IAAIA,EAAE,QAAQA,EAAE,OAAOD,EAAEE,aAAaD,EAAE,MAAME,GAAEC,EAAAA,EAAAA,IAAEJ,EAAEK,QAAQ,cAAcL,EAAEK,OAAOC,WAAWC,oBAAoB,UAAU,CAACC,IAAIT,EAAEU,QAAQT,GAAG,CAACK,OAAOF,IAAIO,MAAMC,UAAU,IAAIC,EAAEC,EAAEC,EAAEC,EAAEC,EAAE,GAAGZ,EAAEa,KAAK,GAAGb,EAAEa,gBAAgBC,aAAa,KAAK,SAASjB,GAAG,SAASA,GAAG,SAASA,IAAIW,EAAE,IAAIO,KAAK,CAACf,EAAEa,OAAO,SAAShB,GAAG,SAASA,IAAIH,IAAIA,EAAE,IAAIsB,gBAAgBL,EAAEjB,EAAEuB,WAAWT,GAAG,SAASX,KAAK,CAAC,IAAIY,EAAES,KAAKC,MAAMR,GAAG,MAAM,MAAMS,GAAG,MAAMpB,EAAE,IAAIoB,EAAEhB,IAAIT,EAAE0B,eAAezB,GAAG,MAAM,IAAI0B,EAAAA,EAAE,iBAAiBF,EAAEG,QAAQvB,GAAG,GAAGS,EAAEe,MAAM,CAAC,MAAMxB,EAAE,IAAIS,EAAEe,MAAMpB,IAAIT,EAAE0B,eAAezB,GAAG,MAAM,IAAI0B,EAAAA,EAAE,iBAAiBb,EAAEe,MAAMD,QAAQvB,SAAS,WAAWH,IAAIG,EAAEa,KAAKZ,OAAOF,EAAEW,QAAQe,MAAMzB,EAAEa,KAAKT,IAAIJ,EAAEa,MAAMb,EAAE0B,WAAWhB,EAAEiB,QAAQ,OAAO9B,GAAG,IAAI,OAAOe,EAAEJ,EAAE,MAAM,IAAI,OAAOI,EAAEH,EAAE,MAAM,IAAI,SAASG,EAAEF,EAAE,MAAM,IAAI,OAAOE,EAAED,EAAE,MAAM,QAAQC,EAAEZ,EAAEa,KAAK,MAAM,CAACA,KAAKD,EAAEc,WAAW1B,EAAE0B,WAAWL,eAAezB,EAAEgC,IAAI5B,EAAE4B,IAAIxB,IAAIT","sources":["../node_modules/@arcgis/core/core/workers/request.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.26/esri/copyright.txt for details.\n*/\nimport e from\"../Error.js\";import{unwrap as t}from\"../maybe.js\";let s;function r(r,a){let n=a.responseType;n?\"array-buffer\"!==n&&\"blob\"!==n&&\"json\"!==n&&\"native\"!==n&&\"native-request-init\"!==n&&\"text\"!==n&&(n=\"text\"):n=\"json\",a.responseType=n;const o=t(a.signal);return delete a.signal,globalThis.invokeStaticMessage(\"request\",{url:r,options:a},{signal:o}).then((async t=>{let i,l,u,c,p;if(t.data)if(t.data instanceof ArrayBuffer){if(!(\"json\"!==n&&\"text\"!==n&&\"blob\"!==n||(i=new Blob([t.data]),\"json\"!==n&&\"text\"!==n||(s||(s=new FileReaderSync),c=s.readAsText(i),\"json\"!==n)))){try{l=JSON.parse(c||null)}catch(b){const t={...b,url:r,requestOptions:a};throw new e(\"request:server\",b.message,t)}if(l.error){const t={...l.error,url:r,requestOptions:a};throw new e(\"request:server\",l.error.message,t)}}}else\"native\"===n&&(t.data.signal=o,u=await fetch(t.data.url,t.data),t.httpStatus=u.status);switch(n){case\"blob\":p=i;break;case\"json\":p=l;break;case\"native\":p=u;break;case\"text\":p=c;break;default:p=t.data}return{data:p,httpStatus:t.httpStatus,requestOptions:a,ssl:t.ssl,url:r}}))}export{r as execute};\n"],"names":["s","r","a","n","responseType","o","t","signal","globalThis","invokeStaticMessage","url","options","then","async","i","l","u","c","p","data","ArrayBuffer","Blob","FileReaderSync","readAsText","JSON","parse","b","requestOptions","e","message","error","fetch","httpStatus","status","ssl"],"sourceRoot":""}