{"version":3,"file":"static/js/3993.45e09819.chunk.js","mappings":"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tF,EACJsB,QAAQ,UAAW,IACnBX,UAAU,EAAG2E,GACb7D,OAAOzB,EAAakB,MAAMoE,GAAQhE,QAAQ,QAAS,KACnDpB,MAAM,QACN8C,KAAI,CAACyC,EAASrB,IAAiBiB,EAAJ,IAANjB,EAAeqB,EAAQnE,QAAQ,MAAO,IAAYmE,KACvExC,KAAK,KACL3B,QAAQ,KAAM,MATR+D,EAAKrF,GAsDhB,MAAM0F,EAAgB,KAChBC,EAAa,CACjB,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACAD,EACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,QACA,QACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,QACA,QACA,SAEIE,EAAU,CACd,KACA,KACA,KACA,KACA,KACA,KACA,KACA,QACA,KACAF,EACA,QACA,QACA,QACA,KACA,QACA,KACA,KACA,KACA,QACA,KACA,KACA,KACA,KACA,KACA,KACA,QACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,QACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,QACA,QACA,SAEIG,EAAmB,CACvB,OACA,UACA,OACA,OACA,OACA,WACA,OACA,OACA,UACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,UACA,OACA,OACA,QAEIC,EAA8BC,GAAoBF,EAAiB/B,SAASiC,GAC5EC,GAAyB,IAAIC,KAAKC,cAAeC,kBAAkBJ,gBACnEK,EAAoD,SAA3BJ,GAAsCF,EAA2BE,GAE5FA,EADA,OAEEK,EAA+BN,GAAoBD,EAA2BC,GAAmBA,EAAkBK,EAOzH,SAASE,EAAmBC,GAA0B,IAAlBC,EAAkB,uDAAR,OAC5C,MAAMC,EAAgC,SAAZD,EAAqBZ,EAAUD,EACzD,OAAKY,EAGDE,EAAkB3C,SAASyC,GACtBA,EAIM,QAFfA,EAASA,EAAOhB,eAGP,KAGO,QAAZiB,GAAgC,OAAXD,EAChB,SAELA,EAAOzC,SAAS,OAClByC,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","sources":["../node_modules/@esri/calcite-components/dist/esm/key-4f8ab7a0.js","../node_modules/@esri/calcite-components/dist/esm/locale-e71d40b1.js","../node_modules/@esri/calcite-components/dist/esm/observers-f268ee68.js","../node_modules/@esri/calcite-components/dist/esm/t9n-df463c97.js"],"sourcesContent":["/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-components/blob/master/LICENSE.md for details.\n * v1.1.0\n */\nfunction isActivationKey(key) {\n  return key === \"Enter\" || key === \" \";\n}\nconst numberKeys = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"];\n\nexport { isActivationKey as i, numberKeys as n };\n","/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-components/blob/master/LICENSE.md for details.\n * v1.1.0\n */\nimport { c as closestElementCrossShadowBoundary, a as containsCrossShadowBoundary } from './dom-13d14bf1.js';\nimport { n as numberKeys } from './key-4f8ab7a0.js';\nimport { c as createObserver } from './observers-f268ee68.js';\n\nconst unnecessaryDecimal = new RegExp(`\\\\${\".\"}(0+)?$`);\nconst trailingZeros = new RegExp(\"0+$\");\n// adopted from https://stackoverflow.com/a/66939244\nclass BigDecimal {\n  constructor(input) {\n    if (input instanceof BigDecimal) {\n      return input;\n    }\n    const [integers, decimals] = expandExponentialNumberString(input).split(\".\").concat(\"\");\n    this.value =\n      BigInt(integers + decimals.padEnd(BigDecimal.DECIMALS, \"0\").slice(0, BigDecimal.DECIMALS)) +\n        BigInt(BigDecimal.ROUNDED && decimals[BigDecimal.DECIMALS] >= \"5\");\n    this.isNegative = input.charAt(0) === \"-\";\n  }\n  getIntegersAndDecimals() {\n    const s = this.value\n      .toString()\n      .replace(\"-\", \"\")\n      .padStart(BigDecimal.DECIMALS + 1, \"0\");\n    const integers = s.slice(0, -BigDecimal.DECIMALS);\n    const decimals = s.slice(-BigDecimal.DECIMALS).replace(trailingZeros, \"\");\n    return { integers, decimals };\n  }\n  toString() {\n    const { integers, decimals } = this.getIntegersAndDecimals();\n    return `${this.isNegative ? \"-\" : \"\"}${integers}${decimals.length ? \".\" + decimals : \"\"}`;\n  }\n  formatToParts(formatter) {\n    const { integers, decimals } = this.getIntegersAndDecimals();\n    const parts = formatter.numberFormatter.formatToParts(BigInt(integers));\n    this.isNegative && parts.unshift({ type: \"minusSign\", value: formatter.minusSign });\n    if (decimals.length) {\n      parts.push({ type: \"decimal\", value: formatter.decimal });\n      decimals.split(\"\").forEach((char) => parts.push({ type: \"fraction\", value: char }));\n    }\n    return parts;\n  }\n  format(formatter) {\n    const { integers, decimals } = this.getIntegersAndDecimals();\n    const integersFormatted = `${this.isNegative ? formatter.minusSign : \"\"}${formatter.numberFormatter.format(BigInt(integers))}`;\n    const decimalsFormatted = decimals.length\n      ? `${formatter.decimal}${decimals\n        .split(\"\")\n        .map((char) => formatter.numberFormatter.format(Number(char)))\n        .join(\"\")}`\n      : \"\";\n    return `${integersFormatted}${decimalsFormatted}`;\n  }\n  add(n) {\n    return BigDecimal.fromBigInt(this.value + new BigDecimal(n).value);\n  }\n  subtract(n) {\n    return BigDecimal.fromBigInt(this.value - new BigDecimal(n).value);\n  }\n  multiply(n) {\n    return BigDecimal._divRound(this.value * new BigDecimal(n).value, BigDecimal.SHIFT);\n  }\n  divide(n) {\n    return BigDecimal._divRound(this.value * BigDecimal.SHIFT, new BigDecimal(n).value);\n  }\n}\n// Configuration: constants\nBigDecimal.DECIMALS = 100; // number of decimals on all instances\nBigDecimal.ROUNDED = true; // numbers are truncated (false) or rounded (true)\nBigDecimal.SHIFT = BigInt(\"1\" + \"0\".repeat(BigDecimal.DECIMALS)); // derived constant\nBigDecimal._divRound = (dividend, divisor) => BigDecimal.fromBigInt(dividend / divisor + (BigDecimal.ROUNDED ? ((dividend * BigInt(2)) / divisor) % BigInt(2) : BigInt(0)));\nBigDecimal.fromBigInt = (bigint) => Object.assign(Object.create(BigDecimal.prototype), { value: bigint, isNegative: bigint < BigInt(0) });\nfunction isValidNumber(numberString) {\n  return !(!numberString || isNaN(Number(numberString)));\n}\nfunction parseNumberString(numberString) {\n  if (!numberString || !stringContainsNumbers(numberString)) {\n    return \"\";\n  }\n  return sanitizeExponentialNumberString(numberString, (nonExpoNumString) => {\n    let containsDecimal = false;\n    const result = nonExpoNumString\n      .split(\"\")\n      .filter((value, i) => {\n      if (value.match(/\\./g) && !containsDecimal) {\n        containsDecimal = true;\n        return true;\n      }\n      if (value.match(/\\-/g) && i === 0) {\n        return true;\n      }\n      return numberKeys.includes(value);\n    })\n      .reduce((string, part) => string + part);\n    return isValidNumber(result) ? new BigDecimal(result).toString() : \"\";\n  });\n}\n// regex for number sanitization\nconst allLeadingZerosOptionallyNegative = /^([-0])0+(?=\\d)/;\nconst decimalOnlyAtEndOfString = /(?!^\\.)\\.$/;\nconst allHyphensExceptTheStart = /(?!^-)-/g;\nconst isNegativeDecimalOnlyZeros = /^-\\b0\\b\\.?0*$/;\nconst sanitizeNumberString = (numberString) => sanitizeExponentialNumberString(numberString, (nonExpoNumString) => {\n  const sanitizedValue = nonExpoNumString\n    .replace(allHyphensExceptTheStart, \"\")\n    .replace(decimalOnlyAtEndOfString, \"\")\n    .replace(allLeadingZerosOptionallyNegative, \"$1\");\n  return isValidNumber(sanitizedValue)\n    ? isNegativeDecimalOnlyZeros.test(sanitizedValue)\n      ? sanitizedValue\n      : new BigDecimal(sanitizedValue).toString()\n    : nonExpoNumString;\n});\nfunction sanitizeExponentialNumberString(numberString, func) {\n  if (!numberString) {\n    return numberString;\n  }\n  const firstE = numberString.toLowerCase().indexOf(\"e\") + 1;\n  if (!firstE) {\n    return func(numberString);\n  }\n  return numberString\n    .replace(/[eE]*$/g, \"\")\n    .substring(0, firstE)\n    .concat(numberString.slice(firstE).replace(/[eE]/g, \"\"))\n    .split(/[eE]/)\n    .map((section, i) => (i === 1 ? func(section.replace(/\\./g, \"\")) : func(section)))\n    .join(\"e\")\n    .replace(/^e/, \"1e\");\n}\n/**\n * Converts an exponential notation numberString into decimal notation.\n * BigInt doesn't support exponential notation, so this is required to maintain precision\n *\n * @param {string} numberString - pre-validated exponential or decimal number\n * @returns {string} numberString in decimal notation\n */\nfunction expandExponentialNumberString(numberString) {\n  const exponentialParts = numberString.split(/[eE]/);\n  if (exponentialParts.length === 1) {\n    return numberString;\n  }\n  const number = +numberString;\n  if (Number.isSafeInteger(number)) {\n    return `${number}`;\n  }\n  const isNegative = numberString.charAt(0) === \"-\";\n  const magnitude = +exponentialParts[1];\n  const decimalParts = exponentialParts[0].split(\".\");\n  const integers = (isNegative ? decimalParts[0].substring(1) : decimalParts[0]) || \"\";\n  const decimals = decimalParts[1] || \"\";\n  const shiftDecimalLeft = (integers, magnitude) => {\n    const magnitudeDelta = Math.abs(magnitude) - integers.length;\n    const leftPaddedZeros = magnitudeDelta > 0 ? `${\"0\".repeat(magnitudeDelta)}${integers}` : integers;\n    const shiftedDecimal = `${leftPaddedZeros.slice(0, magnitude)}${\".\"}${leftPaddedZeros.slice(magnitude)}`;\n    return shiftedDecimal;\n  };\n  const shiftDecimalRight = (decimals, magnitude) => {\n    const rightPaddedZeros = magnitude > decimals.length ? `${decimals}${\"0\".repeat(magnitude - decimals.length)}` : decimals;\n    const shiftedDecimal = `${rightPaddedZeros.slice(0, magnitude)}${\".\"}${rightPaddedZeros.slice(magnitude)}`;\n    return shiftedDecimal;\n  };\n  const expandedNumberString = magnitude > 0\n    ? `${integers}${shiftDecimalRight(decimals, magnitude)}`\n    : `${shiftDecimalLeft(integers, magnitude)}${decimals}`;\n  return `${isNegative ? \"-\" : \"\"}${expandedNumberString.charAt(0) === \".\" ? \"0\" : \"\"}${expandedNumberString\n    .replace(unnecessaryDecimal, \"\")\n    .replace(allLeadingZerosOptionallyNegative, \"\")}`;\n}\nfunction stringContainsNumbers(string) {\n  return numberKeys.some((number) => string.includes(number));\n}\n\nconst defaultLocale = \"en\";\nconst t9nLocales = [\n  \"ar\",\n  \"bg\",\n  \"bs\",\n  \"ca\",\n  \"cs\",\n  \"da\",\n  \"de\",\n  \"el\",\n  defaultLocale,\n  \"es\",\n  \"et\",\n  \"fi\",\n  \"fr\",\n  \"he\",\n  \"hr\",\n  \"hu\",\n  \"id\",\n  \"it\",\n  \"ja\",\n  \"ko\",\n  \"lt\",\n  \"lv\",\n  \"no\",\n  \"nl\",\n  \"pl\",\n  \"pt-BR\",\n  \"pt-PT\",\n  \"ro\",\n  \"ru\",\n  \"sk\",\n  \"sl\",\n  \"sr\",\n  \"sv\",\n  \"th\",\n  \"tr\",\n  \"uk\",\n  \"vi\",\n  \"zh-CN\",\n  \"zh-HK\",\n  \"zh-TW\"\n];\nconst locales = [\n  \"ar\",\n  \"bg\",\n  \"bs\",\n  \"ca\",\n  \"cs\",\n  \"da\",\n  \"de\",\n  \"de-CH\",\n  \"el\",\n  defaultLocale,\n  \"en-AU\",\n  \"en-CA\",\n  \"en-GB\",\n  \"es\",\n  \"es-MX\",\n  \"et\",\n  \"fi\",\n  \"fr\",\n  \"fr-CH\",\n  \"he\",\n  \"hi\",\n  \"hr\",\n  \"hu\",\n  \"id\",\n  \"it\",\n  \"it-CH\",\n  \"ja\",\n  \"ko\",\n  \"lt\",\n  \"lv\",\n  \"mk\",\n  \"no\",\n  \"nl\",\n  \"pl\",\n  \"pt\",\n  \"pt-PT\",\n  \"ro\",\n  \"ru\",\n  \"sk\",\n  \"sl\",\n  \"sr\",\n  \"sv\",\n  \"th\",\n  \"tr\",\n  \"uk\",\n  \"vi\",\n  \"zh-CN\",\n  \"zh-HK\",\n  \"zh-TW\"\n];\nconst numberingSystems = [\n  \"arab\",\n  \"arabext\",\n  \"bali\",\n  \"beng\",\n  \"deva\",\n  \"fullwide\",\n  \"gujr\",\n  \"guru\",\n  \"hanidec\",\n  \"khmr\",\n  \"knda\",\n  \"laoo\",\n  \"latn\",\n  \"limb\",\n  \"mlym\",\n  \"mong\",\n  \"mymr\",\n  \"orya\",\n  \"tamldec\",\n  \"telu\",\n  \"thai\",\n  \"tibt\"\n];\nconst isNumberingSystemSupported = (numberingSystem) => numberingSystems.includes(numberingSystem);\nconst browserNumberingSystem = new Intl.NumberFormat().resolvedOptions().numberingSystem;\nconst defaultNumberingSystem = browserNumberingSystem === \"arab\" || !isNumberingSystemSupported(browserNumberingSystem)\n  ? \"latn\"\n  : browserNumberingSystem;\nconst getSupportedNumberingSystem = (numberingSystem) => isNumberingSystemSupported(numberingSystem) ? numberingSystem : defaultNumberingSystem;\n/**\n * Gets the locale that best matches the context.\n *\n * @param locale – the BCP 47 locale code\n * @param context - specifies whether the locale code should match in the context of CLDR or T9N (translation)\n */\nfunction getSupportedLocale(locale, context = \"cldr\") {\n  const contextualLocales = context === \"cldr\" ? locales : t9nLocales;\n  if (!locale) {\n    return defaultLocale;\n  }\n  if (contextualLocales.includes(locale)) {\n    return locale;\n  }\n  locale = locale.toLowerCase();\n  // we support both 'nb' and 'no' (BCP 47) for Norwegian but only `no` has corresponding bundle\n  if (locale === \"nb\") {\n    return \"no\";\n  }\n  // we use `pt-BR` as it will have the same translations as `pt`, which has no corresponding bundle\n  if (context === \"t9n\" && locale === \"pt\") {\n    return \"pt-BR\";\n  }\n  if (locale.includes(\"-\")) {\n    locale = locale.replace(/(\\w+)-(\\w+)/, (_match, language, region) => `${language}-${region.toUpperCase()}`);\n    if (!contextualLocales.includes(locale)) {\n      locale = locale.split(\"-\")[0];\n    }\n  }\n  // we can `zh-CN` as base translation for chinese locales which has no corresponding bundle.\n  if (locale === \"zh\") {\n    return \"zh-CN\";\n  }\n  if (!contextualLocales.includes(locale)) {\n    console.warn(`Translations for the \"${locale}\" locale are not available and will fall back to the default, English (en).`);\n    return defaultLocale;\n  }\n  return locale;\n}\nconst connectedComponents = new Set();\n/**\n * This utility sets up internals for messages support.\n *\n * It needs to be called in `connectedCallback` before any logic that depends on locale\n *\n * @param component\n */\nfunction connectLocalized(component) {\n  updateEffectiveLocale(component);\n  if (connectedComponents.size === 0) {\n    mutationObserver?.observe(document.documentElement, {\n      attributes: true,\n      attributeFilter: [\"lang\"],\n      subtree: true\n    });\n  }\n  connectedComponents.add(component);\n}\n/**\n * This is only exported for components that implemented the now deprecated `locale` prop.\n *\n * Do not use this utils for new components.\n *\n * @param component\n */\nfunction updateEffectiveLocale(component) {\n  component.effectiveLocale = getLocale(component);\n}\n/**\n * This utility tears down internals for messages support.\n *\n * It needs to be called in `disconnectedCallback`\n *\n * @param component\n */\nfunction disconnectLocalized(component) {\n  connectedComponents.delete(component);\n  if (connectedComponents.size === 0) {\n    mutationObserver.disconnect();\n  }\n}\nconst mutationObserver = createObserver(\"mutation\", (records) => {\n  records.forEach((record) => {\n    const el = record.target;\n    connectedComponents.forEach((component) => {\n      const inUnrelatedSubtree = !containsCrossShadowBoundary(el, component.el);\n      if (inUnrelatedSubtree) {\n        return;\n      }\n      const closestLangEl = closestElementCrossShadowBoundary(component.el, \"[lang]\");\n      if (!closestLangEl) {\n        component.effectiveLocale = defaultLocale;\n        return;\n      }\n      const closestLang = closestLangEl.lang;\n      component.effectiveLocale =\n        // user set lang=\"\" means unknown language, so we use default\n        closestLangEl.hasAttribute(\"lang\") && closestLang === \"\" ? defaultLocale : closestLang;\n    });\n  });\n});\n/**\n * This util helps resolve a component's locale.\n * It will also fall back on the deprecated `locale` if a component implemented this previously.\n *\n * @param component\n */\nfunction getLocale(component) {\n  return (component.el.lang ||\n    closestElementCrossShadowBoundary(component.el, \"[lang]\")?.lang ||\n    document.documentElement.lang ||\n    defaultLocale);\n}\n/**\n * This util formats and parses numbers for localization\n */\nclass NumberStringFormat {\n  constructor() {\n    this.delocalize = (numberString) => \n    // For performance, (de)localization is skipped if the formatter isn't initialized.\n    // In order to localize/delocalize, e.g. when lang/numberingSystem props are not default values,\n    // `numberFormatOptions` must be set in a component to create and cache the formatter.\n    this._numberFormatOptions\n      ? sanitizeExponentialNumberString(numberString, (nonExpoNumString) => nonExpoNumString\n        .trim()\n        .replace(new RegExp(`[${this._minusSign}]`, \"g\"), \"-\")\n        .replace(new RegExp(`[${this._group}]`, \"g\"), \"\")\n        .replace(new RegExp(`[${this._decimal}]`, \"g\"), \".\")\n        .replace(new RegExp(`[${this._digits.join(\"\")}]`, \"g\"), this._getDigitIndex))\n      : numberString;\n    this.localize = (numberString) => this._numberFormatOptions\n      ? sanitizeExponentialNumberString(numberString, (nonExpoNumString) => isValidNumber(nonExpoNumString.trim())\n        ? new BigDecimal(nonExpoNumString.trim())\n          .format(this)\n          .replace(new RegExp(`[${this._actualGroup}]`, \"g\"), this._group)\n        : nonExpoNumString)\n      : numberString;\n  }\n  get group() {\n    return this._group;\n  }\n  get decimal() {\n    return this._decimal;\n  }\n  get minusSign() {\n    return this._minusSign;\n  }\n  get digits() {\n    return this._digits;\n  }\n  get numberFormatter() {\n    return this._numberFormatter;\n  }\n  get numberFormatOptions() {\n    return this._numberFormatOptions;\n  }\n  /**\n   * numberFormatOptions needs to be set before localize/delocalize is called to ensure the options are up to date\n   */\n  set numberFormatOptions(options) {\n    options.locale = getSupportedLocale(options?.locale);\n    options.numberingSystem = getSupportedNumberingSystem(options?.numberingSystem);\n    if (\n    // No need to create the formatter if `locale` and `numberingSystem`\n    // are the default values and `numberFormatOptions` has not been set\n    (!this._numberFormatOptions &&\n      options.locale === defaultLocale &&\n      options.numberingSystem === defaultNumberingSystem &&\n      // don't skip initialization if any options besides locale/numberingSystem are set\n      Object.keys(options).length === 2) ||\n      // cache formatter by only recreating when options change\n      JSON.stringify(this._numberFormatOptions) === JSON.stringify(options)) {\n      return;\n    }\n    this._numberFormatOptions = options;\n    this._numberFormatter = new Intl.NumberFormat(this._numberFormatOptions.locale, this._numberFormatOptions);\n    this._digits = [\n      ...new Intl.NumberFormat(this._numberFormatOptions.locale, {\n        useGrouping: false,\n        numberingSystem: this._numberFormatOptions.numberingSystem\n      }).format(9876543210)\n    ].reverse();\n    const index = new Map(this._digits.map((d, i) => [d, i]));\n    const parts = new Intl.NumberFormat(this._numberFormatOptions.locale).formatToParts(-12345678.9);\n    this._actualGroup = parts.find((d) => d.type === \"group\").value;\n    // change whitespace group characters that don't render correctly\n    this._group = this._actualGroup.trim().length === 0 ? \" \" : this._actualGroup;\n    this._decimal = parts.find((d) => d.type === \"decimal\").value;\n    this._minusSign = parts.find((d) => d.type === \"minusSign\").value;\n    this._getDigitIndex = (d) => index.get(d);\n  }\n}\nconst numberStringFormatter = new NumberStringFormat();\n\nexport { BigDecimal as B, defaultNumberingSystem as a, getSupportedNumberingSystem as b, connectLocalized as c, disconnectLocalized as d, getSupportedLocale as g, isValidNumber as i, numberStringFormatter as n, parseNumberString as p, sanitizeNumberString as s };\n","/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-components/blob/master/LICENSE.md for details.\n * v1.1.0\n */\n/**\n * This utility ensures observers are created only for browser contexts.\n *\n * @param type - the type of observer to create\n * @param callback - the observer callback\n * @param options - the observer options\n */\nfunction createObserver(type, callback, options) {\n  const Observer = getObserver(type);\n  return new Observer(callback, options);\n}\nfunction getObserver(type) {\n  // based on https://github.com/whatwg/dom/issues/126#issuecomment-1049814948\n  class ExtendedMutationObserver extends window.MutationObserver {\n    constructor(callback) {\n      super(callback);\n      this.observedEntry = [];\n      this.callback = callback;\n    }\n    observe(target, options) {\n      this.observedEntry.push({ target, options });\n      return super.observe(target, options);\n    }\n    unobserve(target) {\n      const newObservedEntries = this.observedEntry.filter((observed) => observed.target !== target);\n      this.observedEntry = [];\n      this.callback(super.takeRecords(), this);\n      this.disconnect();\n      newObservedEntries.forEach((observed) => this.observe(observed.target, observed.options));\n    }\n  }\n  return (function () {\n    return (type === \"intersection\"\n      ? window.IntersectionObserver\n      : type === \"mutation\"\n        ? ExtendedMutationObserver\n        : window.ResizeObserver);\n  })();\n}\n\nexport { createObserver as c };\n","/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-components/blob/master/LICENSE.md for details.\n * v1.1.0\n */\nimport { a as getAssetPath } from './index-b8735a76.js';\nimport { g as getSupportedLocale } from './locale-e71d40b1.js';\n\nconst componentLangToMessageBundleCache = {};\nasync function getMessageBundle(lang, component) {\n  const key = `${component}_${lang}`;\n  if (componentLangToMessageBundleCache[key]) {\n    return componentLangToMessageBundleCache[key];\n  }\n  componentLangToMessageBundleCache[key] = fetch(getAssetPath(`./assets/${component}/t9n/messages_${lang}.json`))\n    .then((resp) => {\n    if (!resp.ok) {\n      throwMessageFetchError();\n    }\n    return resp.json();\n  })\n    .catch(() => throwMessageFetchError());\n  return componentLangToMessageBundleCache[key];\n}\nfunction throwMessageFetchError() {\n  throw new Error(\"could not fetch component message bundle\");\n}\nfunction mergeMessages(component) {\n  component.messages = {\n    ...component.defaultMessages,\n    ...component.messageOverrides\n  };\n}\n/**\n * This utility sets up the messages used by the component. It should be awaited in the `componentWillLoad` lifecycle hook.\n *\n * @param component\n */\nasync function setUpMessages(component) {\n  component.defaultMessages = await fetchMessages(component, component.effectiveLocale);\n  mergeMessages(component);\n}\nasync function fetchMessages(component, lang) {\n  const { el } = component;\n  const tag = el.tagName.toLowerCase();\n  const componentName = tag.replace(\"calcite-\", \"\");\n  return getMessageBundle(getSupportedLocale(lang, \"t9n\"), componentName);\n}\n/**\n * This utility must be set up for the component to update its default message bundle if the locale changes.\n *\n * It can be set up in **either** of the following ways:\n *\n * 1. called from `LocalizedComponent`'s `onLocaleChange` method or\n * 2. called from a watcher configured to watch `LocalizedComponent`'s `effectiveLocale` prop\n *\n * @param component\n * @param lang\n */\nasync function updateMessages(component, lang) {\n  component.defaultMessages = await fetchMessages(component, lang);\n  mergeMessages(component);\n}\n/**\n * This utility sets up internals for messages support.\n *\n * It needs to be called in `connectedCallback`\n *\n * **Note**: this must be called after `LocalizedComponent`'s `connectLocalized` method.\n *\n * @param component\n */\nfunction connectMessages(component) {\n  component.onMessagesChange = defaultOnMessagesChange;\n}\n/**\n * This utility tears down internals for messages support.\n *\n * It needs to be called in `disconnectedCallback`\n *\n * @param component\n */\nfunction disconnectMessages(component) {\n  component.onMessagesChange = undefined;\n}\nfunction defaultOnMessagesChange() {\n  mergeMessages(this);\n}\n\nexport { connectMessages as c, disconnectMessages as d, setUpMessages as s, updateMessages as u };\n"],"names":["isActivationKey","key","numberKeys","unnecessaryDecimal","RegExp","trailingZeros","BigDecimal","constructor","input","integers","decimals","numberString","exponentialParts","split","length","number","Number","isSafeInteger","isNegative","charAt","magnitude","decimalParts","substring","shiftDecimalLeft","magnitudeDelta","Math","abs","leftPaddedZeros","repeat","slice","shiftDecimalRight","rightPaddedZeros","expandedNumberString","replace","allLeadingZerosOptionallyNegative","expandExponentialNumberString","concat","this","value","BigInt","padEnd","DECIMALS","ROUNDED","getIntegersAndDecimals","s","toString","padStart","formatToParts","formatter","parts","numberFormatter","unshift","type","minusSign","push","decimal","forEach","char","format","map","join","add","n","fromBigInt","subtract","multiply","_divRound","SHIFT","divide","isValidNumber","isNaN","parseNumberString","string","includes","sanitizeExponentialNumberString","nonExpoNumString","containsDecimal","result","filter","i","match","reduce","part","dividend","divisor","bigint","Object","assign","create","prototype","decimalOnlyAtEndOfString","allHyphensExceptTheStart","isNegativeDecimalOnlyZeros","sanitizeNumberString","sanitizedValue","test","func","firstE","toLowerCase","indexOf","section","defaultLocale","t9nLocales","locales","numberingSystems","isNumberingSystemSupported","numberingSystem","browserNumberingSystem","Intl","NumberFormat","resolvedOptions","defaultNumberingSystem","getSupportedNumberingSystem","getSupportedLocale","locale","context","contextualLocales","_match","language","region","toUpperCase","console","warn","connectedComponents","Set","connectLocalized","component","effectiveLocale","el","lang","closestElementCrossShadowBoundary","document","documentElement","getLocale","updateEffectiveLocale","size","mutationObserver","observe","attributes","attributeFilter","subtree","disconnectLocalized","delete","disconnect","createObserver","records","record","target","containsCrossShadowBoundary","closestLangEl","closestLang","hasAttribute","numberStringFormatter","delocalize","_numberFormatOptions","trim","_minusSign","_group","_decimal","_digits","_getDigitIndex","localize","_actualGroup","group","digits","_numberFormatter","numberFormatOptions","options","keys","JSON","stringify","useGrouping","reverse","index","Map","d","find","get","callback","Observer","ExtendedMutationObserver","window","MutationObserver","super","observedEntry","unobserve","newObservedEntries","observed","takeRecords","IntersectionObserver","ResizeObserver","getObserver","componentLangToMessageBundleCache","throwMessageFetchError","Error","mergeMessages","messages","defaultMessages","messageOverrides","async","setUpMessages","fetchMessages","componentName","tagName","fetch","getAssetPath","then","resp","ok","json","catch","getMessageBundle","updateMessages","connectMessages","onMessagesChange","defaultOnMessagesChange","disconnectMessages","undefined"],"sourceRoot":""}