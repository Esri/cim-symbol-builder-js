{"version":3,"file":"static/js/54993.c2d6ca75.chunk.js","mappings":"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","sources":["../node_modules/@esri/calcite-components/dist/chunks/component.js","../node_modules/@esri/calcite-components/dist/chunks/logger.js","../node_modules/@esri/calcite-components/dist/components/calcite-accordion-item/customElement.js","../node_modules/lit-html/src/directives/keyed.ts","../node_modules/lit-html/src/async-directive.ts","../node_modules/lit-html/src/directives/ref.ts"],"sourcesContent":["/*! All material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\nv3.2.1 */\nimport { l as logger } from \"./logger.js\";\nfunction getIconScale(componentScale) {\n  return componentScale === \"l\" ? \"m\" : \"s\";\n}\nfunction warnIfMissingRequiredProp(component, newProp, deprecatedProp) {\n  if (!component[newProp] && !component[deprecatedProp]) {\n    logger.warn(`[${component.el.localName}] \"${newProp.toString()}\" or \"${deprecatedProp.toString()}\" is required.`);\n  }\n}\nfunction isHidden(el) {\n  return el.hidden || el.itemHidden;\n}\nasync function componentFocusable(component) {\n  await component.componentOnReady();\n  await component.updateComplete;\n}\nexport {\n  componentFocusable as c,\n  getIconScale as g,\n  isHidden as i,\n  warnIfMissingRequiredProp as w\n};\n","/*! All material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\nv3.2.1 */\nimport { l as logLevel } from \"./runtime.js\";\nconst loggedDeprecations = /* @__PURE__ */ new Set();\nconst logLevels = {\n  trace: 0,\n  debug: 1,\n  info: 2,\n  warn: 4,\n  error: 8,\n  off: 10\n};\nfunction willLog(level) {\n  return logLevels[level] >= logLevels[logLevel];\n}\nfunction forwardToConsole(level, ...data) {\n  if (!willLog(level)) {\n    return;\n  }\n  const badgeTemplate = \"%ccalcite\";\n  const badgeStyle = \"background: #007AC2; color: #fff; border-radius: 4px; padding: 2px 4px;\";\n  console[level].call(this, badgeTemplate, badgeStyle, ...data);\n}\nlet listFormatter;\nconst logger = {\n  debug: (message) => forwardToConsole(\"debug\", message),\n  info: (message) => forwardToConsole(\"info\", message),\n  warn: (message) => forwardToConsole(\"warn\", message),\n  error: (message) => forwardToConsole(\"error\", message),\n  trace: (message) => forwardToConsole(\"trace\", message),\n  deprecated\n};\nfunction deprecated(context, { component, name, suggested, removalVersion }) {\n  const key = `${context}:${context === \"component\" ? \"\" : component}${name}`;\n  if (loggedDeprecations.has(key)) {\n    return;\n  }\n  loggedDeprecations.add(key);\n  const multiSuggestions = Array.isArray(suggested);\n  if (multiSuggestions && !listFormatter) {\n    listFormatter = new Intl.ListFormat(\"en\", { style: \"long\", type: \"disjunction\" });\n  }\n  const message = `[${name}] ${context} is deprecated and will be removed in ${removalVersion === \"future\" ? `a future version` : `v${removalVersion}`}.${suggested ? ` Use ${multiSuggestions ? listFormatter.format(suggested.map((suggestion) => `\"${suggestion}\"`)) : `\"${suggested}\"`} instead.` : \"\"}`;\n  forwardToConsole(\"warn\", message);\n}\nexport {\n  logger as l\n};\n","/*! All material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\nv3.2.1 */\nimport { C as CSS_UTILITY, c as customElement } from \"../../chunks/runtime.js\";\nimport { html } from \"lit-html\";\nimport { keyed } from \"lit-html/directives/keyed.js\";\nimport { ref } from \"lit-html/directives/ref.js\";\nimport { LitElement, createEvent, safeClassMap } from \"@arcgis/lumina\";\nimport { l as closestElementCrossShadowBoundary, a as slotChangeHasAssignedElement, g as getElementDir } from \"../../chunks/dom.js\";\nimport { c as componentFocusable, g as getIconScale } from \"../../chunks/component.js\";\nimport { css } from \"@lit/reactive-element/css-tag.js\";\nconst SLOTS = {\n  actionsStart: \"actions-start\",\n  actionsEnd: \"actions-end\"\n};\nconst CSS = {\n  actionsEnd: \"actions-end\",\n  actionsStart: \"actions-start\",\n  content: \"content\",\n  description: \"description\",\n  expandIcon: \"expand-icon\",\n  header: \"header\",\n  headerContainer: \"header-container\",\n  headerContent: \"header-content\",\n  headerText: \"header-text\",\n  heading: \"heading\",\n  icon: \"icon\",\n  iconEnd: \"icon--end\",\n  iconStart: \"icon--start\"\n};\nconst IDS = {\n  section: \"section\",\n  sectionToggle: \"section-toggle\"\n};\nconst styles = css`.icon-position--end,.icon-position--start{--calcite-internal-accordion-item-icon-rotation: -90deg ;--calcite-internal-accordion-item-active-icon-rotation: 0deg;--calcite-internal-accordion-item-icon-rotation-rtl: 90deg;--calcite-internal-accordion-item-active-icon-rotation-rtl: 0deg}:host{position:relative;display:flex;flex-direction:column;text-decoration-line:none;color:var(--calcite-accordion-text-color, var(--calcite-accordion-item-text-color, var(--calcite-color-text-3)));background-color:var(--calcite-accordion-background-color, var(--calcite-accordion-item-background-color));border-width:0}:host .header{background-color:var(--calcite-accordion-item-header-background-color)}:host .header:hover{background-color:var(--calcite-internal-accordion-item-header-background-color-hover)}:host .header:active{background-color:var(--calcite-internal-accordion-item-header-background-color-press)}.header--solid{--calcite-internal-accordion-item-header-background-color-hover: var( --calcite-accordion-item-header-background-color-hover, var(--calcite-color-foreground-2) );--calcite-internal-accordion-item-header-background-color-press: var( --calcite-accordion-item-header-background-color-press, var(--calcite-color-foreground-3) )}.header--transparent{--calcite-internal-accordion-item-header-background-color-hover: var( --calcite-accordion-item-header-background-color-hover, var(--calcite-color-transparent-hover) );--calcite-internal-accordion-item-header-background-color-press: var( --calcite-accordion-item-header-background-color-press, var(--calcite-color-transparent-press) )}.icon-position--start{--calcite-internal-accordion-item-flex-direction: row-reverse;--calcite-internal-accordion-item-icon-spacing-start: 0;--calcite-internal-accordion-item-icon-spacing-end: var(--calcite-internal-accordion-icon-margin)}.icon-position--end{--calcite-internal-accordion-item-flex-direction: row;--calcite-internal-accordion-item-icon-spacing-start: var(--calcite-internal-accordion-icon-margin);--calcite-internal-accordion-item-icon-spacing-end: 0}.icon-position--end:not(.icon-type--plus-minus){--calcite-internal-accordion-item-icon-rotation: 0deg;--calcite-internal-accordion-item-active-icon-rotation: 180deg;--calcite-internal-accordion-item-icon-rotation-rtl: 0deg;--calcite-internal-accordion-item-active-icon-rotation-rtl: -180deg }.content,.header{border-block-end-width:var(--calcite-border-width-sm);border-block-end-style:solid;border-color:var(--calcite-accordion-border-color, var(--calcite-accordion-item-border-color, var(--calcite-color-border-2)))}.header-content{padding:var(--calcite-internal-accordion-item-padding, var(--calcite-internal-accordion-item-spacing-unit, .5rem .75rem))}.content{padding:var(--calcite-accordion-item-content-space, var(--calcite-internal-accordion-item-padding, var(--calcite-internal-accordion-item-spacing-unit, .5rem .75rem)))}.header{display:flex;align-items:stretch}.header-content,.header-container,.header .actions-start,.header .actions-end{display:flex;align-items:center;transition-duration:.15s;transition-timing-function:cubic-bezier(.4,0,.2,1);word-wrap:break-word;word-break:break-word}.header-content{flex-grow:1;cursor:pointer;outline-color:transparent;flex-direction:var(--calcite-internal-accordion-item-flex-direction);color:var(--calcite-accordion-item-heading-text-color, var(--calcite-accordion-text-color, inherit))}.header-content:focus{outline:2px solid var(--calcite-color-focus, var(--calcite-ui-focus-color, var(--calcite-color-brand)));outline-offset:calc(-2px*(1 - (2*clamp(0,var(--calcite-offset-invert-focus),1))))}.header-content:focus,.header-content:hover,.header-content:active{color:var(--calcite-accordion-item-heading-text-color, var(--calcite-accordion-text-color-hover))}.header-content:focus .heading,.header-content:hover .heading,.header-content:active .heading{color:var(--calcite-accordion-item-heading-text-color, var(--calcite-accordion-text-color-press))}.header-container{inline-size:100%}.header-text{margin-block:0px;flex-grow:1;flex-direction:column;padding-block:0px;text-align:initial;margin-inline-end:auto}.heading,.description{display:flex;inline-size:100%}.heading{font-weight:var(--calcite-font-weight-medium)}.actions-start ::slotted(calcite-action),.actions-end ::slotted(calcite-action){align-self:stretch}.icon{display:flex;align-items:center;transition-duration:.15s;transition-timing-function:cubic-bezier(.4,0,.2,1);margin-inline-end:var(--calcite-internal-accordion-item-icon-spacing-start);margin-inline-start:var(--calcite-internal-accordion-item-icon-spacing-end)}.icon--start{color:var(--calcite-accordion-item-icon-color-start, var(--calcite-accordion-item-start-icon-color, var(--calcite-accordion-item-icon-color, currentColor)));margin-inline-end:var(--calcite-internal-accordion-icon-margin)}.icon--end{color:var(--calcite-accordion-item-icon-color-end, var(--calcite-accordion-item-end-icon-color, var(--calcite-accordion-item-icon-color, currentColor)));margin-inline-end:var(--calcite-internal-accordion-icon-margin);margin-inline-start:var(--calcite-internal-accordion-icon-margin)}.expand-icon{color:var(--calcite-accordion-item-expand-icon-color, var(--calcite-accordion-text-color, var(--calcite-accordion-item-text-color, var(--calcite-color-text-3))));margin-inline-start:var(--calcite-internal-accordion-item-icon-spacing-start);margin-inline-end:var(--calcite-internal-accordion-item-icon-spacing-end);transform:rotate(var(--calcite-internal-accordion-item-icon-rotation))}.calcite--rtl .expand-icon{transform:rotate(var(--calcite-internal-accordion-item-icon-rotation-rtl))}.description{margin-block-start:.25rem}.content{display:none;text-align:initial}:host(:not([expanded])) .heading{color:var(--calcite-accordion-item-heading-text-color, var(--calcite-accordion-text-color-hover, var(--calcite-accordion-item-text-color-hover, var(--calcite-color-text-2))))}:host([expanded]){color:var(--calcite-accordion-text-color-press, var(--calcite-accordion-text-color, var(--calcite-accordion-item-text-color, var(--calcite-color-text-1))))}:host([expanded]) .header{border-block-end-color:transparent}:host([expanded]) .expand-icon{color:var(--calcite-accordion-item-expand-icon-color, var(--calcite-accordion-text-color-hover, var(--calcite-accordion-text-color, var(--calcite-accordion-item-text-color, var(--calcite-accordion-item-text-color-hover, var(--calcite-color-text-2))))));transform:rotate(var(--calcite-internal-accordion-item-active-icon-rotation))}:host([expanded]) .calcite--rtl .expand-icon{transform:rotate(var(--calcite-internal-accordion-item-active-icon-rotation-rtl))}:host([expanded]) .description{color:var(--calcite-accordion-text-color-hover, var(--calcite-accordion-text-color, var(--calcite-accordion-item-text-color, var(--calcite-accordion-item-text-color-hover, var(--calcite-color-text-2)))))}:host([expanded]) .content{display:block}@media (forced-colors: active){:host([expanded]) .header{border-block-end:none}:host([expanded]) .heading{font-weight:bolder}.header-content:hover .heading,.header-content:focus .heading{text-decoration:underline}}:host([hidden]){display:none}[hidden]{display:none}`;\nclass AccordionItem extends LitElement {\n  constructor() {\n    super();\n    this.hasActionsEnd = false;\n    this.hasActionsStart = false;\n    this.expanded = false;\n    this.calciteInternalAccordionItemClose = createEvent({ cancelable: false });\n    this.calciteInternalAccordionItemSelect = createEvent({ cancelable: false });\n    this.listen(\"keydown\", this.keyDownHandler);\n    this.listenOn(document.body, \"calciteInternalAccordionChange\", this.updateActiveItemOnChange);\n    this.listenOn(document, \"calciteInternalAccordionItemsSync\", this.accordionItemSyncHandler);\n  }\n  static {\n    this.properties = { hasActionsEnd: [16, {}, { state: true }], hasActionsStart: [16, {}, { state: true }], accordionParent: [0, {}, { attribute: false }], description: 1, expanded: [7, {}, { reflect: true, type: Boolean }], heading: 1, iconEnd: [3, {}, { reflect: true }], iconFlipRtl: [3, {}, { reflect: true }], appearance: 1, iconPosition: 1, iconStart: [3, {}, { reflect: true }], iconType: 1, scale: 1 };\n  }\n  static {\n    this.styles = styles;\n  }\n  async setFocus() {\n    await componentFocusable(this);\n    this.headerEl.focus();\n  }\n  keyDownHandler(event) {\n    if (event.target === this.el) {\n      switch (event.key) {\n        case \" \":\n        case \"Enter\":\n          this.emitRequestedItem();\n          event.preventDefault();\n          break;\n      }\n    }\n  }\n  updateActiveItemOnChange(event) {\n    const [accordion] = event.composedPath();\n    const parent = closestElementCrossShadowBoundary(this.el, \"calcite-accordion\");\n    if (accordion !== parent) {\n      return;\n    }\n    this.determineActiveItem(parent.selectionMode, event.detail.requestedAccordionItem);\n    event.stopPropagation();\n  }\n  accordionItemSyncHandler(event) {\n    const [accordion] = event.composedPath();\n    const accordionItem = this.el;\n    const willBeSyncedByDirectParent = accordionItem.parentElement === accordion;\n    if (willBeSyncedByDirectParent) {\n      return;\n    }\n    const closestAccordionParent = closestElementCrossShadowBoundary(accordionItem, \"calcite-accordion\");\n    if (accordion !== closestAccordionParent) {\n      return;\n    }\n    this.appearance = closestAccordionParent.appearance;\n    this.iconPosition = closestAccordionParent.iconPosition;\n    this.iconType = closestAccordionParent.iconType;\n    this.scale = closestAccordionParent.scale;\n    event.stopPropagation();\n  }\n  handleActionsStartSlotChange(event) {\n    this.hasActionsStart = slotChangeHasAssignedElement(event);\n  }\n  handleActionsEndSlotChange(event) {\n    this.hasActionsEnd = slotChangeHasAssignedElement(event);\n  }\n  storeHeaderEl(el) {\n    this.headerEl = el;\n  }\n  itemHeaderClickHandler() {\n    this.emitRequestedItem();\n  }\n  determineActiveItem(selectionMode, requestedItem) {\n    switch (selectionMode) {\n      case \"multiple\":\n        if (this.el === requestedItem) {\n          this.expanded = !this.expanded;\n        }\n        break;\n      case \"single\":\n        this.expanded = this.el === requestedItem ? !this.expanded : false;\n        break;\n      case \"single-persist\":\n        this.expanded = this.el === requestedItem;\n        break;\n    }\n  }\n  emitRequestedItem() {\n    this.calciteInternalAccordionItemSelect.emit({\n      requestedAccordionItem: this.el\n    });\n  }\n  renderActionsStart() {\n    return html`<div class=${safeClassMap(CSS.actionsStart)} .hidden=${!this.hasActionsStart}><slot name=${SLOTS.actionsStart} @slotchange=${this.handleActionsStartSlotChange}></slot></div>`;\n  }\n  renderActionsEnd() {\n    return html`<div class=${safeClassMap(CSS.actionsEnd)} .hidden=${!this.hasActionsEnd}><slot name=${SLOTS.actionsEnd} @slotchange=${this.handleActionsEndSlotChange}></slot></div>`;\n  }\n  render() {\n    const { iconFlipRtl } = this;\n    const dir = getElementDir(this.el);\n    const iconStartEl = this.iconStart ? keyed(\"icon-start\", html`<calcite-icon class=${safeClassMap({ [CSS.icon]: true, [CSS.iconStart]: true })} .flipRtl=${iconFlipRtl === \"both\" || iconFlipRtl === \"start\"} .icon=${this.iconStart} .scale=${getIconScale(this.scale)}></calcite-icon>`) : null;\n    const iconEndEl = this.iconEnd ? keyed(\"icon-end\", html`<calcite-icon class=${safeClassMap({ [CSS.iconEnd]: true, [CSS.icon]: true })} .flipRtl=${iconFlipRtl === \"both\" || iconFlipRtl === \"end\"} .icon=${this.iconEnd} .scale=${getIconScale(this.scale)}></calcite-icon>`) : null;\n    const { description } = this;\n    return html`<div class=${safeClassMap({\n      [`icon-position--${this.iconPosition}`]: true,\n      [`icon-type--${this.iconType}`]: true\n    })}><div class=${safeClassMap({\n      [CSS.header]: true,\n      [CSS_UTILITY.rtl]: dir === \"rtl\",\n      [`header--${this.appearance}`]: true\n    })}>${this.renderActionsStart()}<div aria-controls=${IDS.section} .ariaExpanded=${this.expanded} class=${safeClassMap(CSS.headerContent)} id=${IDS.sectionToggle} @click=${this.itemHeaderClickHandler} role=button tabindex=0 ${ref(this.storeHeaderEl)}><div class=${safeClassMap(CSS.headerContainer)}>${iconStartEl}<div class=${safeClassMap(CSS.headerText)}><span class=${safeClassMap(CSS.heading)}>${this.heading}</span>${description ? html`<span class=${safeClassMap(CSS.description)}>${description}</span>` : null}</div>${iconEndEl}</div><calcite-icon class=${safeClassMap(CSS.expandIcon)} .icon=${this.iconType === \"chevron\" ? \"chevronDown\" : this.iconType === \"caret\" ? \"caretDown\" : this.expanded ? \"minus\" : \"plus\"} .scale=${getIconScale(this.scale)}></calcite-icon></div>${this.renderActionsEnd()}</div><section aria-labelledby=${IDS.sectionToggle} class=${safeClassMap(CSS.content)} id=${IDS.section}><slot></slot></section></div>`;\n  }\n}\ncustomElement(\"calcite-accordion-item\", AccordionItem);\nexport {\n  AccordionItem\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {nothing} from '../lit-html.js';\nimport {\n  directive,\n  Directive,\n  ChildPart,\n  DirectiveParameters,\n} from '../directive.js';\nimport {setCommittedValue} from '../directive-helpers.js';\n\nclass Keyed extends Directive {\n  key: unknown = nothing;\n\n  render(k: unknown, v: unknown) {\n    this.key = k;\n    return v;\n  }\n\n  override update(part: ChildPart, [k, v]: DirectiveParameters<this>) {\n    if (k !== this.key) {\n      // Clear the part before returning a value. The one-arg form of\n      // setCommittedValue sets the value to a sentinel which forces a\n      // commit the next render.\n      setCommittedValue(part);\n      this.key = k;\n    }\n    return v;\n  }\n}\n\n/**\n * Associates a renderable value with a unique key. When the key changes, the\n * previous DOM is removed and disposed before rendering the next value, even\n * if the value - such as a template - is the same.\n *\n * This is useful for forcing re-renders of stateful components, or working\n * with code that expects new data to generate new HTML elements, such as some\n * animation techniques.\n */\nexport const keyed = directive(Keyed);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {Keyed};\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * Overview:\n *\n * This module is designed to add support for an async `setValue` API and\n * `disconnected` callback to directives with the least impact on the core\n * runtime or payload when that feature is not used.\n *\n * The strategy is to introduce a `AsyncDirective` subclass of\n * `Directive` that climbs the \"parent\" tree in its constructor to note which\n * branches of lit-html's \"logical tree\" of data structures contain such\n * directives and thus need to be crawled when a subtree is being cleared (or\n * manually disconnected) in order to run the `disconnected` callback.\n *\n * The \"nodes\" of the logical tree include Parts, TemplateInstances (for when a\n * TemplateResult is committed to a value of a ChildPart), and Directives; these\n * all implement a common interface called `DisconnectableChild`. Each has a\n * `_$parent` reference which is set during construction in the core code, and a\n * `_$disconnectableChildren` field which is initially undefined.\n *\n * The sparse tree created by means of the `AsyncDirective` constructor\n * crawling up the `_$parent` tree and placing a `_$disconnectableChildren` Set\n * on each parent that includes each child that contains a\n * `AsyncDirective` directly or transitively via its children. In order to\n * notify connection state changes and disconnect (or reconnect) a tree, the\n * `_$notifyConnectionChanged` API is patched onto ChildParts as a directive\n * climbs the parent tree, which is called by the core when clearing a part if\n * it exists. When called, that method iterates over the sparse tree of\n * Set<DisconnectableChildren> built up by AsyncDirectives, and calls\n * `_$notifyDirectiveConnectionChanged` on any directives that are encountered\n * in that tree, running the required callbacks.\n *\n * A given \"logical tree\" of lit-html data-structures might look like this:\n *\n *  ChildPart(N1) _$dC=[D2,T3]\n *   ._directive\n *     AsyncDirective(D2)\n *   ._value // user value was TemplateResult\n *     TemplateInstance(T3) _$dC=[A4,A6,N10,N12]\n *      ._$parts[]\n *        AttributePart(A4) _$dC=[D5]\n *         ._directives[]\n *           AsyncDirective(D5)\n *        AttributePart(A6) _$dC=[D7,D8]\n *         ._directives[]\n *           AsyncDirective(D7)\n *           Directive(D8) _$dC=[D9]\n *            ._directive\n *              AsyncDirective(D9)\n *        ChildPart(N10) _$dC=[D11]\n *         ._directive\n *           AsyncDirective(D11)\n *         ._value\n *           string\n *        ChildPart(N12) _$dC=[D13,N14,N16]\n *         ._directive\n *           AsyncDirective(D13)\n *         ._value // user value was iterable\n *           Array<ChildPart>\n *             ChildPart(N14) _$dC=[D15]\n *              ._value\n *                string\n *             ChildPart(N16) _$dC=[D17,T18]\n *              ._directive\n *                AsyncDirective(D17)\n *              ._value // user value was TemplateResult\n *                TemplateInstance(T18) _$dC=[A19,A21,N25]\n *                 ._$parts[]\n *                   AttributePart(A19) _$dC=[D20]\n *                    ._directives[]\n *                      AsyncDirective(D20)\n *                   AttributePart(A21) _$dC=[22,23]\n *                    ._directives[]\n *                      AsyncDirective(D22)\n *                      Directive(D23) _$dC=[D24]\n *                       ._directive\n *                         AsyncDirective(D24)\n *                   ChildPart(N25) _$dC=[D26]\n *                    ._directive\n *                      AsyncDirective(D26)\n *                    ._value\n *                      string\n *\n * Example 1: The directive in ChildPart(N12) updates and returns `nothing`. The\n * ChildPart will _clear() itself, and so we need to disconnect the \"value\" of\n * the ChildPart (but not its directive). In this case, when `_clear()` calls\n * `_$notifyConnectionChanged()`, we don't iterate all of the\n * _$disconnectableChildren, rather we do a value-specific disconnection: i.e.\n * since the _value was an Array<ChildPart> (because an iterable had been\n * committed), we iterate the array of ChildParts (N14, N16) and run\n * `setConnected` on them (which does recurse down the full tree of\n * `_$disconnectableChildren` below it, and also removes N14 and N16 from N12's\n * `_$disconnectableChildren`). Once the values have been disconnected, we then\n * check whether the ChildPart(N12)'s list of `_$disconnectableChildren` is empty\n * (and would remove it from its parent TemplateInstance(T3) if so), but since\n * it would still contain its directive D13, it stays in the disconnectable\n * tree.\n *\n * Example 2: In the course of Example 1, `setConnected` will reach\n * ChildPart(N16); in this case the entire part is being disconnected, so we\n * simply iterate all of N16's `_$disconnectableChildren` (D17,T18) and\n * recursively run `setConnected` on them. Note that we only remove children\n * from `_$disconnectableChildren` for the top-level values being disconnected\n * on a clear; doing this bookkeeping lower in the tree is wasteful since it's\n * all being thrown away.\n *\n * Example 3: If the LitElement containing the entire tree above becomes\n * disconnected, it will run `childPart.setConnected()` (which calls\n * `childPart._$notifyConnectionChanged()` if it exists); in this case, we\n * recursively run `setConnected()` over the entire tree, without removing any\n * children from `_$disconnectableChildren`, since this tree is required to\n * re-connect the tree, which does the same operation, simply passing\n * `isConnected: true` down the tree, signaling which callback to run.\n */\n\nimport {AttributePart, ChildPart, Disconnectable, Part} from './lit-html.js';\nimport {isSingleExpression} from './directive-helpers.js';\nimport {Directive, PartInfo, PartType} from './directive.js';\nexport * from './directive.js';\n\nconst DEV_MODE = true;\n\n/**\n * Recursively walks down the tree of Parts/TemplateInstances/Directives to set\n * the connected state of directives and run `disconnected`/ `reconnected`\n * callbacks.\n *\n * @return True if there were children to disconnect; false otherwise\n */\nconst notifyChildrenConnectedChanged = (\n  parent: Disconnectable,\n  isConnected: boolean\n): boolean => {\n  const children = parent._$disconnectableChildren;\n  if (children === undefined) {\n    return false;\n  }\n  for (const obj of children) {\n    // The existence of `_$notifyDirectiveConnectionChanged` is used as a \"brand\" to\n    // disambiguate AsyncDirectives from other DisconnectableChildren\n    // (as opposed to using an instanceof check to know when to call it); the\n    // redundancy of \"Directive\" in the API name is to avoid conflicting with\n    // `_$notifyConnectionChanged`, which exists `ChildParts` which are also in\n    // this list\n    // Disconnect Directive (and any nested directives contained within)\n    // This property needs to remain unminified.\n    (obj as AsyncDirective)['_$notifyDirectiveConnectionChanged']?.(\n      isConnected,\n      false\n    );\n    // Disconnect Part/TemplateInstance\n    notifyChildrenConnectedChanged(obj, isConnected);\n  }\n  return true;\n};\n\n/**\n * Removes the given child from its parent list of disconnectable children, and\n * if the parent list becomes empty as a result, removes the parent from its\n * parent, and so forth up the tree when that causes subsequent parent lists to\n * become empty.\n */\nconst removeDisconnectableFromParent = (obj: Disconnectable) => {\n  let parent, children;\n  do {\n    if ((parent = obj._$parent) === undefined) {\n      break;\n    }\n    children = parent._$disconnectableChildren!;\n    children.delete(obj);\n    obj = parent;\n  } while (children?.size === 0);\n};\n\nconst addDisconnectableToParent = (obj: Disconnectable) => {\n  // Climb the parent tree, creating a sparse tree of children needing\n  // disconnection\n  for (let parent; (parent = obj._$parent); obj = parent) {\n    let children = parent._$disconnectableChildren;\n    if (children === undefined) {\n      parent._$disconnectableChildren = children = new Set();\n    } else if (children.has(obj)) {\n      // Once we've reached a parent that already contains this child, we\n      // can short-circuit\n      break;\n    }\n    children.add(obj);\n    installDisconnectAPI(parent);\n  }\n};\n\n/**\n * Changes the parent reference of the ChildPart, and updates the sparse tree of\n * Disconnectable children accordingly.\n *\n * Note, this method will be patched onto ChildPart instances and called from\n * the core code when parts are moved between different parents.\n */\nfunction reparentDisconnectables(this: ChildPart, newParent: Disconnectable) {\n  if (this._$disconnectableChildren !== undefined) {\n    removeDisconnectableFromParent(this);\n    this._$parent = newParent;\n    addDisconnectableToParent(this);\n  } else {\n    this._$parent = newParent;\n  }\n}\n\n/**\n * Sets the connected state on any directives contained within the committed\n * value of this part (i.e. within a TemplateInstance or iterable of\n * ChildParts) and runs their `disconnected`/`reconnected`s, as well as within\n * any directives stored on the ChildPart (when `valueOnly` is false).\n *\n * `isClearingValue` should be passed as `true` on a top-level part that is\n * clearing itself, and not as a result of recursively disconnecting directives\n * as part of a `clear` operation higher up the tree. This both ensures that any\n * directive on this ChildPart that produced a value that caused the clear\n * operation is not disconnected, and also serves as a performance optimization\n * to avoid needless bookkeeping when a subtree is going away; when clearing a\n * subtree, only the top-most part need to remove itself from the parent.\n *\n * `fromPartIndex` is passed only in the case of a partial `_clear` running as a\n * result of truncating an iterable.\n *\n * Note, this method will be patched onto ChildPart instances and called from the\n * core code when parts are cleared or the connection state is changed by the\n * user.\n */\nfunction notifyChildPartConnectedChanged(\n  this: ChildPart,\n  isConnected: boolean,\n  isClearingValue = false,\n  fromPartIndex = 0\n) {\n  const value = this._$committedValue;\n  const children = this._$disconnectableChildren;\n  if (children === undefined || children.size === 0) {\n    return;\n  }\n  if (isClearingValue) {\n    if (Array.isArray(value)) {\n      // Iterable case: Any ChildParts created by the iterable should be\n      // disconnected and removed from this ChildPart's disconnectable\n      // children (starting at `fromPartIndex` in the case of truncation)\n      for (let i = fromPartIndex; i < value.length; i++) {\n        notifyChildrenConnectedChanged(value[i], false);\n        removeDisconnectableFromParent(value[i]);\n      }\n    } else if (value != null) {\n      // TemplateInstance case: If the value has disconnectable children (will\n      // only be in the case that it is a TemplateInstance), we disconnect it\n      // and remove it from this ChildPart's disconnectable children\n      notifyChildrenConnectedChanged(value as Disconnectable, false);\n      removeDisconnectableFromParent(value as Disconnectable);\n    }\n  } else {\n    notifyChildrenConnectedChanged(this, isConnected);\n  }\n}\n\n/**\n * Patches disconnection API onto ChildParts.\n */\nconst installDisconnectAPI = (obj: Disconnectable) => {\n  if ((obj as ChildPart).type == PartType.CHILD) {\n    (obj as ChildPart)._$notifyConnectionChanged ??=\n      notifyChildPartConnectedChanged;\n    (obj as ChildPart)._$reparentDisconnectables ??= reparentDisconnectables;\n  }\n};\n\n/**\n * An abstract `Directive` base class whose `disconnected` method will be\n * called when the part containing the directive is cleared as a result of\n * re-rendering, or when the user calls `part.setConnected(false)` on\n * a part that was previously rendered containing the directive (as happens\n * when e.g. a LitElement disconnects from the DOM).\n *\n * If `part.setConnected(true)` is subsequently called on a\n * containing part, the directive's `reconnected` method will be called prior\n * to its next `update`/`render` callbacks. When implementing `disconnected`,\n * `reconnected` should also be implemented to be compatible with reconnection.\n *\n * Note that updates may occur while the directive is disconnected. As such,\n * directives should generally check the `this.isConnected` flag during\n * render/update to determine whether it is safe to subscribe to resources\n * that may prevent garbage collection.\n */\nexport abstract class AsyncDirective extends Directive {\n  // As opposed to other Disconnectables, AsyncDirectives always get notified\n  // when the RootPart connection changes, so the public `isConnected`\n  // is a locally stored variable initialized via its part's getter and synced\n  // via `_$notifyDirectiveConnectionChanged`. This is cheaper than using\n  // the _$isConnected getter, which has to look back up the tree each time.\n  /**\n   * The connection state for this Directive.\n   */\n  isConnected!: boolean;\n\n  // @internal\n  override _$disconnectableChildren?: Set<Disconnectable> = undefined;\n  /**\n   * Initialize the part with internal fields\n   * @param part\n   * @param parent\n   * @param attributeIndex\n   */\n  override _$initialize(\n    part: Part,\n    parent: Disconnectable,\n    attributeIndex: number | undefined\n  ) {\n    super._$initialize(part, parent, attributeIndex);\n    addDisconnectableToParent(this);\n    this.isConnected = part._$isConnected;\n  }\n  // This property needs to remain unminified.\n  /**\n   * Called from the core code when a directive is going away from a part (in\n   * which case `shouldRemoveFromParent` should be true), and from the\n   * `setChildrenConnected` helper function when recursively changing the\n   * connection state of a tree (in which case `shouldRemoveFromParent` should\n   * be false).\n   *\n   * @param isConnected\n   * @param isClearingDirective - True when the directive itself is being\n   *     removed; false when the tree is being disconnected\n   * @internal\n   */\n  override ['_$notifyDirectiveConnectionChanged'](\n    isConnected: boolean,\n    isClearingDirective = true\n  ) {\n    if (isConnected !== this.isConnected) {\n      this.isConnected = isConnected;\n      if (isConnected) {\n        this.reconnected?.();\n      } else {\n        this.disconnected?.();\n      }\n    }\n    if (isClearingDirective) {\n      notifyChildrenConnectedChanged(this, isConnected);\n      removeDisconnectableFromParent(this);\n    }\n  }\n\n  /**\n   * Sets the value of the directive's Part outside the normal `update`/`render`\n   * lifecycle of a directive.\n   *\n   * This method should not be called synchronously from a directive's `update`\n   * or `render`.\n   *\n   * @param directive The directive to update\n   * @param value The value to set\n   */\n  setValue(value: unknown) {\n    if (isSingleExpression(this.__part as unknown as PartInfo)) {\n      this.__part._$setValue(value, this);\n    } else {\n      // this.__attributeIndex will be defined in this case, but\n      // assert it in dev mode\n      if (DEV_MODE && this.__attributeIndex === undefined) {\n        throw new Error(`Expected this.__attributeIndex to be a number`);\n      }\n      const newValues = [...(this.__part._$committedValue as Array<unknown>)];\n      newValues[this.__attributeIndex!] = value;\n      (this.__part as AttributePart)._$setValue(newValues, this, 0);\n    }\n  }\n\n  /**\n   * User callbacks for implementing logic to release any resources/subscriptions\n   * that may have been retained by this directive. Since directives may also be\n   * re-connected, `reconnected` should also be implemented to restore the\n   * working state of the directive prior to the next render.\n   */\n  protected disconnected() {}\n  protected reconnected() {}\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport {nothing, ElementPart} from '../lit-html.js';\nimport {directive, AsyncDirective} from '../async-directive.js';\n\n/**\n * Creates a new Ref object, which is container for a reference to an element.\n */\nexport const createRef = <T = Element>() => new Ref<T>();\n\n/**\n * An object that holds a ref value.\n */\nclass Ref<T = Element> {\n  /**\n   * The current Element value of the ref, or else `undefined` if the ref is no\n   * longer rendered.\n   */\n  readonly value?: T;\n}\n\nexport type {Ref};\n\ninterface RefInternal {\n  value: Element | undefined;\n}\n\n// When callbacks are used for refs, this map tracks the last value the callback\n// was called with, for ensuring a directive doesn't clear the ref if the ref\n// has already been rendered to a new spot. It is double-keyed on both the\n// context (`options.host`) and the callback, since we auto-bind class methods\n// to `options.host`.\nconst lastElementForContextAndCallback = new WeakMap<\n  object,\n  WeakMap<Function, Element | undefined>\n>();\n\nexport type RefOrCallback<T = Element> = Ref<T> | ((el: T | undefined) => void);\n\nclass RefDirective extends AsyncDirective {\n  private _element?: Element;\n  private _ref?: RefOrCallback;\n  private _context?: object;\n\n  render(_ref?: RefOrCallback) {\n    return nothing;\n  }\n\n  override update(part: ElementPart, [ref]: Parameters<this['render']>) {\n    const refChanged = ref !== this._ref;\n    if (refChanged && this._ref !== undefined) {\n      // The ref passed to the directive has changed;\n      // unset the previous ref's value\n      this._updateRefValue(undefined);\n    }\n    if (refChanged || this._lastElementForRef !== this._element) {\n      // We either got a new ref or this is the first render;\n      // store the ref/element & update the ref value\n      this._ref = ref;\n      this._context = part.options?.host;\n      this._updateRefValue((this._element = part.element));\n    }\n    return nothing;\n  }\n\n  private _updateRefValue(element: Element | undefined) {\n    if (!this.isConnected) {\n      element = undefined;\n    }\n    if (typeof this._ref === 'function') {\n      // If the current ref was called with a previous value, call with\n      // `undefined`; We do this to ensure callbacks are called in a consistent\n      // way regardless of whether a ref might be moving up in the tree (in\n      // which case it would otherwise be called with the new value before the\n      // previous one unsets it) and down in the tree (where it would be unset\n      // before being set). Note that element lookup is keyed by\n      // both the context and the callback, since we allow passing unbound\n      // functions that are called on options.host, and we want to treat\n      // these as unique \"instances\" of a function.\n      const context = this._context ?? globalThis;\n      let lastElementForCallback =\n        lastElementForContextAndCallback.get(context);\n      if (lastElementForCallback === undefined) {\n        lastElementForCallback = new WeakMap();\n        lastElementForContextAndCallback.set(context, lastElementForCallback);\n      }\n      if (lastElementForCallback.get(this._ref) !== undefined) {\n        this._ref.call(this._context, undefined);\n      }\n      lastElementForCallback.set(this._ref, element);\n      // Call the ref with the new element value\n      if (element !== undefined) {\n        this._ref.call(this._context, element);\n      }\n    } else {\n      (this._ref as RefInternal)!.value = element;\n    }\n  }\n\n  private get _lastElementForRef() {\n    return typeof this._ref === 'function'\n      ? lastElementForContextAndCallback\n          .get(this._context ?? globalThis)\n          ?.get(this._ref)\n      : this._ref?.value;\n  }\n\n  override disconnected() {\n    // Only clear the box if our element is still the one in it (i.e. another\n    // directive instance hasn't rendered its element to it before us); that\n    // only happens in the event of the directive being cleared (not via manual\n    // disconnection)\n    if (this._lastElementForRef === this._element) {\n      this._updateRefValue(undefined);\n    }\n  }\n\n  override reconnected() {\n    // If we were manually disconnected, we can safely put our element back in\n    // the box, since no rendering could have occurred to change its state\n    this._updateRefValue(this._element);\n  }\n}\n\n/**\n * Sets the value of a Ref object or calls a ref callback with the element it's\n * bound to.\n *\n * A Ref object acts as a container for a reference to an element. A ref\n * callback is a function that takes an element as its only argument.\n *\n * The ref directive sets the value of the Ref object or calls the ref callback\n * during rendering, if the referenced element changed.\n *\n * Note: If a ref callback is rendered to a different element position or is\n * removed in a subsequent render, it will first be called with `undefined`,\n * followed by another call with the new element it was rendered to (if any).\n *\n * ```js\n * // Using Ref object\n * const inputRef = createRef();\n * render(html`<input ${ref(inputRef)}>`, container);\n * inputRef.value.focus();\n *\n * // Using callback\n * const callback = (inputElement) => inputElement.focus();\n * render(html`<input ${ref(callback)}>`, container);\n * ```\n */\nexport const ref = directive(RefDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {RefDirective};\n"],"names":["getIconScale","componentScale","warnIfMissingRequiredProp","component","newProp","deprecatedProp","logger","warn","el","localName","toString","isHidden","hidden","itemHidden","async","componentFocusable","componentOnReady","updateComplete","loggedDeprecations","Set","logLevels","trace","debug","info","error","off","forwardToConsole","level","data","logLevel","willLog","console","call","this","listFormatter","message","deprecated","context","name","suggested","removalVersion","key","has","add","multiSuggestions","Array","isArray","Intl","ListFormat","style","type","format","map","suggestion","SLOTS","CSS","IDS","styles","css","AccordionItem","LitElement","constructor","super","hasActionsEnd","hasActionsStart","expanded","calciteInternalAccordionItemClose","createEvent","cancelable","calciteInternalAccordionItemSelect","listen","keyDownHandler","listenOn","document","body","updateActiveItemOnChange","accordionItemSyncHandler","properties","state","accordionParent","attribute","description","reflect","Boolean","heading","iconEnd","iconFlipRtl","appearance","iconPosition","iconStart","iconType","scale","setFocus","headerEl","focus","event","target","emitRequestedItem","preventDefault","accordion","composedPath","parent","closestElementCrossShadowBoundary","determineActiveItem","selectionMode","detail","requestedAccordionItem","stopPropagation","accordionItem","parentElement","closestAccordionParent","handleActionsStartSlotChange","slotChangeHasAssignedElement","handleActionsEndSlotChange","storeHeaderEl","itemHeaderClickHandler","requestedItem","emit","renderActionsStart","html","safeClassMap","renderActionsEnd","render","dir","getElementDir","iconStartEl","keyed","iconEndEl","CSS_UTILITY","rtl","ref","customElement","i","t","e","arguments","r","update","s","notifyChildrenConnectedChanged","_$AN","_$AO","o","_$AM","delete","size","c","h","n","_$AH","length","CHILD","_$AP","_$AQ","f","_$AT","isConnected","_$AU","reconnected","disconnected","setValue","_$Ct","_$AI","_$Ci","createRef","WeakMap","G","rt","lt","ct","ht","options","host","element","globalThis","get","set","value"],"sourceRoot":""}