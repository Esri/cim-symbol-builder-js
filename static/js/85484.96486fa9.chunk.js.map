{"version":3,"file":"static/js/85484.96486fa9.chunk.js","mappings":";sNAcA,MAAMA,EACG,QADHA,EAEK,UAELC,EACD,GADCA,EAGD,IAKCC,EAAQ,MACZC,YAAYC,IACVC,EAAAA,EAAAA,GAAiBC,KAAMF,GACvBE,KAAKC,gBAAiBC,EAAAA,EAAAA,GAAe,UAAU,IAAMF,KAAKG,iBAM1DH,KAAKI,wBAA2BC,IAC9BL,KAAKM,YAAaC,EAAAA,EAAAA,GAAqBF,IAEzCL,KAAKQ,cAAiBC,IACpBT,KAAKU,SAAWD,EAChBT,KAAKG,gBAEPH,KAAKW,SAAU,EACfX,KAAKY,cAAWC,EAChBb,KAAKc,sBAAmBD,EACxBb,KAAKe,iBAAcF,EACnBb,KAAKgB,qBAAkBH,EACvBb,KAAKiB,gBAAkB,GACvBjB,KAAKM,YAAa,EAEpBY,oBAGAC,yBACEC,EAAAA,EAAAA,GAAepB,KAAMA,KAAKiB,iBAO5BI,qBACEC,EAAAA,EAAAA,GAAiBtB,OACjBuB,EAAAA,EAAAA,GAAgBvB,MAChBA,KAAKC,gBAAgBuB,QAAQxB,KAAKS,IAEb,gCACfgB,EAAAA,EAAAA,GAAczB,MAEtB0B,wBACEC,EAAAA,EAAAA,GAAoB3B,OACpB4B,EAAAA,EAAAA,GAAmB5B,MACnBA,KAAKC,gBAAgB4B,aAOvBC,SACE,MAAM,WAAExB,EAAF,QAAcK,EAAd,SAAuBC,GAAaZ,KAC1C,OAAQ+B,EAAAA,EAAAA,GAAE,MAAO,CAAEC,MAAOtC,GAAaiB,GAAWoB,EAAAA,EAAAA,GAAE,iBAAkB,CAAEE,MAAOrB,EAASD,QAASuB,IAAKlC,KAAKQ,cAAe2B,MAAOnC,KAAKe,cAAkB,MAAMgB,EAAAA,EAAAA,GAAE,MAAO,CAAEC,MAAOtC,EAAa0C,QAAS9B,IAAcyB,EAAAA,EAAAA,GAAE,OAAQ,CAAEM,aAAcrC,KAAKI,4BAErPkC,SAASC,GACP,OAAIA,EAAO5C,EACF,IAEA4C,GAAQ5C,EACR,IAGA,IAGXQ,eACE,MAAM,SAAEO,EAAF,GAAYD,GAAOT,KACpBU,IAGLV,KAAKe,YAAcf,KAAKsC,SAASE,KAAKC,IAAIhC,EAAGiC,aAAcjC,EAAGkC,cAAgB,IAErEC,wBAAe,MAAO,CAAC,UAC9BnC,SAAO,OAAOoC,EAAAA,EAAAA,GAAW7C,MAClB8C,sBAAa,MAAO,CAC7B,iBAAoB,CAAC,oBACrB,gBAAmB,CAAC,4BAGxBlD,EAAMmD,MApFW,iuBChBjB,MAAMC,EAAoC,GAgB1C,SAASC,IACP,MAAM,IAAIC,MAAM,4CAElB,SAASC,EAAcC,GACrBA,EAAUxC,SAAW,IAChBwC,EAAUpC,mBACVoC,EAAUtC,kBAQjBuC,eAAe5B,EAAc2B,GAC3BA,EAAUpC,sBAAwBsC,EAAcF,EAAWA,EAAUnC,iBACrEkC,EAAcC,GAEhBC,eAAeC,EAAcF,EAAWG,GACtC,MAAM,GAAE9C,GAAO2C,EAETI,EADM/C,EAAGgD,QAAQC,cACGC,QAAQ,WAAY,IAC9C,OArCFN,eAAgCE,EAAMH,GACpC,MAAMQ,EAAO,GAAER,KAAaG,IAC5B,OAAIP,EAAkCY,KAGtCZ,EAAkCY,GAAOC,OAAMC,EAAAA,EAAAA,GAAc,YAAWV,kBAA0BG,WAC/FQ,MAAMC,IACFA,EAAKC,IACRhB,IAEKe,EAAKE,UAEXC,OAAM,IAAMlB,OATND,EAAkCY,GAkCpCQ,EAAiBC,EAAAA,EAAAA,GAAmBd,EAAM,OAAQC,GAa3DH,eAAejC,EAAegC,EAAWG,GACvCH,EAAUpC,sBAAwBsC,EAAcF,EAAWG,GAC3DJ,EAAcC,GAWhB,SAAS7B,EAAgB6B,GACvBA,EAAUlC,iBAAmBoD,EAS/B,SAAS1C,EAAmBwB,GAC1BA,EAAUlC,sBAAmBL,EAE/B,SAASyD,IACPnB,EAAcnD","sources":["../node_modules/@esri/calcite-components/dist/esm/calcite-scrim.entry.js","../node_modules/@esri/calcite-components/dist/esm/t9n-c5cd39db.js"],"sourcesContent":["/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.\n * v1.9.2\n */\nimport { r as registerInstance, h, a as getElement } from './index-57f4809d.js';\nimport { c as connectLocalized, d as disconnectLocalized } from './locale-bad69fe5.js';\nimport { u as updateMessages, c as connectMessages, s as setUpMessages, d as disconnectMessages } from './t9n-c5cd39db.js';\nimport { c as createObserver } from './observers-72fa7eae.js';\nimport { x as slotChangeHasContent } from './dom-158133b6.js';\nimport './key-cc1e5093.js';\nimport './guid-a5b8c53d.js';\nimport './resources-19304982.js';\n\nconst CSS = {\n  scrim: \"scrim\",\n  content: \"content\",\n};\nconst BREAKPOINTS = {\n  s: 72,\n  // medium is assumed default.\n  l: 480, // Greater than or equal to 480px.\n};\n\nconst scrimCss = \":host{position:absolute;inset:0px;z-index:var(--calcite-app-z-index-overlay);display:flex;block-size:100%;inline-size:100%;flex-direction:column;align-items:stretch}@keyframes calcite-scrim-fade-in{0%{--tw-bg-opacity:0}100%{--tw-text-opacity:1}}.scrim{position:absolute;inset:0px;display:flex;flex-direction:column;align-content:center;align-items:center;justify-content:center;overflow:hidden;animation:calcite-scrim-fade-in var(--calcite-internal-animation-timing-medium) ease-in-out;background-color:var(--calcite-scrim-background, var(--calcite-scrim-background-internal))}.content{padding:1rem}:host([hidden]){display:none}[hidden]{display:none}\";\n\nconst Scrim = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.resizeObserver = createObserver(\"resize\", () => this.handleResize());\n    // --------------------------------------------------------------------------\n    //\n    //  Private Methods\n    //\n    // --------------------------------------------------------------------------\n    this.handleDefaultSlotChange = (event) => {\n      this.hasContent = slotChangeHasContent(event);\n    };\n    this.storeLoaderEl = (el) => {\n      this.loaderEl = el;\n      this.handleResize();\n    };\n    this.loading = false;\n    this.messages = undefined;\n    this.messageOverrides = undefined;\n    this.loaderScale = undefined;\n    this.defaultMessages = undefined;\n    this.effectiveLocale = \"\";\n    this.hasContent = false;\n  }\n  onMessagesChange() {\n    /* wired up by t9n util */\n  }\n  effectiveLocaleChange() {\n    updateMessages(this, this.effectiveLocale);\n  }\n  //--------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  //--------------------------------------------------------------------------\n  connectedCallback() {\n    connectLocalized(this);\n    connectMessages(this);\n    this.resizeObserver?.observe(this.el);\n  }\n  async componentWillLoad() {\n    await setUpMessages(this);\n  }\n  disconnectedCallback() {\n    disconnectLocalized(this);\n    disconnectMessages(this);\n    this.resizeObserver?.disconnect();\n  }\n  // --------------------------------------------------------------------------\n  //\n  //  Render Method\n  //\n  // --------------------------------------------------------------------------\n  render() {\n    const { hasContent, loading, messages } = this;\n    return (h(\"div\", { class: CSS.scrim }, loading ? (h(\"calcite-loader\", { label: messages.loading, ref: this.storeLoaderEl, scale: this.loaderScale })) : null, h(\"div\", { class: CSS.content, hidden: !hasContent }, h(\"slot\", { onSlotchange: this.handleDefaultSlotChange }))));\n  }\n  getScale(size) {\n    if (size < BREAKPOINTS.s) {\n      return \"s\";\n    }\n    else if (size >= BREAKPOINTS.l) {\n      return \"l\";\n    }\n    else {\n      return \"m\";\n    }\n  }\n  handleResize() {\n    const { loaderEl, el } = this;\n    if (!loaderEl) {\n      return;\n    }\n    this.loaderScale = this.getScale(Math.min(el.clientHeight, el.clientWidth) ?? 0);\n  }\n  static get assetsDirs() { return [\"assets\"]; }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"messageOverrides\": [\"onMessagesChange\"],\n    \"effectiveLocale\": [\"effectiveLocaleChange\"]\n  }; }\n};\nScrim.style = scrimCss;\n\nexport { Scrim as calcite_scrim };\n","/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.\n * v1.9.2\n */\nimport { g as getAssetPath } from './index-57f4809d.js';\nimport { g as getSupportedLocale } from './locale-bad69fe5.js';\n\nconst componentLangToMessageBundleCache = {};\nasync function getMessageBundle(lang, component) {\n  const key = `${component}_${lang}`;\n  if (componentLangToMessageBundleCache[key]) {\n    return componentLangToMessageBundleCache[key];\n  }\n  componentLangToMessageBundleCache[key] = fetch(getAssetPath(`./assets/${component}/t9n/messages_${lang}.json`))\n    .then((resp) => {\n    if (!resp.ok) {\n      throwMessageFetchError();\n    }\n    return resp.json();\n  })\n    .catch(() => throwMessageFetchError());\n  return componentLangToMessageBundleCache[key];\n}\nfunction throwMessageFetchError() {\n  throw new Error(\"could not fetch component message bundle\");\n}\nfunction mergeMessages(component) {\n  component.messages = {\n    ...component.defaultMessages,\n    ...component.messageOverrides,\n  };\n}\n/**\n * This utility sets up the messages used by the component. It should be awaited in the `componentWillLoad` lifecycle hook.\n *\n * @param component\n */\nasync function setUpMessages(component) {\n  component.defaultMessages = await fetchMessages(component, component.effectiveLocale);\n  mergeMessages(component);\n}\nasync function fetchMessages(component, lang) {\n  const { el } = component;\n  const tag = el.tagName.toLowerCase();\n  const componentName = tag.replace(\"calcite-\", \"\");\n  return getMessageBundle(getSupportedLocale(lang, \"t9n\"), componentName);\n}\n/**\n * This utility must be set up for the component to update its default message bundle if the locale changes.\n *\n * It can be set up in **either** of the following ways:\n *\n * 1. called from `LocalizedComponent`'s `onLocaleChange` method or\n * 2. called from a watcher configured to watch `LocalizedComponent`'s `effectiveLocale` prop\n *\n * @param component\n * @param lang\n */\nasync function updateMessages(component, lang) {\n  component.defaultMessages = await fetchMessages(component, lang);\n  mergeMessages(component);\n}\n/**\n * This utility sets up internals for messages support.\n *\n * It needs to be called in `connectedCallback`\n *\n * **Note**: this must be called after `LocalizedComponent`'s `connectLocalized` method.\n *\n * @param component\n */\nfunction connectMessages(component) {\n  component.onMessagesChange = defaultOnMessagesChange;\n}\n/**\n * This utility tears down internals for messages support.\n *\n * It needs to be called in `disconnectedCallback`\n *\n * @param component\n */\nfunction disconnectMessages(component) {\n  component.onMessagesChange = undefined;\n}\nfunction defaultOnMessagesChange() {\n  mergeMessages(this);\n}\n\nexport { connectMessages as c, disconnectMessages as d, setUpMessages as s, updateMessages as u };\n"],"names":["CSS","BREAKPOINTS","Scrim","constructor","hostRef","registerInstance","this","resizeObserver","createObserver","handleResize","handleDefaultSlotChange","event","hasContent","slotChangeHasContent","storeLoaderEl","el","loaderEl","loading","messages","undefined","messageOverrides","loaderScale","defaultMessages","effectiveLocale","onMessagesChange","effectiveLocaleChange","updateMessages","connectedCallback","connectLocalized","connectMessages","observe","setUpMessages","disconnectedCallback","disconnectLocalized","disconnectMessages","disconnect","render","h","class","label","ref","scale","hidden","onSlotchange","getScale","size","Math","min","clientHeight","clientWidth","assetsDirs","getElement","watchers","style","componentLangToMessageBundleCache","throwMessageFetchError","Error","mergeMessages","component","async","fetchMessages","lang","componentName","tagName","toLowerCase","replace","key","fetch","getAssetPath","then","resp","ok","json","catch","getMessageBundle","getSupportedLocale","defaultOnMessagesChange"],"sourceRoot":""}