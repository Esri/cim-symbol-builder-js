{"version":3,"file":"static/js/2273.9dfaba50.chunk.js","mappings":"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","sources":["../node_modules/@esri/calcite-components/dist/esm/src/components/value-list/resources.ts","../node_modules/@esri/calcite-components/dist/esm/src/components/value-list/utils.ts","../node_modules/@esri/calcite-components/dist/esm/src/components/value-list/value-list.tsx","../node_modules/@esri/calcite-components/dist/esm/src/components/value-list/value-list.scss?tag=calcite-value-list&encapsulation=shadow","../node_modules/@esri/calcite-components/dist/esm/src/components/value-list-item/resources.ts","../node_modules/@esri/calcite-components/dist/esm/src/components/value-list-item/value-list-item.tsx","../node_modules/@esri/calcite-components/dist/esm/src/components/value-list-item/value-list-item.scss?tag=calcite-value-list-item&encapsulation=shadow"],"sourcesContent":["import { ValueUnion } from \"../types\";\n\nexport const CSS = {\n  container: \"container\",\n  handle: \"handle\",\n};\n\nexport const ICON_TYPES = {\n  grip: \"grip\",\n};\n\nexport type ICON_TYPES = ValueUnion<typeof ICON_TYPES>;\n\nexport const TEXT = {\n  filterResults: \"Filter results\",\n};\n","import { getItemIndex } from \"../pick-list/shared-list-logic\";\nimport { DragStatus } from \"./interfaces\";\nimport { ValueList } from \"./value-list\";\n\nexport function getScreenReaderText(\n  item: HTMLCalciteValueListItemElement,\n  status: DragStatus,\n  valueList: ValueList<HTMLCalciteValueListItemElement>,\n): string {\n  const { items, messages } = valueList;\n\n  const total = items.length;\n  const position = getItemIndex(valueList, item) + 1;\n  const template =\n    status === \"idle\"\n      ? messages.dragHandleIdle\n      : status === \"active\"\n        ? messages.dragHandleActive\n        : status === \"change\"\n          ? messages.dragHandleChange\n          : messages.dragHandleCommit;\n\n  return replacePlaceholders(template, item.label, position, total);\n}\n\nexport function getHandleAndItemElement(event: KeyboardEvent | FocusEvent): {\n  handle: HTMLCalciteHandleElement;\n  item: HTMLCalciteValueListItemElement;\n} {\n  const handle = event\n    .composedPath()\n    .find((item: HTMLElement): item is HTMLCalciteHandleElement => item.dataset?.jsHandle !== undefined);\n\n  const item = event\n    .composedPath()\n    .find(\n      (item: HTMLElement): item is HTMLCalciteValueListItemElement =>\n        item.tagName?.toLowerCase() === \"calcite-value-list-item\",\n    );\n\n  return { handle, item };\n}\n\nexport function replacePlaceholders(text: string, label: string, position: number, total: number): string {\n  const replacePosition = text.replace(\"{position}\", position.toString());\n  const replaceLabel = replacePosition.replace(\"{itemLabel}\", label);\n  return replaceLabel.replace(\"{total}\", total.toString());\n}\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Listen,\n  Method,\n  Prop,\n  State,\n  VNode,\n  Watch,\n} from \"@stencil/core\";\nimport Sortable from \"sortablejs\";\nimport { InteractiveComponent, updateHostInteraction } from \"../../utils/interactive\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport { connectLocalized, disconnectLocalized, LocalizedComponent } from \"../../utils/locale\";\nimport { createObserver } from \"../../utils/observers\";\nimport {\n  connectMessages,\n  disconnectMessages,\n  setUpMessages,\n  T9nComponent,\n  updateMessages,\n} from \"../../utils/t9n\";\nimport {\n  calciteInternalListItemValueChangeHandler,\n  calciteListFocusOutHandler,\n  calciteListItemChangeHandler,\n  cleanUpObserver,\n  deselectRemovedItems,\n  deselectSiblingItems,\n  getItemData,\n  handleFilter,\n  handleFilterEvent,\n  handleInitialFilter,\n  initialize,\n  initializeObserver,\n  ItemData,\n  keyDownHandler,\n  ListFocusId,\n  moveItemIndex,\n  mutationObserverCallback,\n  removeItem,\n  selectSiblings,\n  setFocus,\n  setUpItems,\n} from \"../pick-list/shared-list-logic\";\nimport List from \"../pick-list/shared-list-render\";\nimport { ListItemAndHandle } from \"../value-list-item/interfaces\";\nimport {\n  DragDetail,\n  connectSortableComponent,\n  disconnectSortableComponent,\n  SortableComponent,\n} from \"../../utils/sortableComponent\";\nimport { focusElement, toAriaBoolean } from \"../../utils/dom\";\nimport { logger } from \"../../utils/logger\";\nimport { ValueListMessages } from \"./assets/value-list/t9n\";\nimport { CSS, ICON_TYPES } from \"./resources\";\nimport { getHandleAndItemElement, getScreenReaderText } from \"./utils\";\n\nlogger.deprecated(\"component\", {\n  name: \"value-list\",\n  removalVersion: 3,\n  suggested: \"list\",\n});\n\n/**\n * @deprecated Use the `calcite-list` component instead.\n * @slot - A slot for adding `calcite-value-list-item` elements. List items are displayed as a vertical list.\n * @slot menu-actions - A slot for adding a button and menu combination for performing actions, such as sorting.\n */\n@Component({\n  tag: \"calcite-value-list\",\n  styleUrl: \"value-list.scss\",\n  shadow: true,\n  assetsDirs: [\"assets\"],\n})\nexport class ValueList<\n    ItemElement extends HTMLCalciteValueListItemElement = HTMLCalciteValueListItemElement,\n  >\n  implements\n    InteractiveComponent,\n    LoadableComponent,\n    LocalizedComponent,\n    T9nComponent,\n    SortableComponent\n{\n  // --------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * When `true`, interaction is prevented and the component is displayed with lower opacity.\n   */\n  @Prop({ reflect: true }) disabled = false;\n\n  /**\n   * When provided, the method will be called to determine whether the element can move from the list.\n   */\n  @Prop() canPull: (detail: DragDetail) => boolean;\n\n  /**\n   * When provided, the method will be called to determine whether the element can be added from another list.\n   */\n  @Prop() canPut: (detail: DragDetail) => boolean;\n\n  /**\n   * When `true`, `calcite-value-list-item`s are sortable via a draggable button.\n   */\n  @Prop({ reflect: true }) dragEnabled = false;\n\n  /**\n   * The currently filtered items.\n   *\n   * @readonly\n   */\n  @Prop({ mutable: true }) filteredItems: HTMLCalciteValueListItemElement[] = [];\n\n  /**\n   * The currently filtered data.\n   *\n   * @readonly\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by shared-list-logic module\n  @Prop({ mutable: true }) filteredData: ItemData = [];\n\n  /**\n   * When `true`, an input appears at the top of the component that can be used by end users to filter list items.\n   */\n  @Prop({ reflect: true }) filterEnabled = false;\n\n  /**\n   * Placeholder text for the filter's input field.\n   */\n  @Prop({ reflect: true }) filterPlaceholder: string;\n\n  /**\n   * Text for the filter input field.\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by shared-list-logic module\n  @Prop({ reflect: true, mutable: true }) filterText: string;\n\n  /**\n   * The component's group identifier.\n   *\n   * To drag elements from one list into another, both lists must have the same group value.\n   */\n  @Prop({ reflect: true }) group?: string;\n\n  /**\n   * When `true`, a busy indicator is displayed.\n   */\n  @Prop({ reflect: true }) loading = false;\n\n  /**\n   * Similar to standard radio buttons and checkboxes.\n   * When `true`, a user can select multiple `calcite-value-list-item`s at a time.\n   * When `false`, only a single `calcite-value-list-item` can be selected at a time,\n   * and a new selection will deselect previous selections.\n   */\n  @Prop({ reflect: true }) multiple = false;\n\n  /**\n   * When `true` and single-selection is enabled, the selection changes when navigating `calcite-value-list-item`s via keyboard.\n   */\n  @Prop({ reflect: true }) selectionFollowsFocus = false;\n\n  /**\n   * Use this property to override individual strings used by the component.\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messageOverrides: Partial<ValueListMessages>;\n\n  @Watch(\"messageOverrides\")\n  onMessagesChange(): void {\n    /* wired up by t9n util */\n  }\n\n  /**\n   * Made into a prop for testing purposes only\n   *\n   * @internal\n   */\n  // eslint-disable-next-line @stencil-community/strict-mutable -- updated by t9n module\n  @Prop({ mutable: true }) messages: ValueListMessages;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteValueListElement;\n\n  @State() dataForFilter: ItemData = [];\n\n  @State() defaultMessages: ValueListMessages;\n\n  @State() effectiveLocale = \"\";\n\n  @Watch(\"effectiveLocale\")\n  effectiveLocaleChange(): void {\n    updateMessages(this, this.effectiveLocale);\n  }\n\n  @State() selectedValues: Map<string, ItemElement> = new Map();\n\n  items: ItemElement[];\n\n  lastSelectedItem: ItemElement = null;\n\n  mutationObserver = createObserver(\"mutation\", mutationObserverCallback.bind(this));\n\n  sortable: Sortable;\n\n  emitCalciteListChange: () => void;\n\n  emitCalciteListFilter: () => void;\n\n  filterEl: HTMLCalciteFilterElement;\n\n  assistiveTextEl: HTMLSpanElement;\n\n  handleSelector = `.${CSS.handle}`;\n\n  dragSelector = \"calcite-value-list-item\";\n\n  // --------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  // --------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    connectLocalized(this);\n    connectMessages(this);\n    initialize.call(this);\n    initializeObserver.call(this);\n    this.setUpSorting();\n  }\n\n  async componentWillLoad(): Promise<void> {\n    setUpLoadableComponent(this);\n    await setUpMessages(this);\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n    handleInitialFilter.call(this);\n  }\n\n  componentDidRender(): void {\n    updateHostInteraction(this);\n  }\n\n  disconnectedCallback(): void {\n    disconnectSortableComponent(this);\n    disconnectLocalized(this);\n    disconnectMessages(this);\n    cleanUpObserver.call(this);\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * Emits when any of the list item selections have changed.\n   */\n  @Event({ cancelable: false }) calciteListChange: EventEmitter<\n    Map<string, HTMLCalciteValueListItemElement>\n  >;\n\n  /**\n   * Emits when the order of the list has changed.\n   */\n  @Event({ cancelable: false }) calciteListOrderChange: EventEmitter<any[]>;\n\n  /**\n   * Emits when a filter has changed.\n   */\n  @Event({ cancelable: false }) calciteListFilter: EventEmitter<void>;\n\n  @Listen(\"focusout\")\n  calciteListFocusOutHandler(event: FocusEvent): void {\n    calciteListFocusOutHandler.call(this, event);\n  }\n\n  @Listen(\"calciteListItemRemove\")\n  calciteListItemRemoveHandler(event: CustomEvent<void>): void {\n    removeItem.call(this, event);\n  }\n\n  @Listen(\"calciteListItemChange\")\n  calciteListItemChangeHandler(event: CustomEvent): void {\n    calciteListItemChangeHandler.call(this, event);\n  }\n\n  @Listen(\"calciteInternalListItemPropsChange\")\n  calciteInternalListItemPropsChangeHandler(event: CustomEvent): void {\n    event.stopPropagation();\n    this.setUpFilter();\n  }\n\n  @Listen(\"calciteInternalListItemValueChange\")\n  calciteInternalListItemValueChangeHandler(event: CustomEvent): void {\n    calciteInternalListItemValueChangeHandler.call(this, event);\n    event.stopPropagation();\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  // --------------------------------------------------------------------------\n\n  onGlobalDragStart(): void {\n    cleanUpObserver.call(this);\n  }\n\n  onGlobalDragEnd(): void {\n    initializeObserver.call(this);\n  }\n\n  onDragEnd(): void {}\n\n  onDragStart(): void {}\n\n  onDragSort(): void {\n    this.items = Array.from(this.el.querySelectorAll<ItemElement>(\"calcite-value-list-item\"));\n    const values = this.items.map((item) => item.value);\n    this.calciteListOrderChange.emit(values);\n  }\n\n  getItems(): ItemElement[] {\n    return Array.from(this.el.querySelectorAll<ItemElement>(\"calcite-value-list-item\"));\n  }\n\n  setUpItems(): void {\n    setUpItems.call(this, \"calcite-value-list-item\");\n    this.setUpSorting();\n  }\n\n  setUpFilter(): void {\n    if (this.filterEnabled) {\n      this.dataForFilter = this.getItemData();\n    }\n  }\n\n  setFilterEl = (el: HTMLCalciteFilterElement): void => {\n    this.filterEl = el;\n  };\n\n  setFilteredItems = (filteredItems: HTMLCalciteValueListItemElement[]): void => {\n    this.filteredItems = filteredItems;\n  };\n\n  setUpSorting(): void {\n    const { dragEnabled } = this;\n\n    if (!dragEnabled) {\n      return;\n    }\n\n    connectSortableComponent(this);\n  }\n\n  deselectRemovedItems = deselectRemovedItems.bind(this);\n\n  deselectSiblingItems = deselectSiblingItems.bind(this);\n\n  selectSiblings = selectSiblings.bind(this);\n\n  handleFilter = handleFilter.bind(this);\n\n  handleFilterEvent = handleFilterEvent.bind(this);\n\n  getItemData = getItemData.bind(this);\n\n  keyDownHandler = (event: KeyboardEvent): void => {\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    const { handle, item } = getHandleAndItemElement(event);\n    if (handle && !item.handleActivated && event.key === \" \") {\n      this.updateScreenReaderText(getScreenReaderText(item, \"commit\", this));\n    }\n\n    if (!handle || !item.handleActivated) {\n      keyDownHandler.call(this, event);\n      return;\n    }\n\n    event.preventDefault();\n\n    const { items } = this;\n\n    if (event.key === \" \") {\n      this.updateScreenReaderText(getScreenReaderText(item, \"active\", this));\n    }\n\n    if ((event.key !== \"ArrowUp\" && event.key !== \"ArrowDown\") || items.length <= 1) {\n      return;\n    }\n\n    const { el } = this;\n    const nextIndex = moveItemIndex(this, item, event.key === \"ArrowUp\" ? \"up\" : \"down\");\n    if (nextIndex === items.length - 1) {\n      el.appendChild(item);\n    } else {\n      const itemAtNextIndex = el.children[nextIndex];\n      const insertionReferenceItem =\n        itemAtNextIndex === item.nextElementSibling\n          ? itemAtNextIndex.nextElementSibling\n          : itemAtNextIndex;\n      el.insertBefore(item, insertionReferenceItem);\n    }\n\n    this.items = this.getItems();\n    this.calciteListOrderChange.emit(this.items.map(({ value }) => value));\n\n    requestAnimationFrame(() => focusElement(handle));\n    item.handleActivated = true;\n\n    this.updateHandleAriaLabel(handle, getScreenReaderText(item, \"change\", this));\n  };\n\n  handleBlur(): void {\n    if (this.dragEnabled) {\n      this.updateScreenReaderText(\"\");\n    }\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  // --------------------------------------------------------------------------\n\n  /** Returns the component's selected items. */\n  @Method()\n  async getSelectedItems(): Promise<Map<string, HTMLCalciteValueListItemElement>> {\n    return this.selectedValues;\n  }\n\n  /**\n   * Sets focus on the component's first focusable element.\n   *\n   * @param focusId\n   */\n  @Method()\n  async setFocus(focusId?: ListFocusId): Promise<void> {\n    await componentFocusable(this);\n\n    return setFocus.call(this, focusId);\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  // --------------------------------------------------------------------------\n\n  getIconType(): typeof ICON_TYPES | null {\n    let type = null;\n    if (this.dragEnabled) {\n      type = ICON_TYPES.grip;\n    }\n    return type;\n  }\n\n  updateScreenReaderText(text: string): void {\n    this.assistiveTextEl.textContent = text;\n  }\n\n  updateHandleAriaLabel(handleElement: HTMLSpanElement, text: string): void {\n    handleElement.ariaLabel = text;\n  }\n\n  storeAssistiveEl = (el: HTMLSpanElement): void => {\n    this.assistiveTextEl = el;\n  };\n\n  handleFocusIn = (event: FocusEvent): void => {\n    const { handle, item } = getHandleAndItemElement(event);\n    if (!item?.handleActivated && item && handle) {\n      this.updateHandleAriaLabel(handle, getScreenReaderText(item, \"idle\", this));\n    }\n  };\n\n  @Listen(\"calciteValueListItemDragHandleBlur\")\n  handleValueListItemBlur(event: CustomEvent<ListItemAndHandle>): void {\n    const { item, handle } = event.detail;\n    if (!item?.handleActivated && item) {\n      this.updateHandleAriaLabel(handle, getScreenReaderText(item, \"idle\", this));\n    }\n    event.stopPropagation();\n  }\n\n  render(): VNode {\n    return (\n      <Host\n        aria-busy={toAriaBoolean(this.loading)}\n        onBlur={this.handleBlur}\n        onFocusin={this.handleFocusIn}\n        onKeyDown={this.keyDownHandler}\n        role=\"menu\"\n      >\n        <List props={this} />\n      </Host>\n    );\n  }\n}\n",":host {\n  @apply text-color-2\n    text-n1\n    relative\n    box-border\n    flex\n    flex-shrink-0\n    flex-grow-0\n    flex-col\n    items-stretch\n    bg-transparent;\n  * {\n    @apply box-border;\n  }\n}\n\n@include disabled();\n\ncalcite-value-list-item:last-of-type {\n  @apply shadow-none;\n}\n\n:host([filter-enabled]) header {\n  @apply bg-foreground-1\n    mb-1\n    flex\n    items-center\n    justify-end;\n  &.sticky-pos {\n    @apply sticky top-0 z-sticky;\n  }\n  @apply shadow-border-bottom;\n}\n\ncalcite-filter {\n  @apply mb-px;\n}\n\n.assistive-text {\n  @apply sr-only;\n}\n\n@include base-component();\n","export const ICONS = {\n  drag: \"drag\",\n} as const;\n\nexport const SLOTS = {\n  actionsEnd: \"actions-end\",\n  actionsStart: \"actions-start\",\n};\n","import {\n  Component,\n  Element,\n  Event,\n  EventEmitter,\n  h,\n  Host,\n  Listen,\n  Method,\n  Prop,\n  VNode,\n} from \"@stencil/core\";\nimport {\n  ConditionalSlotComponent,\n  connectConditionalSlotComponent,\n  disconnectConditionalSlotComponent,\n} from \"../../utils/conditionalSlot\";\nimport { getSlotted } from \"../../utils/dom\";\nimport { guid } from \"../../utils/guid\";\nimport {\n  InteractiveComponent,\n  InteractiveContainer,\n  updateHostInteraction,\n} from \"../../utils/interactive\";\nimport {\n  componentFocusable,\n  LoadableComponent,\n  setComponentLoaded,\n  setUpLoadableComponent,\n} from \"../../utils/loadable\";\nimport { CSS, SLOTS as PICK_LIST_SLOTS } from \"../pick-list-item/resources\";\nimport { ICON_TYPES } from \"../pick-list/resources\";\nimport { logger } from \"../../utils/logger\";\nimport { ListItemAndHandle } from \"./interfaces\";\nimport { ICONS, SLOTS } from \"./resources\";\n\nlogger.deprecated(\"component\", {\n  name: \"value-list-item\",\n  removalVersion: 3,\n  suggested: \"list-item\",\n});\n\n/**\n * @deprecated Use the `calcite-list` component instead.\n * @slot actions-end - A slot for adding `calcite-action`s or content to the end side of the component.\n * @slot actions-start - A slot for adding `calcite-action`s or content to the start side of the component.\n */\n@Component({\n  tag: \"calcite-value-list-item\",\n  styleUrl: \"value-list-item.scss\",\n  shadow: true,\n})\nexport class ValueListItem\n  implements ConditionalSlotComponent, InteractiveComponent, LoadableComponent\n{\n  // --------------------------------------------------------------------------\n  //\n  //  Properties\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * A description for the component that displays below the label text.\n   */\n  @Prop({ reflect: true }) description?: string;\n\n  /**\n   * When `true`, interaction is prevented and the component is displayed with lower opacity.\n   */\n  @Prop({ reflect: true }) disabled = false;\n\n  /**\n   * @internal\n   */\n  @Prop() deselectDisabled = false;\n\n  /**\n   * When `true`, prevents the content of the component from user interaction.\n   */\n  @Prop({ reflect: true }) nonInteractive = false;\n\n  /**\n   * @internal\n   */\n  @Prop({ mutable: true }) handleActivated? = false;\n\n  /**\n   * Determines the icon SVG symbol that will be shown. Options are circle, square, grip or null.\n   *\n   * @see [ICON_TYPES](https://github.com/Esri/calcite-design-system/blob/dev/src/components/pick-list/resources.ts#L5)\n   */\n  @Prop({ reflect: true }) icon?: ICON_TYPES | null = null;\n\n  /** When `true`, the icon will be flipped when the element direction is right-to-left (`\"rtl\"`). */\n  @Prop({ reflect: true }) iconFlipRtl = false;\n\n  /**\n   * Label and accessible name for the component. Appears next to the icon.\n   */\n  @Prop({ reflect: true }) label!: string;\n\n  /**\n   * Provides additional metadata to the component. Primary use is for a filter on the parent list.\n   */\n  @Prop() metadata?: Record<string, unknown>;\n\n  /**\n   * When `true`, adds an action to remove the component.\n   */\n  @Prop({ reflect: true }) removable = false;\n\n  /**\n   * When `true`, the component is selected.\n   */\n  @Prop({ reflect: true, mutable: true }) selected = false;\n\n  /**\n   * The component's value.\n   */\n  @Prop() value!: any;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Properties\n  //\n  // --------------------------------------------------------------------------\n\n  @Element() el: HTMLCalciteValueListItemElement;\n\n  pickListItem: HTMLCalcitePickListItemElement = null;\n\n  handleEl: HTMLSpanElement;\n\n  guid = `calcite-value-list-item-${guid()}`;\n\n  // --------------------------------------------------------------------------\n  //\n  //  Lifecycle\n  //\n  // --------------------------------------------------------------------------\n\n  connectedCallback(): void {\n    connectConditionalSlotComponent(this);\n  }\n\n  disconnectedCallback(): void {\n    disconnectConditionalSlotComponent(this);\n  }\n\n  componentWillLoad(): void {\n    setUpLoadableComponent(this);\n  }\n\n  componentDidLoad(): void {\n    setComponentLoaded(this);\n  }\n\n  componentDidRender(): void {\n    updateHostInteraction(this);\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Public Methods\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * Toggle the selection state. By default this won't trigger an event.\n   * The first argument allows the value to be coerced, rather than swapping values.\n   *\n   * @param coerce\n   */\n  @Method()\n  async toggleSelected(coerce?: boolean): Promise<void> {\n    this.pickListItem.toggleSelected(coerce);\n  }\n\n  /** Set focus on the component. */\n  @Method()\n  async setFocus(): Promise<void> {\n    await componentFocusable(this);\n\n    return this.pickListItem?.setFocus();\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Events\n  //\n  // --------------------------------------------------------------------------\n\n  /**\n   * Fires when the component is selected or unselected.\n   */\n  @Event({ cancelable: false }) calciteListItemChange: EventEmitter<{\n    item: HTMLCalciteValueListItemElement;\n    value: any;\n    selected: boolean;\n    shiftPressed: boolean;\n  }>;\n\n  /**\n   * Fires when the remove button is pressed.\n   */\n  @Event({ cancelable: true }) calciteListItemRemove: EventEmitter<void>; // wrapped pick-list-item emits this\n\n  /**\n   * @internal\n   */\n  @Event({ cancelable: false })\n  calciteValueListItemDragHandleBlur: EventEmitter<ListItemAndHandle>;\n\n  @Listen(\"calciteListItemChange\")\n  calciteListItemChangeHandler(event: CustomEvent): void {\n    // adjust item payload from wrapped item before bubbling\n    event.detail.item = this.el;\n  }\n\n  // --------------------------------------------------------------------------\n  //\n  //  Private Methods\n  //\n  // --------------------------------------------------------------------------\n\n  getPickListRef = (el: HTMLCalcitePickListItemElement): HTMLCalcitePickListItemElement =>\n    (this.pickListItem = el);\n\n  handleKeyDown = (event: KeyboardEvent): void => {\n    if (event.key === \" \") {\n      this.handleActivated = !this.handleActivated;\n    }\n  };\n\n  handleBlur = (): void => {\n    this.handleActivated = false;\n    this.calciteValueListItemDragHandleBlur.emit({ item: this.el, handle: this.handleEl });\n  };\n\n  handleSelectChange = (event: CustomEvent): void => {\n    this.selected = event.detail.selected;\n  };\n\n  // --------------------------------------------------------------------------\n  //\n  //  Render Methods\n  //\n  // --------------------------------------------------------------------------\n\n  renderActionsEnd(): VNode {\n    const { el } = this;\n    const hasActionsEnd = getSlotted(el, SLOTS.actionsEnd);\n\n    return hasActionsEnd ? (\n      <slot name={SLOTS.actionsEnd} slot={PICK_LIST_SLOTS.actionsEnd} />\n    ) : null;\n  }\n\n  renderActionsStart(): VNode {\n    const { el } = this;\n    const hasActionsStart = getSlotted(el, SLOTS.actionsStart);\n\n    return hasActionsStart ? (\n      <slot name={SLOTS.actionsStart} slot={PICK_LIST_SLOTS.actionsStart} />\n    ) : null;\n  }\n\n  renderHandle(): VNode {\n    const { icon, iconFlipRtl } = this;\n    if (icon === ICON_TYPES.grip) {\n      return (\n        <span\n          class={{\n            [CSS.handle]: true,\n            [CSS.handleActivated]: this.handleActivated,\n          }}\n          data-js-handle\n          onBlur={this.handleBlur}\n          onKeyDown={this.handleKeyDown}\n          ref={(el) => (this.handleEl = el)}\n          role=\"button\"\n          tabindex=\"0\"\n        >\n          <calcite-icon flipRtl={iconFlipRtl} icon={ICONS.drag} scale=\"s\" />\n        </span>\n      );\n    }\n  }\n\n  render(): VNode {\n    return (\n      <Host id={this.el.id || this.guid}>\n        <InteractiveContainer disabled={this.disabled}>\n          {this.renderHandle()}\n          <calcite-pick-list-item\n            description={this.description}\n            deselectDisabled={this.deselectDisabled}\n            disabled={this.disabled}\n            label={this.label}\n            metadata={this.metadata}\n            nonInteractive={this.nonInteractive}\n            onCalciteListItemChange={this.handleSelectChange}\n            ref={this.getPickListRef}\n            removable={this.removable}\n            selected={this.selected}\n            value={this.value}\n          >\n            {this.renderActionsStart()}\n            {this.renderActionsEnd()}\n          </calcite-pick-list-item>\n        </InteractiveContainer>\n      </Host>\n    );\n  }\n}\n",":host {\n  @apply bg-foreground-1\n    text-color-2\n    text-n1\n    shadow-border-bottom\n    mb-px\n    box-border\n    flex;\n  transition:\n    background-color var(--calcite-animation-timing),\n    box-shadow var(--calcite-animation-timing);\n  * {\n    @apply box-border;\n  }\n}\n\ncalcite-pick-list-item {\n  @apply relative\n    m-0\n    flex-grow\n    shadow-none;\n}\n\n:host([active]),\n:host([selected]) {\n  @apply shadow-outline-active;\n}\n\n.handle {\n  @apply flex\n    cursor-move\n    items-center\n    justify-center\n    border-none\n    bg-transparent\n    py-0\n    px-1;\n  color: theme(\"borderColor.color.input\");\n  &:hover {\n    @apply bg-foreground-2 text-color-1;\n  }\n  @apply focus-base;\n  &:focus {\n    @apply focus-inset;\n  }\n  &--activated {\n    @apply bg-foreground-3 text-color-1;\n  }\n  calcite-icon {\n    color: inherit;\n  }\n}\n\n@include disabled();\n@include base-component();\n"],"names":["CSS","ICON_TYPES","getScreenReaderText","item","status","valueList","items","messages","total","length","position","getItemIndex","text","label","replacePosition","replace","toString","replacePlaceholders","dragHandleIdle","dragHandleActive","dragHandleChange","dragHandleCommit","getHandleAndItemElement","event","handle","composedPath","find","undefined","dataset","jsHandle","tagName","toLowerCase","logger","deprecated","name","removalVersion","suggested","ValueList","lastSelectedItem","mutationObserver","createObserver","mutationObserverCallback","bind","this","handleSelector","dragSelector","setFilterEl","el","filterEl","setFilteredItems","filteredItems","deselectRemovedItems","deselectSiblingItems","selectSiblings","handleFilter","handleFilterEvent","getItemData","keyDownHandler","defaultPrevented","handleActivated","key","updateScreenReaderText","call","preventDefault","nextIndex","moveItemIndex","appendChild","itemAtNextIndex","children","insertionReferenceItem","nextElementSibling","insertBefore","getItems","calciteListOrderChange","emit","map","value","requestAnimationFrame","focusElement","updateHandleAriaLabel","storeAssistiveEl","assistiveTextEl","handleFocusIn","Map","onMessagesChange","effectiveLocaleChange","updateMessages","effectiveLocale","connectedCallback","connectLocalized","connectMessages","initialize","initializeObserver","setUpSorting","componentWillLoad","setUpLoadableComponent","setUpMessages","componentDidLoad","setComponentLoaded","handleInitialFilter","componentDidRender","updateHostInteraction","disconnectedCallback","disconnectSortableComponent","disconnectLocalized","disconnectMessages","cleanUpObserver","calciteListFocusOutHandler","calciteListItemRemoveHandler","removeItem","calciteListItemChangeHandler","calciteInternalListItemPropsChangeHandler","stopPropagation","setUpFilter","calciteInternalListItemValueChangeHandler","onGlobalDragStart","onGlobalDragEnd","onDragEnd","onDragStart","onDragSort","Array","from","querySelectorAll","values","setUpItems","filterEnabled","dataForFilter","dragEnabled","connectSortableComponent","handleBlur","getSelectedItems","selectedValues","setFocus","focusId","componentFocusable","getIconType","type","textContent","handleElement","ariaLabel","handleValueListItemBlur","detail","render","h","Host","toAriaBoolean","loading","onBlur","onFocusin","onKeyDown","role","List","props","ICONS","SLOTS","ValueListItem","pickListItem","guid","getPickListRef","handleKeyDown","calciteValueListItemDragHandleBlur","handleEl","handleSelectChange","selected","connectConditionalSlotComponent","disconnectConditionalSlotComponent","toggleSelected","coerce","renderActionsEnd","getSlotted","slot","SLOTS$1","actionsEnd","renderActionsStart","actionsStart","renderHandle","icon","iconFlipRtl","ICON_TYPES$1","grip","class","CSS$1","ref","tabindex","flipRtl","scale","id","InteractiveContainer","disabled","description","deselectDisabled","metadata","nonInteractive","onCalciteListItemChange","removable"],"sourceRoot":""}